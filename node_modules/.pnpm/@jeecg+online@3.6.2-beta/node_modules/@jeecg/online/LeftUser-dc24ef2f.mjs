var m = (n, l, o) => new Promise((i, r) => {
  var c = (e) => {
    try {
      a(o.next(e));
    } catch (t) {
      r(t);
    }
  }, s = (e) => {
    try {
      a(o.throw(e));
    } catch (t) {
      r(t);
    }
  }, a = (e) => e.done ? i(e.value) : Promise.resolve(e.value).then(c, s);
  a((o = o.apply(n, l)).next());
});
import { defineComponent as g, resolveComponent as w, openBlock as _, createBlock as b, withCtx as h, createElementVNode as S } from "vue";
import { defHttp as T } from "/@/utils/http/axios";
import { BasicTable as C } from "/@/components/Table";
import { useListPage as x } from "/@/hooks/system/useListPage";
import { _ as B } from "./index-0e3ab3af.mjs";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "/@/hooks/web/useMessage";
import "vue-router";
const R = g({
  name: "LeftUser",
  components: { BasicTable: C },
  emits: ["select"],
  setup(n, { emit: l }) {
    const { tableContext: o, createMessage: i } = x({
      tableProps: {
        api: a,
        rowKey: "id",
        size: "small",
        bordered: !0,
        columns: [
          { title: "账号", dataIndex: "username", width: 200 },
          { title: "姓名", dataIndex: "realname", width: 200 }
        ],
        rowSelection: {
          type: "radio",
          onChange(t) {
            t.length > 0 && l("select", t[0]);
          }
        },
        formConfig: {
          schemas: [
            {
              label: "账号",
              field: "username",
              component: "JInput",
              componentProps: {
                placeholder: "输入账号模糊查询"
              }
            },
            {
              label: "姓名",
              field: "realname",
              component: "JInput",
              componentProps: {
                placeholder: "输入姓名模糊查询"
              }
            }
          ]
        },
        canResize: !1,
        clickToRowSelect: !0,
        showActionColumn: !1,
        showTableSetting: !1
      }
    }), [r, { clearSelectedRowKeys: c }, { rowSelection: s }] = o;
    function a(t) {
      return m(this, null, function* () {
        let { code: p, success: f, result: d, message: u } = yield T.get(
          {
            url: "/sys/user/list",
            params: t
          },
          { isTransformResponse: !1 }
        );
        return f ? d : (p === 510 && i.warning(u), {});
      });
    }
    function e() {
      c();
    }
    return { rowSelection: s, registerTable: r, clearSelected: e };
  }
}), $ = /* @__PURE__ */ S("span", null, null, -1);
function y(n, l, o, i, r, c) {
  const s = w("BasicTable");
  return _(), b(s, {
    onRegister: n.registerTable,
    rowSelection: n.rowSelection
  }, {
    tableTop: h(() => [
      $
    ]),
    _: 1
  }, 8, ["onRegister", "rowSelection"]);
}
const D = /* @__PURE__ */ B(R, [["render", y]]);
export {
  D as default
};
