var C = (t, c, n) => new Promise((u, b) => {
  var h = (a) => {
    try {
      i(n.next(a));
    } catch (o) {
      b(o);
    }
  }, s = (a) => {
    try {
      i(n.throw(a));
    } catch (o) {
      b(o);
    }
  }, i = (a) => a.done ? u(a.value) : Promise.resolve(a.value).then(h, s);
  i((n = n.apply(t, c)).next());
});
import { defineComponent as ee, ref as f, computed as P, reactive as S, nextTick as te, resolveComponent as m, openBlock as R, createElementBlock as oe, Fragment as ae, createVNode as g, withCtx as F, createBlock as le, mergeProps as ne, createCommentVNode as ie } from "vue";
import { defHttp as k } from "/@/utils/http/axios";
import { BasicForm as re, useForm as se } from "/@/components/Form";
import { BasicModal as ce, useModalInner as me, useModal as B } from "/@/components/Modal";
import { JVxeTypes as N } from "/@/components/jeecg/JVxeTable/types";
import { b as ue } from "./useSchemas-0433a403.mjs";
import { underLine2CamelCase as O } from "/@/utils/common/compUtils";
import pe from "./CodeFileListModal-a6d3290d.mjs";
import de from "./FileSelectModal-9a02560b.mjs";
import { _ as fe } from "./index-0e3ab3af.mjs";
import "ant-design-vue";
import "@ant-design/icons-vue";
import "/@/hooks/web/usePermission";
import "/@/utils/helper/validator";
import "./CodeFileViewModal-373e8058.mjs";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "/@/hooks/web/useMessage";
import "vue-router";
import "/@/utils/file/download";
const ge = ee({
  name: "CodeGenerator",
  components: { BasicForm: re, BasicModal: ce, FileSelectModal: de, CodeFileListModal: pe },
  emits: ["register"],
  setup(t) {
    const c = "JEECG_ONL_PROJECT_PATH", n = f(!0), u = f(), b = P(() => n.value ? 800 : 1200), h = f("代码生成"), s = f(!1), i = f(""), a = S({
      projectPath: "",
      packageStyle: "service",
      jspMode: "",
      jformType: "1",
      tableName_tmp: "",
      ftlDescription: "",
      entityName: "",
      codeTypes: "controller,service,dao,mapper,entity,vue"
    }), o = S({}), M = f([]), p = S({
      dataSource: [],
      columns: [
        {
          title: "子表名",
          key: "tableName",
          type: N.input,
          disabled: !0,
          validateRules: [{ required: !0, message: "请输入${title}" }]
        },
        {
          title: "子表实体",
          key: "entityName",
          type: N.input,
          validateRules: [{ required: !0, message: "请输入${title}" }]
        },
        {
          title: "功能说明",
          key: "ftlDescription",
          type: N.input,
          validateRules: [{ required: !0, message: "请输入${title}" }]
        }
      ]
    }), T = P(() => p.dataSource.length > 0), { formSchemas: D } = ue(
      t,
      {
        onProjectPathChange: X,
        onProjectPathSearch: z,
        jspModeOptions: M
      },
      n
    ), [E, { resetFields: G, setFieldsValue: w, validate: $ }] = se({
      schemas: D,
      showActionButtonGroup: !1,
      labelAlign: "right"
    }), [J, { closeModal: j }] = me((e) => C(this, null, function* () {
      yield G(), i.value = e.code, s.value = !1, p.dataSource = [], M.value = [], Q(), Object.assign(o, a), V();
    }));
    function V() {
      return C(this, null, function* () {
        let { main: e, sub: l, jspModeList: d, projectPath: r } = yield k.get({
          url: "/online/cgform/head/tableInfo",
          params: { code: i.value }
        }), v = [];
        for (let y of d) {
          const { code: L, note: Z } = y;
          L == "many" || v.push({
            label: Z,
            value: L
          });
        }
        M.value = v, e.isTree == "Y" ? o.jspMode = "tree" : o.jspMode = v[0].value, n.value = e.tableType == 1, h.value = "代码生成【" + e.tableName + "】", o.projectPath || (o.projectPath = r, window.localStorage.setItem(c, r)), o.jformType = e.tableType + "", o.tableName_tmp = e.tableName, o.ftlDescription = e.tableTxt;
        let _ = O(e.tableName);
        o.entityName = _.substring(0, 1).toUpperCase() + _.substring(1), yield te(), w(o), l && l.length > 0 && (p.dataSource = l.map((y) => ({
          tableName: y.tableName,
          entityName: x(y.tableName),
          ftlDescription: y.tableTxt
        })));
      });
    }
    const [I, { openModal: A }] = B();
    function H() {
      return C(this, null, function* () {
        try {
          const e = yield $();
          let l = Object.assign({}, e, { code: i.value, tableName: e.tableName_tmp });
          if (T.value) {
            if (yield u.value.validateTable())
              return;
            l.subList = u.value.getTableData();
          }
          s.value = !0;
          let d = yield q(l);
          A(!0, {
            codeList: d.codeList,
            pathKey: d.pathKey,
            tableName: e.tableName_tmp
          }), j();
        } catch (e) {
        } finally {
          s.value = !1;
        }
      });
    }
    function q(e) {
      return new Promise((l, d) => {
        k.post({ url: "/online/cgform/api/codeGenerate", params: e }, { isTransformResponse: !1 }).then((r) => {
          if (r.success) {
            let v = r.result, _ = r.message;
            l({
              codeList: v,
              pathKey: _
            });
          } else
            this.$message.error(r.message), d(r.message);
        });
      });
    }
    function K() {
      j();
    }
    const [U, W] = B();
    function z() {
      W.openModal(!0, {});
    }
    function Y(e) {
      window.localStorage.setItem(c, e), w({ projectPath: e });
    }
    function x(e) {
      let l = O(e);
      return l.substring(0, 1).toUpperCase() + l.substring(1);
    }
    function Q() {
      let e = window.localStorage.getItem(c);
      e && (a.projectPath = e);
    }
    function X(e) {
      e.target.value && window.localStorage.setItem(c, e.target.value);
    }
    return {
      title: h,
      modalWidth: b,
      confirmLoading: s,
      subTable: p,
      showSubTable: T,
      onSubmit: H,
      onCancel: K,
      onFileSelect: Y,
      registerFileSelectModal: U,
      subTableRef: u,
      registerForm: E,
      registerModal: J,
      registerCodeFileListModal: I
    };
  }
});
function be(t, c, n, u, b, h) {
  const s = m("BasicForm"), i = m("JVxeTable"), a = m("a-card"), o = m("a-spin"), M = m("BasicModal"), p = m("FileSelectModal"), T = m("code-file-list-modal");
  return R(), oe(ae, null, [
    g(M, {
      onRegister: t.registerModal,
      title: t.title,
      width: t.modalWidth,
      confirmLoading: t.confirmLoading,
      okText: "开始生成",
      cancelText: "取消",
      onOk: t.onSubmit,
      onCancel: t.onCancel
    }, {
      default: F(() => [
        g(o, { spinning: t.confirmLoading }, {
          default: F(() => [
            g(s, { onRegister: t.registerForm }, null, 8, ["onRegister"]),
            t.showSubTable ? (R(), le(a, {
              key: 0,
              title: "子表信息",
              size: "small"
            }, {
              default: F(() => [
                g(i, ne({
                  ref: "subTableRef",
                  rowNumber: "",
                  maxHeight: 580
                }, t.subTable), null, 16)
              ]),
              _: 1
            })) : ie("", !0)
          ]),
          _: 1
        }, 8, ["spinning"])
      ]),
      _: 1
    }, 8, ["onRegister", "title", "width", "confirmLoading", "onOk", "onCancel"]),
    g(p, {
      onRegister: t.registerFileSelectModal,
      onSelect: t.onFileSelect
    }, null, 8, ["onRegister", "onSelect"]),
    g(T, { onRegister: t.registerCodeFileListModal }, null, 8, ["onRegister"])
  ], 64);
}
const Ge = /* @__PURE__ */ fe(ge, [["render", be]]);
export {
  Ge as default
};
