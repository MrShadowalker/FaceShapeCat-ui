var I = Object.defineProperty;
var w = Object.getOwnPropertySymbols;
var L = Object.prototype.hasOwnProperty, R = Object.prototype.propertyIsEnumerable;
var C = (o, a, l) => a in o ? I(o, a, { enumerable: !0, configurable: !0, writable: !0, value: l }) : o[a] = l, y = (o, a) => {
  for (var l in a || (a = {}))
    L.call(a, l) && C(o, l, a[l]);
  if (w)
    for (var l of w(a))
      R.call(a, l) && C(o, l, a[l]);
  return o;
};
var m = (o, a, l) => new Promise((r, n) => {
  var b = (t) => {
    try {
      s(l.next(t));
    } catch (d) {
      n(d);
    }
  }, f = (t) => {
    try {
      s(l.throw(t));
    } catch (d) {
      n(d);
    }
  }, s = (t) => t.done ? r(t.value) : Promise.resolve(t.value).then(b, f);
  s((l = l.apply(o, a)).next());
});
import { BasicModal as J, useModalInner as q } from "/@/components/Modal";
import { ref as u, computed as G, resolveComponent as h, openBlock as H, createBlock as K, mergeProps as z, withCtx as k, createVNode as S } from "vue";
import { BasicForm as A, useForm as $ } from "/@/components/Form/index";
import { defHttp as j } from "/@/utils/http/axios";
import { omit as D } from "lodash-es";
import { _ as E } from "./index-0e3ab3af.mjs";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "/@/hooks/web/useMessage";
import "vue-router";
const Q = {
  name: "LinkTableConfigModal",
  emits: ["success", "register"],
  components: {
    BasicModal: J,
    BasicForm: A
  },
  setup(o, { emit: a }) {
    const l = u(!1), r = u("");
    let n = {};
    const [b, { closeModal: f }] = q((e) => m(this, null, function* () {
      n = y({}, e.record), yield v({ dictTable: e.record.dictTable }), setTimeout(() => m(this, null, function* () {
        let c = D(e.record, "dictTable");
        yield v(c), yield P();
      }), 200), r.value = e.fieldName;
    })), s = u(""), t = u(""), d = u([]), F = u([]);
    function T(e) {
      return m(this, null, function* () {
        if (e) {
          const c = "/online/cgform/field/listByHeadCode", p = yield j.get({ url: c, params: { headCode: e } });
          if (p && p.length > 0) {
            let g = p.filter((i) => i.dbFieldName != "id" && i.dbIsPersist == 1);
            g.length > 0 ? d.value = g.map((i) => ({
              text: i.dbFieldTxt,
              value: i.dbFieldName
            })) : d.value = [];
            let _ = p.filter((i) => i.dbFieldName != "id" && i.fieldShowType == "image" && i.dbIsPersist == 1);
            _.length > 0 ? F.value = _.map((i) => ({
              text: i.dbFieldTxt,
              value: i.dbFieldName
            })) : F.value = [{ text: "无图片字段可以选择", value: "", key: "", disabled: !0 }];
          } else
            d.value = [], F.value = [{ text: "无图片字段可以选择", value: "", key: "", disabled: !0 }];
        }
      });
    }
    function x(e) {
      return m(this, null, function* () {
        s.value = "", t.value = "", yield T(e);
      });
    }
    const V = G(() => {
      let e = d.value, c = s.value, p = t.value;
      return e.filter((g) => g.value != c && g.value != p);
    }), N = [
      {
        label: "rowKey",
        field: "rowKey",
        component: "Input",
        show: !1
      },
      {
        label: "dictField",
        field: "dictField",
        component: "Input",
        defaultValue: "id",
        show: !1
      },
      {
        label: "字段描述",
        field: "dbFieldTxt",
        component: "Input",
        required: !0
      },
      {
        label: "关联表",
        field: "dictTable",
        component: "JSearchSelect",
        required: !0,
        componentProps: ({ formActionType: e }) => ({
          dict: "onl_cgform_head where copy_type = 0,table_txt,table_name",
          pageSize: 10,
          async: !0,
          immediateChange: !0,
          popContainer: ".link-table-config-modal",
          params: { order: "desc", column: "create_time" },
          onChange: (c) => m(this, null, function* () {
            (n.titleField || n.otherFields) && (yield e.setFieldsValue({
              titleField: "",
              otherFields: "",
              imageField: ""
            }), yield e.clearValidate()), yield x(c);
          })
        })
      },
      {
        label: "标题字段",
        field: "titleField",
        component: "JSearchSelect",
        required: !0,
        componentProps: {
          async: !1,
          popContainer: ".link-table-config-modal",
          dictOptions: d,
          immediateChange: !0,
          onChange: (e) => {
            s.value = e, n.titleField = e;
          }
        }
      },
      {
        label: "封面图片",
        field: "imageField",
        component: "JSearchSelect",
        componentProps: {
          async: !1,
          popContainer: ".link-table-config-modal",
          dictOptions: F,
          immediateChange: !0,
          onChange: (e) => {
            t.value = e, n.imageFieldName = e;
          }
        }
      },
      {
        label: "其他字段",
        field: "otherFields",
        component: "JSelectMultiple",
        componentProps: {
          popContainer: ".link-table-config-modal",
          options: V,
          onChange: (e) => {
            n.otherFields = e;
          }
        }
      },
      {
        label: "显示方式",
        field: "showType",
        component: "Select",
        defaultValue: "card",
        componentProps: {
          options: [
            { label: "卡片", value: "card" },
            { label: "下拉框", value: "select" }
          ]
        }
      },
      {
        label: "是否多选",
        field: "multiSelect",
        component: "RadioGroup",
        defaultValue: !1,
        componentProps: {
          options: [
            { label: "否", value: !1 },
            { label: "是", value: !0 }
          ]
        }
      }
    ], [B, { validate: M, setFieldsValue: v, clearValidate: P, resetFields: W }] = $({
      schemas: N,
      showActionButtonGroup: !1,
      labelAlign: "right"
    });
    function O() {
      return m(this, null, function* () {
        let e = yield M();
        e.fieldName = r.value, a("success", e), f();
      });
    }
    return {
      registerModal: b,
      spinningLoading: l,
      registerForm: B,
      handleSubmit: O
    };
  }
};
function U(o, a, l, r, n, b) {
  const f = h("BasicForm"), s = h("a-spin"), t = h("BasicModal");
  return H(), K(t, z({ wrapClassName: "link-table-config-modal" }, o.$attrs, {
    title: "关联记录配置",
    onRegister: r.registerModal,
    keyboard: "",
    canFullscreen: !1,
    cancelText: "关闭",
    onOk: r.handleSubmit
  }), {
    default: k(() => [
      S(s, { spinning: r.spinningLoading }, {
        default: k(() => [
          S(f, { onRegister: r.registerForm }, null, 8, ["onRegister"])
        ]),
        _: 1
      }, 8, ["spinning"])
    ]),
    _: 1
  }, 16, ["onRegister", "onOk"]);
}
const re = /* @__PURE__ */ E(Q, [["render", U]]);
export {
  re as default
};
