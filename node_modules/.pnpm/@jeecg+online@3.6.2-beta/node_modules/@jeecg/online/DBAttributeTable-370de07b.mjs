var Y = Object.defineProperty, $ = Object.defineProperties;
var k = Object.getOwnPropertyDescriptors;
var D = Object.getOwnPropertySymbols;
var x = Object.prototype.hasOwnProperty, K = Object.prototype.propertyIsEnumerable;
var c = (e, t, d) => t in e ? Y(e, t, { enumerable: !0, configurable: !0, writable: !0, value: d }) : e[t] = d, L = (e, t) => {
  for (var d in t || (t = {}))
    x.call(t, d) && c(e, d, t[d]);
  if (D)
    for (var d of D(t))
      K.call(t, d) && c(e, d, t[d]);
  return e;
}, O = (e, t) => $(e, k(t));
import { defineComponent as W, getCurrentInstance as X, ref as b, resolveComponent as Q, openBlock as q, createBlock as J, mergeProps as Z } from "vue";
import { JVxeTypes as i } from "/@/components/jeecg/JVxeTable/types";
import { u as z } from "./useTableSync-774c3774.mjs";
import { _ as j } from "./index-0e3ab3af.mjs";
import "./cgform.data-cbdd88c3.mjs";
import "/@/utils/dict";
import "/@/utils/dict/JDictSelectUtil";
import "/@/utils/uuid";
import "lodash-es";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "/@/hooks/web/useMessage";
import "vue-router";
const ee = [
  "ADD",
  "ALL",
  "ALTER",
  "ANALYZE",
  "AND",
  "AS",
  "ASC",
  "ASENSITIVE",
  "BEFORE",
  "BETWEEN",
  "BIGINT",
  "BINARY",
  "BLOB",
  "BOTH",
  "BY",
  "CALL",
  "CASCADE",
  "CASE",
  "CHANGE",
  "CHAR",
  "CHARACTER",
  "CHECK",
  "COLLATE",
  "COLUMN",
  "CONDITION",
  "CONNECTION",
  "CONSTRAINT",
  "CONTINUE",
  "CONVERT",
  "CREATE",
  "CROSS",
  "CURRENT_DATE",
  "CURRENT_TIME",
  "CURRENT_TIMESTAMP",
  "CURRENT_USER",
  "CURSOR",
  "DATABASE",
  "DATABASES",
  "DAY_HOUR",
  "DAY_MICROSECOND",
  "DAY_MINUTE",
  "DAY_SECOND",
  "DEC",
  "DECIMAL",
  "DECLARE",
  "DEFAULT",
  "DELAYED",
  "DELETE",
  "DESC",
  "DESCRIBE",
  "DETERMINISTIC",
  "DISTINCT",
  "DISTINCTROW",
  "DIV",
  "DOUBLE",
  "DROP",
  "DUAL",
  "EACH",
  "ELSE",
  "ELSEIF",
  "ENCLOSED",
  "ESCAPED",
  "EXISTS",
  "EXIT",
  "EXPLAIN",
  "FALSE",
  "FETCH",
  "FLOAT",
  "FLOAT4",
  "FLOAT8",
  "FOR",
  "FORCE",
  "FOREIGN",
  "FROM",
  "FULLTEXT",
  "GOTO",
  "GRANT",
  "GROUP",
  "HAVING",
  "HIGH_PRIORITY",
  "HOUR_MICROSECOND",
  "HOUR_MINUTE",
  "HOUR_SECOND",
  "IF",
  "IGNORE",
  "IN",
  "INDEX",
  "INFILE",
  "INNER",
  "INOUT",
  "INSENSITIVE",
  "INSERT",
  "INT",
  "INT1",
  "INT2",
  "INT3",
  "INT4",
  "INT8",
  "INTEGER",
  "INTERVAL",
  "INTO",
  "IS",
  "ITERATE",
  "JOIN",
  "KEY",
  "KEYS",
  "KILL",
  "LABEL",
  "LEADING",
  "LEAVE",
  "LEFT",
  "LIKE",
  "LIMIT",
  "LINEAR",
  "LINES",
  "LOAD",
  "LOCALTIME",
  "LOCALTIMESTAMP",
  "LOCK",
  "LONG",
  "LONGBLOB",
  "LONGTEXT",
  "LOOP",
  "LOW_PRIORITY",
  "MATCH",
  "MEDIUMBLOB",
  "MEDIUMINT",
  "MEDIUMTEXT",
  "MIDDLEINT",
  "MINUTE_MICROSECOND",
  "MINUTE_SECOND",
  "MOD",
  "MODIFIES",
  "NATURAL",
  "NOT",
  "NO_WRITE_TO_BINLOG",
  "NULL",
  "NUMERIC",
  "ON",
  "OPTIMIZE",
  "OPTION",
  "OPTIONALLY",
  "OR",
  "ORDER",
  "OUT",
  "OUTER",
  "OUTFILE",
  "PRECISION",
  "PRIMARY",
  "PROCEDURE",
  "PURGE",
  "RAID0",
  "RANGE",
  "READ",
  "READS",
  "REAL",
  "REFERENCES",
  "REGEXP",
  "RELEASE",
  "RENAME",
  "REPEAT",
  "REPLACE",
  "REQUIRE",
  "RESTRICT",
  "RETURN",
  "REVOKE",
  "RIGHT",
  "RLIKE",
  "SCHEMA",
  "SCHEMAS",
  "SECOND_MICROSECOND",
  "SELECT",
  "SENSITIVE",
  "SEPARATOR",
  "SET",
  "SHOW",
  "SMALLINT",
  "SPATIAL",
  "SPECIFIC",
  "SQL",
  "SQLEXCEPTION",
  "SQLSTATE",
  "SQLWARNING",
  "SQL_BIG_RESULT",
  "SQL_CALC_FOUND_ROWS",
  "SQL_SMALL_RESULT",
  "SSL",
  "STARTING",
  "STRAIGHT_JOIN",
  "TABLE",
  "TERMINATED",
  "THEN",
  "TINYBLOB",
  "TINYINT",
  "TINYTEXT",
  "TO",
  "TRAILING",
  "TRIGGER",
  "TRUE",
  "UNDO",
  "UNION",
  "UNIQUE",
  "UNLOCK",
  "UNSIGNED",
  "UPDATE",
  "USAGE",
  "USE",
  "USING",
  "UTC_DATE",
  "UTC_TIME",
  "UTC_TIMESTAMP",
  "VALUES",
  "VARBINARY",
  "VARCHAR",
  "VARCHARACTER",
  "VARYING",
  "WHEN",
  "WHERE",
  "WHILE",
  "WITH",
  "WRITE",
  "X509",
  "XOR",
  "YEAR_MONTH",
  "ZEROFILL"
], te = W({
  name: "DBAttributeTable",
  props: {
    actionButton: { type: Boolean, default: !0 }
  },
  emits: ["added", "removed", "inserted", "dragged", "syncDbType"],
  setup(e, { emit: t }) {
    const d = X(), T = b(!1), R = b([
      {
        title: "字段名称",
        key: "dbFieldName",
        width: 140,
        type: i.input,
        defaultValue: "",
        placeholder: "请输入${title}",
        validateRules: [
          { required: !0, message: "${title}不能为空" },
          {
            pattern: /^[a-zA-Z]{1}(?!_)[a-zA-Z0-9_\\$]+$/,
            message: "命名规则：只能由字母、数字、下划线、$符号组成；必须以字母开头；不能以单个字母加下滑线开头"
          },
          { unique: !0, message: "${title}不能重复" },
          {
            handler({ cellValue: a }, n) {
              ee.includes(a.toUpperCase()) ? n(!1, a + "是关键字，不能作为字段名称使用！") : n(!0);
            }
          },
          { handler: S }
        ],
        disabled: !e.actionButton
      },
      {
        title: "字段备注",
        key: "dbFieldTxt",
        width: 140,
        type: i.input,
        defaultValue: "",
        placeholder: "请输入${title}",
        validateRules: [{ required: !0, message: "${title}不能为空" }]
      },
      {
        title: "字段长度",
        key: "dbLength",
        width: 120,
        type: i.inputNumber,
        defaultValue: 32,
        placeholder: "请输入${title}",
        validateRules: [{ required: !0, message: "${title}不能为空" }],
        disabled: !e.actionButton
      },
      {
        title: "小数点",
        key: "dbPointLength",
        width: 100,
        type: i.inputNumber,
        defaultValue: 0,
        placeholder: "请输入${title}",
        validateRules: [{ required: !0, message: "${title}不能为空" }],
        disabled: !e.actionButton
      },
      {
        title: "默认值",
        key: "dbDefaultVal",
        width: 140,
        type: i.input,
        defaultValue: "",
        disabled: !e.actionButton
      },
      {
        title: "字段类型",
        key: "dbType",
        width: 140,
        type: i.select,
        options: [
          { title: "String", value: "string" },
          { title: "Integer", value: "int" },
          { title: "Double", value: "double" },
          { title: "Date", value: "Date" },
          { title: "Datetime", value: "Datetime" },
          { title: "BigDecimal", value: "BigDecimal" },
          { title: "Text", value: "Text" },
          { title: "Blob", value: "Blob" }
        ],
        defaultValue: "string",
        placeholder: "请选择${title}",
        disabled: !e.actionButton,
        validateRules: [{ required: !0, message: "请选择${title}" }]
      },
      {
        title: "主键",
        key: "dbIsKey",
        width: 80,
        type: i.checkbox,
        align: "center",
        customValue: ["1", "0"],
        defaultChecked: !1,
        disabled: !e.actionButton
      },
      {
        title: "允许空值",
        key: "dbIsNull",
        width: 80,
        type: i.checkbox,
        customValue: ["1", "0"],
        defaultChecked: !0,
        disabled: !e.actionButton
      },
      {
        title: "同步数据库",
        key: "dbIsPersist",
        minWidth: 80,
        type: i.checkbox,
        customValue: ["1", "0"],
        defaultChecked: !0,
        disabled: !e.actionButton
      },
      { title: "orderNum", key: "orderNum", type: i.hidden }
    ]);
    let u = [];
    const r = z(R), { tableRef: N, loading: s, dataSource: m, tableHeight: f, tableProps: g, setDataSource: h, validateData: U } = r;
    function p() {
      t("added", d);
    }
    function B(a) {
      u = u.concat(a.deleteRows.map((n) => n.id)), t("removed", O(L({}, a), { removeIds: u, target: d }));
    }
    function M(a) {
      t("dragged", {
        oldIndex: a.oldIndex,
        newIndex: a.newIndex,
        target: d
      });
    }
    function y(a) {
      t("inserted", O(L({}, a), { target: d }));
    }
    function v() {
      return u;
    }
    function F(a) {
      let { type: n, row: l, col: I, value: E, target: o } = a;
      n === i.select && I.key === "dbType" && ((E === "Date" || E === "Datetime") && t("syncDbType", { row: l, value: E, target: d }), E === "Blob" || E === "Text" || E === "Date" ? o.setValues([{ rowKey: l.id, values: { dbLength: "0" } }]) : E === "int" || E === "double" || E === "BigDecimal" ? o.setValues([{ rowKey: l.id, values: { dbLength: "10" } }]) : l.dbLength === "0" && o.setValues([{ rowKey: l.id, values: { dbLength: "32" } }]));
    }
    function _(a, n, l) {
      return a === "has_child" || a === "id" && l === 0;
    }
    function V(a) {
      N.value.pushRows(a), T.value || t("added", d);
    }
    function H(a) {
      return N.value.removeRowsById(a);
    }
    function G() {
      T.value = !0, s.value = !0;
    }
    function P() {
      T.value = !1, s.value = !1, t("added", d);
    }
    function S({ cellValue: a, row: n }, l) {
      const { tables: I } = r;
      if (I) {
        let o = I.dbTable.value.tableRef.dataSource.filter((A) => A.id === n.id);
        (!o || o.length <= 0) && l(!0);
        let C = o[0].dbFieldName;
        C == a && l(!0);
        let w = I.idxTable.value.tableRef.getTableData();
        for (let A of w)
          A.indexField.split(",").indexOf(C) >= 0 && l(!1, "当前字段存在索引配置，请先删除索引再修改字段");
      }
      l(!0);
    }
    return {
      tableRef: N,
      loading: s,
      columns: R,
      dataSource: m,
      setDataSource: h,
      addBatchBegin: G,
      addBatchEnd: P,
      tableAddLine: V,
      tableHeight: f,
      tableProps: g,
      tableDeleteLines: H,
      handleAdded: p,
      handleRemoved: B,
      handleDragged: M,
      handleInserted: y,
      handleValueChange: F,
      handleDisabledDbFieldName: _,
      validateData: U,
      getRemoveIds: v,
      validateExistIndex: S
    };
  }
});
function ae(e, t, d, T, R, u) {
  const r = Q("JVxeTable");
  return q(), J(r, Z({
    ref: "tableRef",
    rowNumber: "",
    rowSelection: "",
    dragSort: "",
    keyboardEdit: "",
    sortKey: "orderNum",
    addButtonSettings: "",
    loading: e.loading,
    columns: e.columns,
    dataSource: e.dataSource,
    toolbar: e.actionButton,
    maxHeight: e.tableHeight.normal,
    disabledRows: { dbFieldName: e.handleDisabledDbFieldName }
  }, e.tableProps, {
    onAdded: e.handleAdded,
    onRemoved: e.handleRemoved,
    onDragged: e.handleDragged,
    onInserted: e.handleInserted,
    onValueChange: e.handleValueChange
  }), null, 16, ["loading", "columns", "dataSource", "toolbar", "maxHeight", "disabledRows", "onAdded", "onRemoved", "onDragged", "onInserted", "onValueChange"]);
}
const Oe = /* @__PURE__ */ j(te, [["render", ae]]);
export {
  Oe as default
};
