var ge = Object.defineProperty, ye = Object.defineProperties;
var Te = Object.getOwnPropertyDescriptors;
var D = Object.getOwnPropertySymbols;
var we = Object.prototype.hasOwnProperty, Se = Object.prototype.propertyIsEnumerable;
var U = (t, o, a) => o in t ? ge(t, o, { enumerable: !0, configurable: !0, writable: !0, value: a }) : t[o] = a, S = (t, o) => {
  for (var a in o || (o = {}))
    we.call(o, a) && U(t, a, o[a]);
  if (D)
    for (var a of D(o))
      Se.call(o, a) && U(t, a, o[a]);
  return t;
}, C = (t, o) => ye(t, Te(o));
var g = (t, o, a) => new Promise((m, p) => {
  var d = (l) => {
    try {
      u(a.next(l));
    } catch (s) {
      p(s);
    }
  }, i = (l) => {
    try {
      u(a.throw(l));
    } catch (s) {
      p(s);
    }
  }, u = (l) => l.done ? m(l.value) : Promise.resolve(l.value).then(d, i);
  u((a = a.apply(t, o)).next());
});
import { unref as Ce, isRef as Me, watch as Le, ref as k, h as y } from "vue";
import { useRouter as ke } from "vue-router";
import { RadioGroup as ve, Radio as B, Input as _e } from "ant-design-vue";
import { useModal as f } from "/@/components/Modal";
import { useDrawer as xe } from "/@/components/Drawer";
import { useListPage as De } from "/@/hooks/system/useListPage";
import { l as Ue, d as Be, a as $e, b as Ne, c as Pe, e as Re, f as Ee, g as Oe } from "./CgformModal-eccfc38e.mjs";
import $ from "clipboard";
import { useMessage as Ie } from "/@/hooks/web/useMessage";
import { buildUUID as Ae } from "/@/utils/uuid";
import { isArray as Ye } from "/@/utils/is";
import { u as qe } from "./cgformState-d9f8ec42.mjs";
var P = /* @__PURE__ */ ((t) => (t[t.normal = 0] = "normal", t[t.copy = 1] = "copy", t))(P || {});
const v = "copy-this-text", N = "data-clipboard-text";
function Je() {
  return { createCopyModal: je };
}
const { createMessage: M, createConfirm: Ge } = Ie();
function je(t) {
  var p, d, i, u, l;
  const o = Ce(t.copyText), a = `INSERT INTO sys_permission(id, parent_id, name, url, component, component_name, redirect, menu_type, perms, perms_type, sort_no, always_show, icon, is_route, is_leaf, keep_alive, hidden, hide_tab, description, status, del_flag, rule_flag, create_by, create_time, update_by, update_time, internal_or_external) 
                       VALUES ('${Ae()}', NULL, '${t.copyTitle}', '${o}', '1', NULL, NULL, 0, NULL, '1', 0.00, 0, NULL, 0, 1, 0, 0, 0, NULL, '1', 0, 0, 'admin', null, NULL, NULL, 0)`;
  let m = Ge(C(S({}, t), {
    iconType: (p = t.iconType) != null ? p : "info",
    width: (d = t.width) != null ? d : 500,
    title: (i = t.title) != null ? i : "复制",
    closable: !0,
    maskClosable: (u = t.maskClosable) != null ? u : !0,
    cancelText: "复制SQL",
    okText: (l = t.okText) != null ? l : "复制URL",
    cancelButtonProps: {
      class: "copy-this-sql",
      "data-clipboard-text": a
    },
    okButtonProps: C(S({}, t.okButtonProps), {
      class: v,
      [N]: o
    }),
    onOk() {
      return new Promise((s) => {
        const r = new $("." + v);
        r.on("success", () => {
          r.destroy(), M.success("复制URL成功"), s();
        }), r.on("error", () => {
          M.error("该浏览器不支持自动复制"), r.destroy(), s();
        });
      });
    },
    onCancel() {
      return new Promise((s) => {
        const r = new $(".copy-this-sql");
        r.on("success", () => {
          r.destroy(), M.success("复制插入菜单SQL成功"), s();
        }), r.on("error", () => {
          M.error("该浏览器不支持自动复制"), r.destroy(), s();
        });
      });
    }
  }));
  return Me(t.copyText) && Le(t.copyText, (s) => {
    m.update({
      okButtonProps: C(S({}, t.okButtonProps), {
        class: v,
        [N]: s
      })
    });
  }), m;
}
function at(t) {
  const o = t.pageType === P.normal, a = ke(), m = qe(), p = De({
    designScope: t.designScope,
    tableProps: {
      api: Ue,
      columns: t.columns,
      formConfig: {
        //labelWidth: 200,
        schemas: t.formSchemas
      },
      beforeFetch: (e) => {
        let n = o ? 0 : 1, c = o ? void 0 : a.currentRoute.value.params.code;
        return Ye(e.tableType_MultiString) && (e.tableType_MultiString = e.tableType_MultiString.join(",")), Object.assign(e, { copyType: n, physicId: c });
      }
    }
  }), { tableContext: d, createMessage: i, createConfirm: u } = p, [, { reload: l, setLoading: s }, { selectedRowKeys: r, selectedRows: h }] = d, [R, _] = f(), [E, O] = f(), [I, A] = f(), [Y, q] = f(), [J, G] = f(), [j, F] = f(), [Q, V] = f(), [K, X] = xe(), [z, H] = f();
  function W() {
    _.openModal(!0, { isUpdate: !1 });
  }
  let b = null;
  function Z(e) {
    b = e, _.openModal(!0, { isUpdate: !0, record: e });
  }
  function ee() {
    b != null && b.id && (m.addChangedTable(b.id), b = null), l();
  }
  function te(e) {
    return g(this, null, function* () {
      yield $e(e), l();
    });
  }
  function ne(e) {
    return g(this, null, function* () {
      yield Ne(e), l();
    });
  }
  function oe() {
    let e = r.value;
    if (e.length <= 0) {
      i.warning("请先选择一条记录！");
      return;
    }
    u({
      title: "删除",
      content: "<p>移除只会删除表单配置；<br>删除则会删除对应的数据库表以及子表且不能恢复。<br>请确认您的操作…</p>",
      iconType: "warning",
      closable: !0,
      okText: "移除",
      cancelText: "删除",
      cancelButtonProps: { danger: !0 },
      onOk: () => g(this, null, function* () {
        return x(Pe, e, !0);
      }),
      onCancel(n) {
        return n != null && n.triggerCancel ? Promise.resolve() : x(Re, e, !0);
      }
    });
  }
  function x(e, n, c = !1) {
    return g(this, null, function* () {
      try {
        s(!0);
        const L = yield e(n);
        return l(), c && (r.value = []), L;
      } finally {
        s(!1);
      }
      return Promise.reject();
    });
  }
  function ae() {
    T(([e]) => q.openModal(!0, { row: e }));
  }
  function le() {
    T(([e]) => G.openModal(!0, { row: e }));
  }
  function ie() {
    T(([e]) => F.openModal(!0, { row: e }));
  }
  function se() {
    T(([e]) => V.openModal(!0, { row: e }));
  }
  function re() {
    O.openModal(!0, {});
  }
  function T(e, n = 1, c = 1) {
    h.value.length < n ? i.warning(`请先至少选中 ${n} 条记录`) : h.value.length > c ? i.warning(`最多只能选中 ${n} 条记录`) : e(h.value);
  }
  function ce() {
    if (h.value.length === 0)
      i.warning("请先选中一条记录");
    else if (h.value.length > 1)
      i.warning("代码生成只能选中一条记录");
    else {
      let e = h.value[0];
      e ? e.isDbSynch != "Y" ? i.warning("请先同步数据库！") : e.tableType == 3 ? i.warning("请选中该表对应的主表") : A.openModal(!0, { code: e.id }) : i.warning("请选中当前页的数据！");
    }
  }
  function ue(e) {
    if (e.isTree == "Y")
      a.push({ path: "/online/cgformTreeList/" + e.id });
    else
      switch (e.themeTemplate) {
        case "erp":
          a.push({ path: "/online/cgformErpList/" + e.id });
          break;
        case "tab":
          a.push({ path: "/online/cgformTabList/" + e.id });
          break;
        case "innerTable":
          a.push({ path: "/online/cgformInnerTableList/" + e.id });
          break;
        default:
          a.push({ path: "/online/cgformList/" + e.id });
          break;
      }
  }
  function pe(e) {
    const n = k("normal"), c = k(!1), L = u({
      iconType: "info",
      title: "同步数据库",
      content: () => y(
        "div",
        {
          style: "margin: 20px 0;"
        },
        y(
          ve,
          {
            value: n.value,
            disabled: c.value,
            "onUpdate:value": (w) => n.value = w
          },
          () => [y(B, { value: "normal" }, () => "普通同步（保留表数据）"), y(B, { value: "force" }, () => "强制同步（删除表，重新生成）")]
        )
      ),
      maskClosable: !0,
      okText: "开始同步",
      onOk() {
        return g(this, null, function* () {
          c.value = !0, L.update({
            maskClosable: !1,
            keyboard: !1,
            okText: "同步中…",
            okButtonProps: { loading: c.value },
            cancelButtonProps: { disabled: c.value }
          });
          try {
            yield Ee(e.id, n.value);
          } catch (w) {
            i.warn(w.message || w);
          } finally {
            l();
          }
        });
      }
    });
  }
  const { createCopyModal: fe } = Je();
  function me(e) {
    let n;
    e.themeTemplate === "erp" ? n = `/online/cgformErpList/${e.id}` : e.themeTemplate === "innerTable" ? n = `/online/cgformInnerTableList/${e.id}` : e.themeTemplate === "tab" ? n = `/online/cgformTabList/${e.id}` : e.isTree == "Y" ? n = `/online/cgformTreeList/${e.id}` : n = `/online/cgformList/${e.id}`, fe({
      title: `菜单链接【${e.tableTxt}】`,
      content: n,
      copyText: n,
      copyTitle: `${e.tableTxt}`
    });
  }
  function de(e) {
    const n = k(e.tableName + "_copy");
    u({
      title: "复制表",
      content: () => y(
        "div",
        {
          style: "margin: 20px 0;"
        },
        [
          "请输入新表名：",
          y(_e, {
            value: n.value,
            "onUpdate:value": (c) => n.value = c
          })
        ]
      ),
      iconType: "info",
      closable: !0,
      okText: "复制",
      onOk() {
        n.value ? n.value === e.tableName ? i.warning("新表名和旧表名不能一致") : Oe(e.id, n.value).then(l) : i.warning("请输入新表名");
      }
    });
  }
  function he(e) {
    return [
      {
        label: "编辑",
        onClick: () => Z(e)
      }
    ];
  }
  function be(e) {
    return [
      {
        label: "同步数据库",
        onClick: () => pe(e),
        ifShow: () => o && e.isDbSynch != "Y"
      },
      {
        // TODO 功能测试
        label: "功能测试",
        class: ["low-app-hide"],
        onClick: () => ue(e),
        ifShow: () => o ? e.isDbSynch == "Y" && e.tableType !== 3 : !0
      },
      {
        label: "配置地址",
        class: ["low-app-hide"],
        onClick: () => me(e),
        ifShow: () => o ? e.isDbSynch == "Y" && e.tableType !== 3 : !0
      },
      {
        label: "权限控制",
        onClick: () => X.openDrawer(!0, { cgformId: e.id })
      },
      {
        label: "角色授权",
        onClick: () => H.openModal(!0, { cgformId: e.id })
      },
      {
        label: "视图管理",
        class: ["low-app-hide"],
        onClick: () => a.push(`/online/copyform/${e.id}`),
        ifShow: () => o && e.hascopy == 1
      },
      {
        label: "生成视图",
        class: ["low-app-hide"],
        popConfirm: {
          title: "确定生成视图吗？",
          placement: "left",
          confirm: () => {
            s(!0), Be(e.id).then(() => {
              i.success("已成功生成视图");
            }).finally(() => {
              s(!1), l();
            });
          }
        },
        ifShow: () => o
      },
      {
        label: "复制表",
        onClick: () => de(e),
        ifShow: () => o
      },
      {
        label: "移除",
        popConfirm: {
          title: "确定移除吗？",
          placement: "left",
          confirm: () => ne(e.id)
        }
      },
      {
        label: "删除",
        popConfirm: {
          title: "确定删除吗？",
          placement: "left",
          confirm: () => te(e.id)
        },
        ifShow: () => o
      }
    ];
  }
  return {
    router: a,
    pageContext: p,
    onAdd: W,
    onSuccess: ee,
    onDeleteBatch: oe,
    onImportDbTable: re,
    onGenerateCode: ce,
    onShowCustomButton: ae,
    onShowEnhanceJs: le,
    onShowEnhanceSql: ie,
    onShowEnhanceJava: se,
    getTableAction: he,
    getDropDownAction: be,
    registerCustomButtonModal: Y,
    registerEnhanceJsModal: J,
    registerEnhanceSqlModal: j,
    registerEnhanceJavaModal: Q,
    registerAuthManagerDrawer: K,
    registerAuthSetterModal: z,
    registerCgformModal: R,
    registerDbToOnlineModal: E,
    registerCodeGeneratorModal: I
  };
}
export {
  P as C,
  at as u
};
