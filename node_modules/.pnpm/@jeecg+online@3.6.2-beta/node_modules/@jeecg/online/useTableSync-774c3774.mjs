var p = (f, v, e) => new Promise((o, u) => {
  var n = (t) => {
    try {
      r(e.next(t));
    } catch (b) {
      u(b);
    }
  }, m = (t) => {
    try {
      r(e.throw(t));
    } catch (b) {
      u(b);
    }
  }, r = (t) => t.done ? o(t.value) : Promise.resolve(t.value).then(n, m);
  r((e = e.apply(f, v)).next());
});
import { inject as h, ref as y, computed as g, nextTick as w } from "vue";
import { V as N } from "./cgform.data-cbdd88c3.mjs";
import { pick as A } from "lodash-es";
function L(f) {
  const v = h("tables"), e = h("fullScreenRef"), o = y(), u = y(!1), n = y([]), m = g(() => ({
    // 正常表格高度
    normal: e != null && e.value ? 430 : 260,
    // 没有 toolbar 的表格高度
    noToolbar: e != null && e.value ? 480 : 320
  })), r = g(() => ["id"].concat(f.value.map((l) => l.key))), t = g(() => ({
    // 针对Online表单对虚拟滚动做出优化
    // 虚拟滚动配置，y轴（行数）大于xx条数据时启用虚拟滚动
    // update-begin--author:liaozhiyang---date:20231025---for：【QQYUN-6808】online编辑字段多了卡顿
    scrollY: {
      enabled: !0,
      gt: 15
    },
    // 列数
    scrollX: {
      enabled: !0,
      gt: 20
    }
    // update-begin--author:liaozhiyang---date:20231025---for：【QQYUN-6808】online编辑字段多了卡顿
  }));
  function b(l) {
    return p(this, null, function* () {
      let a = o.value;
      if (yield a.fullValidateTable())
        throw { code: N, activeKey: l };
      let T = a.getTableData().map((c) => A(c, r.value)), D = a.getDeleteData().map((c) => c.id);
      return { tableData: T, deleteIds: D };
    });
  }
  function k(l, a = !1) {
    return p(this, null, function* () {
      a ? (n.value = [], yield w(), yield o.value.addOrInsert(l, 0, null, { setActive: !1 }), yield w(), o.value.recalcDisableRows()) : n.value = l;
    });
  }
  function E(l) {
    let a = o.value, x = l.value.tableRef, T = l.value.getRemoveIds(), D = x.getXTable().internalData.tableFullData, c = a.getXTable().internalData.tableFullData;
    return D.forEach((s) => {
      let F = !1;
      if (c.forEach((d) => {
        if (s.id === d.id) {
          let i = d.dbFieldName, I = d.dbFieldTxt;
          (s.dbFieldName !== i || s.dbFieldTxt !== I) && a.setValues([
            {
              rowKey: d.id,
              values: {
                dbFieldName: s.dbFieldName,
                dbFieldTxt: s.dbFieldTxt
              }
            }
          ]), F = !0;
        } else
          T.forEach((i) => {
            i === d.id && (a.removeRowsById(i), F = !0);
          });
      }), !F) {
        let d = Object.assign({}, s);
        f.value.forEach((i) => {
          i.key !== "dbFieldName" && i.key !== "dbFieldTxt" && (d[i.key] = i.defaultValue);
        }), a.addRows(d);
      }
    }), w();
  }
  return { tables: v, tableRef: o, loading: u, dataSource: n, columnKeys: r, tableHeight: m, tableProps: t, syncTable: E, validateData: b, setDataSource: k };
}
export {
  L as u
};
