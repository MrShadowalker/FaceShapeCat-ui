var De = Object.defineProperty, Ee = Object.defineProperties;
var Pe = Object.getOwnPropertyDescriptors;
var ge = Object.getOwnPropertySymbols;
var Te = Object.prototype.hasOwnProperty, Oe = Object.prototype.propertyIsEnumerable;
var he = (i, c, o) => c in i ? De(i, c, { enumerable: !0, configurable: !0, writable: !0, value: o }) : i[c] = o, k = (i, c) => {
  for (var o in c || (c = {}))
    Te.call(c, o) && he(i, o, c[o]);
  if (ge)
    for (var o of ge(c))
      Oe.call(c, o) && he(i, o, c[o]);
  return i;
}, G = (i, c) => Ee(i, Pe(c));
var $ = (i, c, o) => new Promise((O, S) => {
  var w = (g) => {
    try {
      y(o.next(g));
    } catch (v) {
      S(v);
    }
  }, f = (g) => {
    try {
      y(o.throw(g));
    } catch (v) {
      S(v);
    }
  }, y = (g) => g.done ? O(g.value) : Promise.resolve(g.value).then(w, f);
  y((o = o.apply(i, c)).next());
});
import { E as W, p as Re } from "./useExtendComponent-325fe3f1.mjs";
import { useRoute as ke } from "vue-router";
import { router as Me } from "/@/router";
import { ref as b, provide as Fe, onBeforeUnmount as Be, toRaw as M, nextTick as ye, reactive as pe } from "vue";
import { defHttp as T } from "/@/utils/http/axios";
import { useMessage as we } from "/@/hooks/web/useMessage";
import { filterObj as ve } from "/@/utils/common/compUtils";
import { u as Ce, G as Ie } from "./useCustomHook-acb00837.mjs";
import { onMountedOrActivated as Ne } from "/@/hooks/core/onMountedOrActivated";
import { useModal as j } from "/@/components/Modal";
import { E as de, a as Ue } from "./constant-754f1a9d.mjs";
import { useMultipleTabStore as _e } from "/@/store/modules/multipleTab";
import { u as $e } from "./cgformState-d9f8ec42.mjs";
import { pick as Qe } from "lodash-es";
import { Modal as je } from "ant-design-vue";
import { useMethods as Ve } from "/@/hooks/system/useMethods";
import { getToken as Ke } from "/@/utils/auth";
import { goJmReportViewPage as Le } from "/@/utils";
const He = {
  acceptHrefParams: "<p> 跳转时获取的参数信息",
  currentPage: "<p> 当前页数",
  currentTableName: "<p> 当前表名",
  description: "<p> 当前表描述",
  hasChildrenField: "<p> 是否有子节点的字段名，仅树形表单下有效",
  isDesForm: "<p> xx",
  isTree: "<m> 是否是树形表单 ",
  loadData: "<m> 加载列表数据",
  pageSize: "<p> 每一页显示条数",
  queryParam: "<p> 查询条件对象，每次点击查询后才会更新此数据",
  selectedRowKeys: "<p> 选中的行的id数组",
  sortField: "<p> 排序字段",
  sortType: "<p> 排序规则",
  total: "<p> 总页数",
  foreignKeyValue: "<p> Erp一对多子表外键选中对应主表字段的值",
  isErpSubTable: "<p> 是否Erp一对多子表",
  foreignKeyField: "<p> Erp一对多子表外键字段",
  themeTemplate: "<p> 主题模板",
  isInnerSubTable: "<p> 是否内嵌一对多子表",
  innerSubTableName: "<p> 内嵌一对多子表名",
  mTableSelectedRcordId: "<p>内嵌主表展开行的id"
}, Je = {
  getColumns: "/online/cgform/api/getColumns/",
  getQueryInfo: "/online/cgform/api/getQueryInfo/",
  getData: "/online/cgform/api/getData/",
  getTreeData: "/online/cgform/api/getTreeData/",
  optPre: "/online/cgform/api/form/",
  buttonAction: "/online/cgform/api/doButton",
  exportXls: "/online/cgform/api/exportXlsOld/",
  importXls: "/online/cgform/api/importXls/",
  startProcess: "/act/process/extActProcess/startMutilProcess",
  getErpColumns: "/online/cgform/api/getErpColumns/",
  // 内嵌主题一对多子表数据请求接口
  list: "/online/cgform/api/subform/list/"
};
let be = {
  sortField: "id",
  sortType: "asc",
  currentPage: 1,
  pageSize: 10,
  total: 0,
  selectedRowKeys: [],
  queryParam: {},
  acceptHrefParams: {},
  description: "",
  currentTableName: "",
  isDesForm: !1,
  desFormCode: "",
  cache: !1,
  isTree: !1,
  hasChildrenField: ""
};
const Ae = {
  current: 1,
  pageSize: 10,
  pageSizeOptions: ["10", "20", "30"],
  showTotal: (i, c) => c[0] + "-" + c[1] + " 共" + i + "条",
  showQuickJumper: !0,
  showSizeChanger: !0,
  total: 0
}, { createMessage: Q, createErrorModal: ze } = we();
function pt(i = {}) {
  var q;
  const c = (q = i.code) != null ? q : "", o = b(c);
  Fe("tableId", o);
  const O = ke(), S = b(), w = b(), f = b(!1), y = b([]), g = b(!0), v = b(), Y = $e();
  _e();
  let E = {};
  const m = {
    execButtonEnhance: function(r, e) {
      if (l[W][r])
        if (Re === r)
          h(r);
        else {
          let t = M(e);
          return l[W][r].call(l, l, t);
        }
      else if (l[W][r + "_hook"])
        if (e) {
          let t = M(e);
          h(r + "_hook", t);
        } else
          h(r + "_hook");
    },
    /**
     * get 是否是树形表单
     * @param status 如果有值 则视为set方法
     */
    isTree: function(r) {
      return typeof r == "boolean" ? (l.isTreeTable = r, r) : l.isTreeTable;
    }
  };
  function h(r, e) {
    let a = l[W][r].toLocaleString().match(Ie);
    if (a.length > 1) {
      let n = a[1];
      F(n, e);
    }
  }
  const l = new Proxy(He, {
    get(r, e) {
      if (typeof m[e] == "function")
        return m[e];
      {
        let t = E[o.value];
        return Reflect.get(t, e);
      }
    },
    set(r, e, t) {
      let a = Z();
      return Reflect.set(typeof t == "function" ? m : a, e, t);
    },
    deleteProperty(r, e) {
      return e === o.value ? (delete E[e], !0) : !1;
    }
  }), { executeJsEnhanced: F } = Ce({}, l);
  function x() {
    let r = O.params.id;
    return r || (r = ""), r;
  }
  Ne(() => {
    !c && z(), o.value && Y.removeChangedTable(o.value);
  }), Be(() => {
    delete E[o.value];
  });
  function Z() {
    let r = E[o.value];
    if (!r) {
      i.themeTemplate == de && (be.pageSize = 5);
      let e = Object.assign({}, be, { onlineUrl: Je });
      r = JSON.parse(JSON.stringify(e)), E[o.value] = r;
    }
    return r;
  }
  function ee() {
    let r = {}, e = O.query;
    e && (Object.keys(e).map((t) => {
      r[t] = e[t];
    }), l.acceptHrefParams = r);
  }
  function V(r = "") {
    let e;
    return r == de ? e = `${l.onlineUrl.getErpColumns}${o.value}` : e = `${l.onlineUrl.getColumns}${o.value}`, new Promise((t, a) => {
      T.get(
        {
          url: e
        },
        { isTransformResponse: !1 }
      ).then((n) => {
        n.success ? t(n.result) : (Q.warning(n.message), a());
      }).catch(() => {
        a();
      });
    });
  }
  function P() {
    return new Promise((r, e) => {
      let t = K(), a = `${l.onlineUrl.getData}${o.value}`;
      l.isTree() === !0 ? a = `${l.onlineUrl.getTreeData}${o.value}` : l.isInnerSubTable === !0 && (a = `${l.onlineUrl.list}${l.innerSubTableName}/${l.mTableSelectedRcordId}`, t = { tabletype: 3 }), l.isErpSubTable === !0 && (t[l.foreignKeyField] = l.foreignKeyValue, delete t.hasQuery), T.get({ url: a, params: t }, { isTransformResponse: !1 }).then((n) => {
        n.success ? (l.isInnerSubTable === !0 ? L({ records: n.result, total: n.result.length }) : L(n.result), r(!0)) : (n.message === "NO_DB_SYNC" ? ze({
          title: "数据库未同步",
          content: "请先同步数据库再查看此页面！",
          // 点击确定后自动返回上一页
          onOk: () => Me.back()
        }) : Q.warning(n.message), e(!1));
      }).catch(() => {
        let n = "请求列表数据异常!";
        Q.warning(n), e(!1);
      });
    });
  }
  function K() {
    const { sortField: r, sortType: e, acceptHrefParams: t, queryParam: a } = l;
    let n = {};
    l.isTree(), n.hasQuery = "true";
    let s = Object.assign({}, n, t, a, { column: r, order: e });
    f.value ? (s.pageNo = f.value.current, s.pageSize = f.value.pageSize) : s.pageSize = -521;
    let u = A();
    return s.superQueryMatchType = u.matchType || "", s.superQueryParams = u.params || "", ve(s);
  }
  function L(r) {
    let e = 0;
    Number(r.total) > 0 ? (l.isTree() === !0 ? (y.value = I(r.records), ye(() => {
      ne(y.value);
    })) : y.value = r.records, e = Number(r.total)) : y.value = [], f.value && (f.value = G(k({}, f.value), { total: e }));
  }
  function H(r, e, t) {
    t && t.order ? (l.sortField = t.field, l.sortType = t.order == "ascend" ? "asc" : "desc") : (l.sortField = "id", l.sortType = "asc"), f.value && (f.value = r), P();
  }
  function te(r) {
    l.description = r.description, l.currentTableName = r.currentTableName, l.isDesForm = r.isDesForm, l.desFormCode = r.desFormCode, l.ID = o.value;
    let { acceptHrefParams: e, queryParam: t, superQuery: a, currentPage: n, pageSize: s } = l;
    ee(), t ? S.value && S.value.initDefaultValues(t, e) : l.queryParam = {}, a ? w.value && w.value.initDefaultValues(a) : l.superQuery = { params: "", matchType: "" }, r.paginationFlag == "Y" ? f.value = G(k({}, Ae), { current: n, pageSize: s }) : f.value = !1;
  }
  function re() {
    return $(this, null, function* () {
      g.value = !0, yield ye(), g.value = !1;
    });
  }
  const B = {
    loadData: P,
    getLoadDataParams: K,
    reloadTable: re
  };
  Object.keys(B).map((r) => {
    l[r] = B[r];
  });
  let C = b(!1);
  function ae() {
    return $(this, arguments, function* (r = {}) {
      f.value && (f.value = G(k({}, f.value), { current: r.mode == "search" || !f.value.current ? 1 : f.value.current })), i.themeTemplate !== de && l.clearSelectedRow(), yield P();
    });
  }
  function I(r) {
    if (r)
      return r.map((e) => {
        let t = l.hasChildrenField;
        if (e[t] == "1") {
          let a = { id: e.id + "_loadChild", name: "loading...", isLoading: !0 };
          a.jeecg_row_key = a.id, e.children = [a];
        }
        return e;
      });
  }
  const R = b([]);
  function J(r) {
    R.value = r;
  }
  function ne(r) {
    let e = R.value;
    if (e.length > 0) {
      const { sortField: t, sortType: a, pidField: n } = l;
      let s = Object.assign({}, { column: t, order: a });
      s.hasQuery = "in";
      let u = Object.assign({});
      u.rule = "in", u.type = "text", u.val = e.join(","), u.field = n, u = [u], s.superQueryParams = encodeURI(JSON.stringify(u)), s.superQueryMatchType = "and", s.batchFlag = "true";
      let p = `${l.onlineUrl.getTreeData}${o.value}`;
      T.get({ url: p, params: s }, { isTransformResponse: !1 }).then((d) => {
        if (d.success && d.result.records && d.result.records.length > 0) {
          let ce = d.result.records;
          const U = /* @__PURE__ */ new Map();
          for (let _ of ce) {
            let D = _[n];
            if (e.join(",").includes(D)) {
              let X = U.get(D);
              X == null && (X = []), X.push(_), U.set(D, X);
            }
          }
          let fe = U, me = (_) => {
            _ && _.forEach((D) => {
              e.includes(D.id) && (D.children = I(fe.get(D.id)), me(D.children));
            });
          };
          me(r);
        }
      }).catch(() => {
        let d = "loadDataByExpandedRows请求列表数据异常!";
        Q.warning(d);
      });
    } else
      return Promise.resolve();
  }
  function A() {
    if (!l.superQuery)
      return {};
    const {
      superQuery: { params: r, matchType: e },
      currentTableName: t
    } = l;
    let a = t + "@", n = [];
    if (r.length > 0)
      for (let u of r) {
        let p = k({}, u), d = p.field;
        d.startsWith(a) && (p.field = d.replace(a, "")), n.push(p);
      }
    let s = n.length > 0 ? JSON.stringify(n) : "";
    return {
      params: encodeURIComponent(s),
      matchType: e
    };
  }
  const N = b(!1);
  function le(r, e) {
    l.superQuery = {
      params: r,
      matchType: e
    }, r.length == 0 || r.length == null ? N.value = !1 : N.value = !0, f.value.current = 1, P();
  }
  const [ie, { openModal: se }] = j();
  function oe(r) {
    if (r || (r = {}), !r.row) {
      let e = l.selectedRows;
      if (!e || e.length == 0 || e.length > 1) {
        Q.warning("请选择一条数据");
        return;
      }
      r.row = e[0];
    }
    r.code = o.value, se(!0, r);
  }
  l.openCustomModal = oe;
  function z() {
    let r = x();
    o.value = r;
  }
  !c && !o.value && z();
  function ue(r) {
    let e = r.head.extConfigJson;
    e && (v.value = JSON.parse(e));
  }
  return k({
    ID: o,
    onlineQueryFormOuter: S,
    superQueryButtonRef: w,
    loading: C,
    reload: ae,
    dataSource: y,
    pagination: f,
    tableReloading: g,
    handleSpecialConfig: te,
    onlineTableContext: l,
    handleChangeInTable: H,
    getColumnList: V,
    getTreeDataByResult: I,
    expandedRowKeys: R,
    handleExpandedRowsChange: J,
    onlineExtConfigJson: v,
    handleFormConfig: ue,
    superQueryStatus: N,
    handleSuperQuery: le,
    registerCustomModal: ie
  }, B);
}
const Se = "onl_";
function dt(i, c, o = {}) {
  const O = {
    add: !0,
    addSub: !0,
    update: !0,
    delete: !0,
    batch_delete: !0,
    import: !0,
    export: !0,
    detail: !0,
    super_query: !0,
    bpm: !0
  }, [S, { openModal: w }] = j(), [f, { openModal: y }] = j(), [g, { openModal: v }] = j(), [Y, { openModal: E }] = j(), { createMessage: m } = we(), h = pe(O), l = pe([]), F = pe([]);
  function x(e) {
    if (l.length = 0, F.length = 0, e && e.length > 0)
      for (let t = 0; t < e.length; t++) {
        let a = Qe(e[t], "buttonCode", "buttonName", "buttonStyle", "optType", "exp", "buttonIcon");
        a.buttonStyle == "button" ? F.push(a) : a.buttonStyle == "link" && l.push(a);
      }
  }
  function Z(e) {
    Object.keys(h).forEach((t) => {
      h[t] = !0;
    }), e && e.length > 0 && Object.keys(h).forEach((t) => {
      e.indexOf(t) >= 0 && (h[t] = !1);
    });
  }
  function ee(e) {
    let t = { isUpdate: !1 };
    e && (t.param = e), w(!0, t);
  }
  function V(e) {
    i.beforeEdit(e).then(() => {
      w(!0, {
        isUpdate: !0,
        record: e
      });
    }).catch((t) => {
      m.warning(t);
    });
  }
  const P = (e) => ({
    label: "删除",
    popConfirm: {
      title: "是否删除？",
      confirm: K.bind(null, e)
    }
  });
  function K(e) {
    i.beforeDelete(e).then(() => {
      J(e.id, !1);
    }).catch((t) => {
      m.warning(t);
    });
  }
  function L(e) {
    let t = C(e), a = t && (t == "1" || t == "3" || t == "4") || !t;
    return M(h.update) === !0 && a ? [
      {
        label: "编辑",
        onClick: (n) => {
          o.editClickCallback && o.editClickCallback(e.id, n), V(e);
        }
      }
    ] : [];
  }
  function H(e) {
    return {
      label: "提交流程",
      popConfirm: {
        title: "确认提交流程吗？",
        confirm: R.bind(null, e)
      }
    };
  }
  function te(e) {
    return {
      label: "审批进度",
      onClick: re.bind(null, e)
    };
  }
  function re(e) {
    const { currentTableName: t } = i;
    let a = Se + t, n = e.id;
    E(!0, {
      flowCode: a,
      dataId: n
    });
  }
  function B(e, t = {}) {
    let a = [];
    if (M(h.detail) === !0 && a.push({
      label: "详情",
      onClick: ae.bind(null, e)
    }), t.themeTemplate != Ue && i.hasBpmStatus === !0 && M(h.bpm) === !0) {
      let p = C(e);
      !p || p == "1" ? a.push(H(e)) : a.push(te(e));
    }
    if (c.value) {
      let { reportPrintShow: p, reportPrintUrl: d } = c.value;
      p && d && a.push({
        label: "打印",
        onClick() {
          let ce = d, U = e.id, fe = Ke();
          Le(ce, U, fe);
        }
      });
    }
    let n = C(e), s = n && n == "1" || !n;
    M(h.delete) === !0 && s && a.push(P(e));
    let u = l;
    if (u && u.length > 0)
      for (let p of u)
        q(p.exp || "", e) === !0 && a.push({
          label: p.buttonName,
          onClick: A.bind(null, e, p.buttonCode, p.optType)
        });
    return a;
  }
  function C(e) {
    const t = "bpm_status";
    let a = e[t];
    return a || (a = e[t.toUpperCase()]), a;
  }
  function ae(e) {
    v(!0, {
      isUpdate: !0,
      disableSubmit: !0,
      record: e
    });
  }
  function I(e) {
    const {
      currentTableName: t,
      onlineUrl: { startProcess: a }
    } = i;
    let n = {
      url: a,
      params: {
        flowCode: Se + t,
        id: e.id,
        // TODO 流程表单没有
        formUrl: "modules/bpm/task/form/OnlineFormDetail",
        formUrlMobile: "check/onlineForm/detail"
      }
    }, s = { isTransformResponse: !1 };
    return new Promise((u, p) => {
      T.post(n, s).then((d) => {
        d.success ? (u(d), m.success(d.message)) : (p(), m.warning(d.message));
      });
    });
  }
  function R(e) {
    return $(this, null, function* () {
      yield I(e), i.loadData();
    });
  }
  function J(e, t = !0) {
    let a = `${i.onlineUrl.optPre}${i.ID}/${e}`;
    return new Promise((n, s) => {
      T.delete(
        {
          url: a
        },
        { isTransformResponse: !1 }
      ).then((u) => {
        u.success ? (m.success(u.message), i.loadData(), t || o.singleDelCallback && o.singleDelCallback(e), n(!0)) : (m.warning(u.message), s());
      });
    });
  }
  function ne() {
    let e = i.selectedRowKeys;
    if (e.length <= 0)
      return m.warning("请选择一条记录！"), !1;
    {
      let t = [];
      e.forEach(function(n) {
        let s = n;
        s && s.endsWith("_loadChild") && (s = s.replace("_loadChild", "")), t.indexOf(s) < 0 && t.push(s);
      });
      let a = t.join(",");
      je.confirm({
        title: "确认删除",
        content: "是否删除选中数据",
        okText: "确认",
        cancelText: "取消",
        onOk: () => $(this, null, function* () {
          yield J(a), i.clearSelectedRow();
        })
      });
    }
  }
  function A(e, t, a) {
    if (a == "js")
      i.execButtonEnhance(t, e);
    else if (a == "action") {
      let n = {
        formId: i.ID,
        buttonCode: t,
        dataId: e.id
      }, s = `${i.onlineUrl.buttonAction}`;
      T.post(
        {
          url: s,
          params: n
        },
        { isTransformResponse: !1 }
      ).then((u) => {
        u.success ? (i.loadData(), m.success("处理完成!")) : m.warning(u.message);
      });
    }
  }
  function N(e) {
    i.execButtonEnhance(e);
  }
  function le(e) {
    let t = i.selectedRowKeys;
    if (!t || t.length == 0)
      return m.warning("请先选中一条记录"), !1;
    let a = t.join(","), n = {
      formId: i.ID,
      buttonCode: e,
      dataId: a
    }, s = `${i.onlineUrl.buttonAction}`;
    T.post(
      {
        url: s,
        params: n
      },
      { isTransformResponse: !1 }
    ).then((u) => {
      u.success ? (i.loadData(), i.clearSelectedRow(), m.success("处理完成!")) : m.warning(u.message);
    });
  }
  function ie() {
    y(!0);
  }
  const se = () => `${i.onlineUrl.importXls}${i.ID}`, { handleExportXlsx: oe } = Ve();
  function z() {
    let e = i.getLoadDataParams(), t = i.selectedRowKeys;
    t && t.length > 0 && (e.selections = t.join(",")), i.isErpSubTable === !0 && i.foreignKeyField && i.foreignKeyValue && (e[i.foreignKeyField] = i.foreignKeyValue);
    let a = JSON.stringify(ve(e)), n = `${i.onlineUrl.exportXls}${i.ID}`;
    const s = i.description;
    return oe(s, n, { paramsStr: a });
  }
  function ue(e, t) {
    const a = [];
    e.split("||").forEach((s) => {
      const u = [];
      s.trim().split("&&").forEach((p) => {
        u.push(r(p.trim(), t));
      }), a.push(u.join("&&"));
    });
    const n = a.join("||");
    return new Function(`return ${n}`)();
  }
  function q(e, t) {
    return !e || e == "" ? !0 : e.indexOf("||") == -1 && e.indexOf("&&") == -1 ? r(e, t) : ue(e, t);
  }
  function r(e, t) {
    if (!e || e == "")
      return !0;
    let a = e.split("#"), n = t[a[0]], s = a[1].toLowerCase();
    return s === "eq" ? n == a[2] : s === "ne" ? n != a[2] : s === "empty" ? a[2] === "true" ? !n || n == "" : n && n.length > 0 : s === "in" ? a[2].split(",").indexOf(String(n)) >= 0 : !1;
  }
  return {
    buttonSwitch: h,
    cgLinkButtonList: l,
    cgTopButtonList: F,
    importUrl: se,
    registerModal: S,
    handleAdd: ee,
    handleEdit: V,
    handleBatchDelete: ne,
    registerImportModal: f,
    onImportExcel: ie,
    onExportExcel: z,
    getDropDownActions: B,
    getActions: L,
    cgButtonJsHandler: N,
    cgButtonActionHandler: le,
    cgButtonLinkHandler: A,
    initButtonList: x,
    initButtonSwitch: Z,
    getDeleteButton: P,
    handleSubmitFlow: R,
    getSubmitFlowButton: H,
    registerDetailModal: g,
    registerBpmModal: Y
  };
}
export {
  dt as a,
  pt as u
};
