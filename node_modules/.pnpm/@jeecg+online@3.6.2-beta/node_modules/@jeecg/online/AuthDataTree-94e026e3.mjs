var f = (e, s, t) => new Promise((l, c) => {
  var i = (a) => {
    try {
      o(t.next(a));
    } catch (u) {
      c(u);
    }
  }, n = (a) => {
    try {
      o(t.throw(a));
    } catch (u) {
      c(u);
    }
  }, o = (a) => a.done ? l(a.value) : Promise.resolve(a.value).then(i, n);
  o((t = t.apply(e, s)).next());
});
import { defineComponent as A, ref as r, computed as B, watch as F, resolveComponent as y, openBlock as h, createElementBlock as _, createBlock as g, Fragment as N, createElementVNode as M, createVNode as v, withCtx as E, createTextVNode as D } from "vue";
import { useMessage as P } from "/@/hooks/web/useMessage";
import { o as S, l as R, p as V } from "./auth.api-d3a6c4b3.mjs";
import { _ as $ } from "./index-0e3ab3af.mjs";
import "/@/utils/http/axios";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "vue-router";
const z = A({
  name: "AuthDataTree",
  props: {
    cgformId: { type: String, required: !0 }
  },
  setup(e) {
    const { createMessage: s } = P(), t = r(""), l = r(3), c = r(!0), i = r([]), n = r([]), o = r([]), a = r(""), u = B(() => !t.value);
    F(() => e.cgformId, m, { immediate: !0 });
    function m() {
      return f(this, null, function* () {
        if (!e.cgformId)
          return;
        let d = yield S(e.cgformId, l.value);
        o.value = d.map((p) => ({ key: p.id, title: p.ruleName }));
      });
    }
    function k(d, p) {
      return f(this, null, function* () {
        t.value = d, a.value = p, n.value = [], yield m();
        let T = yield R({
          roleId: d,
          cgformId: e.cgformId,
          type: l.value,
          authMode: p
        });
        n.value = T.map((w) => w.authId);
      });
    }
    function I() {
      t.value = "", m();
    }
    function C() {
      m(), k(t.value, a.value);
    }
    function K() {
      return f(this, null, function* () {
        yield V(t.value, e.cgformId, {
          authId: JSON.stringify(n.value),
          authMode: a.value
        }), s.success("保存成功");
      });
    }
    function b(d) {
      i.value = d, c.value = !1;
    }
    function x() {
      t.value = "", n.value = [];
    }
    return {
      loadChecked: k,
      clear: x,
      expandedKeys: i,
      autoExpandParent: c,
      checkedKeys: n,
      treeData: o,
      disabled: u,
      onSave: K,
      onExpand: b,
      onRefresh: C,
      clearChecked: I
    };
  }
});
const q = { class: "onl-auth-tree-btns" };
function J(e, s, t, l, c, i) {
  const n = y("a-empty"), o = y("a-button"), a = y("a-tree");
  return h(), _("div", null, [
    e.disabled ? (h(), g(n, {
      key: 0,
      description: "请先选中左侧角色/部门/用户"
    })) : e.treeData.length === 0 ? (h(), g(n, {
      key: 1,
      description: "无权限信息"
    })) : (h(), _(N, { key: 2 }, [
      M("div", q, [
        v(o, {
          onClick: e.onRefresh,
          size: "small",
          type: "primary",
          preIcon: "ant-design:redo",
          ghost: ""
        }, {
          default: E(() => [
            D("刷新")
          ]),
          _: 1
        }, 8, ["onClick"]),
        v(o, {
          onClick: e.onSave,
          size: "small",
          type: "primary",
          preIcon: "ant-design:save",
          ghost: ""
        }, {
          default: E(() => [
            D("保存")
          ]),
          _: 1
        }, 8, ["onClick"])
      ]),
      v(a, {
        checkable: "",
        checkedKeys: e.checkedKeys,
        "onUpdate:checkedKeys": s[0] || (s[0] = (u) => e.checkedKeys = u),
        expandedKeys: e.expandedKeys,
        autoExpandParent: e.autoExpandParent,
        treeData: e.treeData,
        onExpand: e.onExpand
      }, null, 8, ["checkedKeys", "expandedKeys", "autoExpandParent", "treeData", "onExpand"])
    ], 64))
  ]);
}
const X = /* @__PURE__ */ $(z, [["render", J], ["__scopeId", "data-v-c6be2157"]]);
export {
  X as default
};
