var z = Object.defineProperty;
var j = Object.getOwnPropertySymbols;
var G = Object.prototype.hasOwnProperty, H = Object.prototype.propertyIsEnumerable;
var N = (e, l, i) => l in e ? z(e, l, { enumerable: !0, configurable: !0, writable: !0, value: i }) : e[l] = i, A = (e, l) => {
  for (var i in l || (l = {}))
    G.call(l, i) && N(e, i, l[i]);
  if (j)
    for (var i of j(l))
      H.call(l, i) && N(e, i, l[i]);
  return e;
};
import { defineComponent as Q, ref as M, watch as C, useCssVars as R, resolveComponent as o, openBlock as u, createBlock as n, normalizeClass as X, withCtx as b, createElementVNode as w, toDisplayString as K, createElementBlock as p, Fragment as m, createVNode as c, renderList as Z, createTextVNode as _, mergeProps as $, pushScopeId as x, popScopeId as ee } from "vue";
import { JDictSelectTag as le, JTreeSelect as te, JCategorySelect as ae, JSelectUser as ue, JSelectUserByDept as ne, JSelectDept as ie, JPopup as oe, JAreaLinkage as de, JAreaSelect as re, JSelectMultiple as se } from "/@/components/Form";
import pe from "./JOnlineSearchSelect-c287af12.mjs";
import { _ as me } from "./index-0e3ab3af.mjs";
import "@vueuse/core";
import "/@/utils/http/axios";
import "/@/hooks/web/useMessage";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "vue-router";
const O = Q({
  name: "OnlineSearchFormItem",
  components: {
    JOnlineSearchSelect: pe,
    JDictSelectTag: le,
    JTreeSelect: te,
    JCategorySelect: ae,
    JSelectUser: ue,
    JSelectUserByDept: ne,
    JSelectDept: ie,
    JPopup: oe,
    JAreaLinkage: de,
    JAreaSelect: re,
    JSelectMultiple: se
  },
  props: {
    value: {
      type: String,
      default: ""
    },
    item: {
      type: Object,
      default: () => {
      },
      required: !0
    },
    dictOptions: {
      type: Object,
      default: () => {
      },
      required: !1
    },
    onlineForm: {
      type: Object,
      default: () => {
      },
      required: !1
    }
  },
  emits: ["update:value", "change"],
  setup(e, { emit: l }) {
    const i = "120px", P = {
      style: {
        "max-width": i
      }
    }, I = "single";
    let y = M(""), s = M(""), f = M("");
    C(
      () => e.value,
      () => {
        F() ? y.value = e.value ? e.value : void 0 : y.value = e.value, e.value || (s.value = "", f.value = "");
      },
      { deep: !0, immediate: !0 }
    ), C(
      y,
      (a) => {
        l("update:value", a);
      },
      { immediate: !0 }
    ), C(s, (a) => {
      l("change", e.item.field + "_begin", a), l("update:value", "1");
    }), C(f, (a) => {
      l("change", e.item.field + "_end", a), l("update:value", "1");
    });
    function J(a) {
      return a.dbField ? a.dbField : a.field;
    }
    function F() {
      let a = e.item;
      return a ? a.view == "list" || a.view == "radio" || a.view == "switch" : !1;
    }
    function D() {
      let a = e.item;
      return a.dictTable && a.dictTable.length > 0 ? a.dictTable + "," + a.dictText + "," + a.dictCode : a.dictCode;
    }
    function k() {
      let a = e.item, { dictTable: t, dictCode: v, dictText: r } = a, g = t.toLowerCase().split("where"), d = "";
      return g.length > 1 && (d = " where" + g[1]), "select " + v + " as 'value', " + r + " as 'text' from " + g[0] + d;
    }
    function T(a) {
      let { dictText: t, dictCode: v } = a;
      if (!t || t.length == 0)
        return [];
      let r = t.split(","), h = v.split(","), g = [];
      for (let d = 0; d < r.length; d++)
        g.push({
          target: r[d],
          source: h[d]
        });
      return g;
    }
    function E(a) {
      let { dictText: t } = e.item, r = t.split(",")[0];
      l("change", r, a[r]);
    }
    function B(a) {
      l("update:value", a);
    }
    function S(a, t, v) {
      let r = {
        labelKey: t,
        rowKey: v
      }, h = a.fieldExtendJson;
      if (h && typeof h == "string") {
        let g = JSON.parse(h), d = A({}, g);
        d.text && (r.labelKey = d.text), d.store && (r.rowKey = d.store);
      }
      return r;
    }
    let U = S(e.item, "realname", "username"), Y = S(e.item, "departName", "id");
    function V(a) {
      a && a.length > 0 ? l("update:value", a.join(",")) : l("update:value", "");
    }
    return {
      getPopupFieldConfig: T,
      userSelectProp: U,
      depSelectProp: Y,
      handleSelectChange: V,
      setFieldsValue: E,
      innerValue: y,
      beginValue: s,
      endValue: f,
      isEasySelect: F,
      getDictOptionKey: J,
      getDictCode: D,
      labelTextMaxWidth: i,
      labelCol: P,
      single_mode: I,
      getSqlByDictCode: k,
      handleCategoryTreeChange: B
    };
  }
}), L = () => {
  R((e) => ({
    "6524b8a9": e.labelTextMaxWidth
  }));
}, W = O.setup;
O.setup = W ? (e, l) => (L(), W(e, l)) : L;
const ve = O;
const q = (e) => (x("data-v-e62a9629"), e = e(), ee(), e), ge = ["title"], fe = /* @__PURE__ */ q(() => /* @__PURE__ */ w("span", { class: "group-query-strig" }, "~", -1)), he = /* @__PURE__ */ q(() => /* @__PURE__ */ w("span", { class: "group-query-strig" }, "~", -1)), ce = /* @__PURE__ */ q(() => /* @__PURE__ */ w("span", { class: "group-query-strig" }, "~", -1));
function ye(e, l, i, P, I, y) {
  const s = o("a-date-picker"), f = o("JDictSelectTag"), J = o("a-select-option"), F = o("a-select"), D = o("JTreeSelect"), k = o("JCategorySelect"), T = o("JOnlineSearchSelect"), E = o("JSelectUser"), B = o("JSelectDept"), S = o("JPopup"), U = o("JAreaSelect"), Y = o("JSelectMultiple"), V = o("a-input"), a = o("a-form-item");
  return u(), n(a, {
    labelCol: e.labelCol,
    class: X("jeecg-online-search")
  }, {
    label: b(() => [
      w("span", {
        title: e.item.label,
        class: "label-text"
      }, K(e.item.label), 9, ge)
    ]),
    default: b(() => [
      e.item.view == "date" ? (u(), p(m, { key: 0 }, [
        e.single_mode === e.item.mode ? (u(), n(s, {
          key: 0,
          style: { width: "100%" },
          showTime: !1,
          valueFormat: "YYYY-MM-DD",
          placeholder: "请选择" + e.item.label,
          value: e.innerValue,
          "onUpdate:value": l[0] || (l[0] = (t) => e.innerValue = t)
        }, null, 8, ["placeholder", "value"])) : (u(), p(m, { key: 1 }, [
          c(s, {
            showTime: !1,
            valueFormat: "YYYY-MM-DD",
            placeholder: "开始日期",
            value: e.beginValue,
            "onUpdate:value": l[1] || (l[1] = (t) => e.beginValue = t),
            style: { width: "calc(50% - 15px)" }
          }, null, 8, ["value"]),
          fe,
          c(s, {
            showTime: !1,
            valueFormat: "YYYY-MM-DD",
            placeholder: "结束日期",
            value: e.endValue,
            "onUpdate:value": l[2] || (l[2] = (t) => e.endValue = t),
            style: { width: "calc(50% - 15px)" }
          }, null, 8, ["value"])
        ], 64))
      ], 64)) : e.item.view == "datetime" ? (u(), p(m, { key: 1 }, [
        e.single_mode === e.item.mode ? (u(), n(s, {
          key: 0,
          style: { width: "100%" },
          showTime: !0,
          valueFormat: "YYYY-MM-DD hh:mm:ss",
          placeholder: "请选择" + e.item.label,
          value: e.innerValue,
          "onUpdate:value": l[3] || (l[3] = (t) => e.innerValue = t)
        }, null, 8, ["placeholder", "value"])) : (u(), p(m, { key: 1 }, [
          c(s, {
            showTime: !0,
            valueFormat: "YYYY-MM-DD hh:mm:ss",
            placeholder: "开始时间",
            value: e.beginValue,
            "onUpdate:value": l[4] || (l[4] = (t) => e.beginValue = t),
            style: { width: "calc(50% - 15px)" }
          }, null, 8, ["value"]),
          he,
          c(s, {
            showTime: !0,
            valueFormat: "YYYY-MM-DD hh:mm:ss",
            placeholder: "结束时间",
            value: e.endValue,
            "onUpdate:value": l[5] || (l[5] = (t) => e.endValue = t),
            style: { width: "calc(50% - 15px)" }
          }, null, 8, ["value"])
        ], 64))
      ], 64)) : e.isEasySelect() ? (u(), p(m, { key: 2 }, [
        e.item.config === "1" ? (u(), n(f, {
          key: 0,
          placeholder: "请选择" + e.item.label,
          value: e.innerValue,
          "onUpdate:value": l[6] || (l[6] = (t) => e.innerValue = t),
          dictCode: e.getDictCode()
        }, null, 8, ["placeholder", "value", "dictCode"])) : (u(), n(F, {
          key: 1,
          placeholder: "请选择" + e.item.label,
          value: e.innerValue,
          "onUpdate:value": l[7] || (l[7] = (t) => e.innerValue = t)
        }, {
          default: b(() => [
            (u(!0), p(m, null, Z(e.dictOptions[e.getDictOptionKey(e.item)], (t, v) => (u(), n(J, {
              key: v,
              value: t.value
            }, {
              default: b(() => [
                _(K(t.text), 1)
              ]),
              _: 2
            }, 1032, ["value"]))), 128))
          ]),
          _: 1
        }, 8, ["placeholder", "value"]))
      ], 64)) : e.item.view === "sel_tree" ? (u(), n(D, {
        key: 3,
        placeholder: "请选择" + e.item.label,
        value: e.innerValue,
        "onUpdate:value": l[8] || (l[8] = (t) => e.innerValue = t),
        dict: e.item.dict,
        pidField: e.item.pidField,
        pidValue: e.item.pidValue,
        hasChildField: e.item.hasChildField,
        "load-triggle-change": ""
      }, null, 8, ["placeholder", "value", "dict", "pidField", "pidValue", "hasChildField"])) : e.item.view === "cat_tree" ? (u(), n(k, {
        key: 4,
        onChange: e.handleCategoryTreeChange,
        loadTriggleChange: !0,
        pcode: e.item.pcode,
        value: e.innerValue,
        "onUpdate:value": l[9] || (l[9] = (t) => e.innerValue = t),
        placeholder: "请选择" + e.item.label
      }, null, 8, ["onChange", "pcode", "value", "placeholder"])) : e.item.view === "sel_search" ? (u(), p(m, { key: 5 }, [
        e.item.config === "1" ? (u(), n(f, {
          key: 0,
          value: e.innerValue,
          "onUpdate:value": l[10] || (l[10] = (t) => e.innerValue = t),
          placeholder: "请选择" + e.item.label,
          dict: e.getDictCode()
        }, null, 8, ["value", "placeholder", "dict"])) : (u(), n(T, {
          key: 1,
          value: e.innerValue,
          "onUpdate:value": l[11] || (l[11] = (t) => e.innerValue = t),
          placeholder: "请选择" + e.item.label,
          sql: e.getSqlByDictCode()
        }, null, 8, ["value", "placeholder", "sql"]))
      ], 64)) : e.item.view == "sel_user" ? (u(), n(E, $({ key: 6 }, e.userSelectProp, {
        value: e.innerValue,
        "onUpdate:value": l[12] || (l[12] = (t) => e.innerValue = t),
        placeholder: "请选择" + e.item.label
      }), null, 16, ["value", "placeholder"])) : e.item.view == "sel_depart" ? (u(), n(B, $({
        key: 7,
        showButton: !1
      }, e.depSelectProp, {
        value: e.innerValue,
        "onUpdate:value": l[13] || (l[13] = (t) => e.innerValue = t),
        placeholder: "请选择" + e.item.label
      }), null, 16, ["value", "placeholder"])) : e.item.view == "popup" ? (u(), n(S, {
        key: 8,
        placeholder: "请选择" + e.item.label,
        value: e.innerValue,
        "onUpdate:value": l[14] || (l[14] = (t) => e.innerValue = t),
        code: e.item.dictTable,
        setFieldsValue: e.setFieldsValue,
        "field-config": e.getPopupFieldConfig(e.item),
        multi: !0
      }, null, 8, ["placeholder", "value", "code", "setFieldsValue", "field-config"])) : e.item.view == "pca" ? (u(), n(U, {
        key: 9,
        placeholder: "请选择" + e.item.label,
        value: e.innerValue,
        "onUpdate:value": l[15] || (l[15] = (t) => e.innerValue = t)
      }, null, 8, ["placeholder", "value"])) : e.item.view == "checkbox" || e.item.view == "list_multi" ? (u(), n(Y, {
        key: 10,
        dictCode: e.getDictCode(),
        placeholder: "请选择" + e.item.label,
        value: e.innerValue,
        "onUpdate:value": l[16] || (l[16] = (t) => e.innerValue = t)
      }, null, 8, ["dictCode", "placeholder", "value"])) : (u(), p(m, { key: 11 }, [
        e.single_mode === e.item.mode ? (u(), n(V, {
          key: 0,
          placeholder: "请选择" + e.item.label,
          value: e.innerValue,
          "onUpdate:value": l[17] || (l[17] = (t) => e.innerValue = t)
        }, null, 8, ["placeholder", "value"])) : (u(), p(m, { key: 1 }, [
          c(V, {
            placeholder: "开始值",
            value: e.beginValue,
            "onUpdate:value": l[18] || (l[18] = (t) => e.beginValue = t),
            style: { width: "calc(50% - 15px)" }
          }, null, 8, ["value"]),
          ce,
          c(V, {
            placeholder: "结束值",
            value: e.endValue,
            "onUpdate:value": l[19] || (l[19] = (t) => e.endValue = t),
            style: { width: "calc(50% - 15px)" }
          }, null, 8, ["value"])
        ], 64))
      ], 64))
    ]),
    _: 1
  }, 8, ["labelCol"]);
}
const Be = /* @__PURE__ */ me(ve, [["render", ye], ["__scopeId", "data-v-e62a9629"]]);
export {
  Be as default
};
