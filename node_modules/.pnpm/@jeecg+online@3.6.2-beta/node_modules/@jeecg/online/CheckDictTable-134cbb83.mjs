var F = Object.defineProperty, x = Object.defineProperties;
var E = Object.getOwnPropertyDescriptors;
var h = Object.getOwnPropertySymbols;
var R = Object.prototype.hasOwnProperty, A = Object.prototype.propertyIsEnumerable;
var _ = (e, t, l) => t in e ? F(e, t, { enumerable: !0, configurable: !0, writable: !0, value: l }) : e[t] = l, C = (e, t) => {
  for (var l in t || (t = {}))
    R.call(t, l) && _(e, l, t[l]);
  if (h)
    for (var l of h(t))
      A.call(t, l) && _(e, l, t[l]);
  return e;
}, y = (e, t) => x(e, E(t));
import { defineComponent as B, ref as k, computed as N, resolveComponent as u, openBlock as D, createBlock as P, mergeProps as $, withCtx as s, createVNode as n, normalizeClass as w, withDirectives as H, createElementVNode as T, vShow as J } from "vue";
import { JVxeTypes as i } from "/@/components/jeecg/JVxeTable/types";
import { u as S } from "./useTableSync-774c3774.mjs";
import { useMessage as I } from "/@/hooks/web/useMessage";
import { useJPrompt as M } from "/@/components/jeecg/JPrompt";
import { useDesign as O } from "/@/hooks/web/useDesign";
import { _ as q } from "./index-0e3ab3af.mjs";
import "./cgform.data-cbdd88c3.mjs";
import "/@/utils/dict";
import "/@/utils/dict/JDictSelectUtil";
import "/@/utils/uuid";
import "lodash-es";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "vue-router";
const z = B({
  name: "CheckDictTable",
  components: {
    VNodes: (e, { attrs: t }) => t.vnodes
  },
  setup() {
    const { prefixCls: e } = O("cgform-check-dict-table"), { createMessage: t } = I(), l = k([
      { title: "字段名称", key: "dbFieldName", width: 100 },
      { title: "字段备注", key: "dbFieldTxt", width: 100 },
      {
        title: "字段Href",
        key: "fieldHref",
        width: 130,
        type: i.input,
        defaultValue: ""
      },
      {
        title: "验证规则",
        key: "fieldValidType",
        width: 170,
        type: i.slot,
        slotName: "fieldValidType",
        allowInput: !0,
        defaultValue: "",
        placeholder: "空"
      },
      {
        title: "校验必填",
        key: "fieldMustInput",
        width: 80,
        type: i.checkbox,
        align: "center",
        customValue: ["1", "0"],
        defaultChecked: !1
      },
      {
        title: "字典Table",
        key: "dictTable",
        width: 280,
        type: i.textarea,
        defaultValue: ""
      },
      {
        title: "字典Code",
        key: "dictField",
        width: 280,
        type: i.input,
        defaultValue: ""
      },
      {
        title: "字典Text",
        key: "dictText",
        width: 280,
        type: i.input,
        defaultValue: ""
      }
    ]), g = S(l), m = k([
      { label: "空", value: "" },
      { label: "唯一校验", value: "only" },
      { label: "6到16位数字", value: "n6-16" },
      { label: "6到18位字母", value: "s6-18" },
      { label: "6到16位任意字符", value: "*6-16" },
      { label: "网址", value: "url" },
      { label: "电子邮件", value: "e" },
      { label: "手机号码", value: "m" },
      { label: "邮政编码", value: "p" },
      { label: "字母", value: "s" },
      { label: "数字", value: "n" },
      { label: "整数", value: "z" },
      { label: "非空", value: "*" },
      { label: "金额", value: "money" }
    ]), f = N(() => m.value.map((o) => o.value)), { createJPrompt: d } = M();
    function r(o) {
      return o != null && !f.value.includes(o);
    }
    function c(o) {
      d({
        title: "自定义正则表达式",
        placeholder: "请输入正则表达式",
        rules: [{ required: !0, message: "正则表达式不能为空！" }, { validator: p }],
        onOk: (a) => {
          o.triggerChange(a), t.success("添加成功");
        }
      });
    }
    function v(o) {
      d({
        title: "修改自定义正则表达式",
        defaultValue: o.value,
        placeholder: "请输入正则表达式",
        rules: [{ required: !0, message: "正则表达式不能为空！" }, { validator: p }],
        onOk: (a) => {
          o.triggerChange(a), a !== o.value && t.success("修改成功");
        }
      });
    }
    function p(o, a) {
      return r(a) ? Promise.resolve() : Promise.reject("当前校验已存在");
    }
    return y(C({}, g), {
      prefixCls: e,
      columns: l,
      isCustomRegexp: r,
      validTypeOptions: m,
      validTypeValues: f,
      onAddCustomRegexp: c,
      onChangeCustomRegexp: v
    });
  }
});
const j = {
  class: "custom-option-list rc-virtual-list-holder-inner",
  style: { "border-top": "1px solid #dfdfdf" }
}, G = ["onClick"];
function K(e, t, l, g, m, f) {
  const d = u("VNodes"), r = u("a-select"), c = u("a-col"), v = u("a-button"), p = u("a-row"), o = u("JVxeTable");
  return D(), P(o, $({
    ref: "tableRef",
    rowNumber: "",
    keyboardEdit: "",
    class: [e.prefixCls],
    maxHeight: e.tableHeight.noToolbar,
    loading: e.loading,
    columns: e.columns,
    dataSource: e.dataSource,
    disabledRows: { dbFieldName: ["id", "has_child"] }
  }, e.tableProps), {
    fieldValidType: s((a) => [
      n(p, {
        type: "flex",
        class: w(["row-valid-type", { full: !e.isCustomRegexp(a.value) }])
      }, {
        default: s(() => [
          n(c, {
            class: w(["left"])
          }, {
            default: s(() => [
              n(r, {
                value: a.value,
                options: e.validTypeOptions,
                placeholder: "空",
                style: { width: "100%" },
                onChange: a.triggerChange
              }, {
                dropdownRender: s(({ menuNode: V }) => [
                  n(d, { vnodes: V }, null, 8, ["vnodes"]),
                  H(T("div", j, [
                    T("div", {
                      class: "ant-select-item ant-select-item-option",
                      title: "使用自定义正则表达式作为校验规则",
                      onClick: (b) => e.onAddCustomRegexp(a),
                      onMousedown: t[0] || (t[0] = (b) => b.preventDefault())
                    }, " 正则表达式 ", 40, G)
                  ], 512), [
                    [J, !e.isCustomRegexp(a.value)]
                  ])
                ]),
                _: 2
              }, 1032, ["value", "options", "onChange"])
            ]),
            _: 2
          }, 1024),
          n(c, {
            class: "right",
            title: "修改自定义正则表达式"
          }, {
            default: s(() => [
              n(v, {
                preIcon: "ant-design:edit",
                onClick: () => e.onChangeCustomRegexp(a)
              }, null, 8, ["onClick"])
            ]),
            _: 2
          }, 1024)
        ]),
        _: 2
      }, 1032, ["class"])
    ]),
    _: 1
  }, 16, ["class", "maxHeight", "loading", "columns", "dataSource"]);
}
const se = /* @__PURE__ */ q(z, [["render", K], ["__scopeId", "data-v-592747d8"]]);
export {
  se as default
};
