var K = Object.defineProperty;
var I = Object.getOwnPropertySymbols;
var x = Object.prototype.hasOwnProperty, J = Object.prototype.propertyIsEnumerable;
var F = (e, o, t) => o in e ? K(e, o, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[o] = t, R = (e, o) => {
  for (var t in o || (o = {}))
    x.call(o, t) && F(e, t, o[t]);
  if (I)
    for (var t of I(o))
      J.call(o, t) && F(e, t, o[t]);
  return e;
};
var _ = (e, o, t) => new Promise((C, f) => {
  var b = (i) => {
    try {
      s(t.next(i));
    } catch (u) {
      f(u);
    }
  }, c = (i) => {
    try {
      s(t.throw(i));
    } catch (u) {
      f(u);
    }
  }, s = (i) => i.done ? C(i.value) : Promise.resolve(i.value).then(b, c);
  s((t = t.apply(e, o)).next());
});
import { defineComponent as Q, ref as A, reactive as W, computed as X, nextTick as Y, resolveComponent as r, openBlock as M, createBlock as P, withCtx as l, createVNode as a, createTextVNode as B, createElementBlock as Z, createCommentVNode as S, normalizeProps as ee, guardReactiveProps as oe } from "vue";
import { u as te } from "./useOnlineTest-e4bd8be3.mjs";
import { useListPage as ne } from "/@/hooks/system/useListPage";
import { BasicTable as le, TableAction as ae } from "/@/components/Table";
import { BasicModal as ie, useModalInner as re, useModal as se } from "/@/components/Modal";
import { BasicForm as ce, useForm as ue } from "/@/components/Form";
import { defHttp as v } from "/@/utils/http/axios";
import { _ as de } from "./index-0e3ab3af.mjs";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "/@/hooks/web/useMessage";
import "vue-router";
const me = (e, o) => v.get({ url: "/online/cgform/button/list/" + e, params: o });
function D(e) {
  return v.delete(
    {
      url: "/online/cgform/button/deleteBatch",
      params: {
        ids: e.join(",")
      }
    },
    { joinParamsToUrl: !0 }
  );
}
const pe = (e, o) => o ? v.put({ url: "/online/cgform/button/edit", params: e }) : v.post({ url: "/online/cgform/button/add", params: e }), fe = [
  { title: "按钮编码", align: "center", dataIndex: "buttonCode" },
  { title: "按钮名称", align: "center", dataIndex: "buttonName" },
  {
    title: "按钮样式",
    align: "center",
    dataIndex: "buttonStyle",
    customRender({ text: e, record: o }) {
      if (e === "form") {
        let t = o.optPosition;
        return e + "(" + (t == "2" ? "底部" : "侧面") + ")";
      } else
        return e;
    }
  },
  { title: "按钮类型", align: "center", dataIndex: "optType" },
  { title: "排序", align: "center", dataIndex: "orderNum" },
  { title: "按钮图标", align: "center", dataIndex: "buttonIcon" },
  { title: "表达式", align: "center", dataIndex: "exp" },
  {
    title: "按钮状态",
    align: "center",
    dataIndex: "buttonStatus",
    customRender({ text: e }) {
      return e == 1 ? "激活" : "未激活";
    }
  }
], be = [
  {
    label: "按钮编码",
    field: "buttonCode",
    component: "Input",
    required: !0
  },
  {
    label: "按钮名称",
    field: "buttonName",
    component: "Input",
    required: !0
  },
  {
    label: "按钮样式",
    field: "buttonStyle",
    component: "Select",
    componentProps: {
      options: [
        { label: "Link", value: "link" },
        { label: "Button", value: "button" },
        { label: "Form", value: "form" }
      ]
    },
    defaultValue: "link"
  },
  {
    label: "按钮位置",
    field: "optPosition",
    component: "Select",
    componentProps: {
      options: [
        { label: "侧面", value: "1" },
        { label: "底部", value: "2" }
      ]
    },
    defaultValue: "2",
    show: ({ model: e }) => e.buttonStyle === "form"
  },
  {
    label: "按钮类型",
    field: "optType",
    component: "Select",
    componentProps: {
      options: [
        { label: "Js", value: "js" },
        { label: "Action", value: "action" }
      ]
    },
    defaultValue: "js"
  },
  {
    label: "排序",
    field: "orderNum",
    component: "InputNumber",
    componentProps: {
      style: "width: 100%"
    }
  },
  {
    label: "按钮图标",
    field: "buttonIcon",
    component: "Input",
    helpMessage: "a-icon type"
  },
  {
    label: "表达式",
    field: "exp",
    component: "Input"
  },
  {
    label: "按钮状态",
    field: "buttonStatus",
    component: "RadioButtonGroup",
    componentProps: {
      options: [
        { label: "激活", value: "1" },
        { label: "未激活", value: "0" }
      ]
    },
    defaultValue: "1"
  }
], ge = Q({
  name: "CustomButtonList",
  components: { BasicModal: ie, BasicTable: le, TableAction: ae, BasicForm: ce },
  emits: ["register"],
  setup() {
    const e = A(""), { doRequest: o, doDeleteRecord: t, tableContext: C } = ne({
      tableProps: {
        api: (n) => me(e.value, n),
        columns: fe,
        canResize: !1,
        useSearchForm: !1,
        beforeFetch(n) {
          return Object.assign(n, { column: "orderNum", order: "asc" });
        }
      }
    }), [f, { reload: b }, { rowSelection: c, selectedRowKeys: s }] = C, [i, { closeModal: u }] = re((n) => _(this, null, function* () {
      e.value = n.row.id, b();
    })), { aiTestMode: y, genButtons: w } = te(), [k, g] = se(), d = A(!1), m = W({
      onRegister: k,
      title: X(() => d != null && d.value ? "修改" : "新增"),
      width: 800,
      confirmLoading: !1,
      onOk: q,
      onCancel: g.closeModal
    });
    let p = {};
    const [N, { resetFields: E, setFieldsValue: L, validate: V }] = ue({
      schemas: be,
      showActionButtonGroup: !1
    });
    function T(n) {
      return _(this, null, function* () {
        var h;
        d.value = n.isUpdate, p = R({}, (h = n.record) != null ? h : {}), g.openModal(), yield Y(), yield E(), L(p);
      });
    }
    function j() {
      T({ isUpdate: !1 });
    }
    function O(n) {
      T({ isUpdate: !0, record: n });
    }
    function G() {
      u();
    }
    function U() {
      w(e.value);
    }
    function $() {
      return _(this, null, function* () {
        o(() => D(s.value));
      });
    }
    function q() {
      return _(this, null, function* () {
        try {
          m.confirmLoading = !0;
          let n = yield V();
          n = Object.assign({ cgformHeadId: e.value }, p, n), yield pe(n, d.value), b(), g.closeModal();
        } finally {
          m.confirmLoading = !1;
        }
      });
    }
    function z(n) {
      return [
        {
          label: "编辑",
          onClick: () => O(n)
        }
      ];
    }
    function H(n) {
      return [
        {
          label: "删除",
          popConfirm: {
            title: "确定删除吗？",
            placement: "left",
            confirm: () => t(() => D([n.id]))
          }
        }
      ];
    }
    return {
      onAdd: j,
      onBatchDelete: $,
      aiTestMode: y,
      onGenButtons: U,
      registerModal: i,
      registerTable: f,
      selectedRowKeys: s,
      rowSelection: c,
      onCancel: G,
      getTableAction: z,
      getDropDownAction: H,
      registerForm: N,
      formModalProps: m
    };
  }
}), _e = {
  key: 0,
  style: { float: "left" }
};
function Be(e, o, t, C, f, b) {
  const c = r("a-button"), s = r("a-icon"), i = r("a-menu-item"), u = r("a-menu"), y = r("a-dropdown"), w = r("TableAction"), k = r("BasicTable"), g = r("BasicForm"), d = r("a-spin"), m = r("BasicModal");
  return M(), P(m, {
    onRegister: e.registerModal,
    title: "自定义按钮",
    width: 1200,
    defaultFullscreen: "",
    onCancel: e.onCancel
  }, {
    footer: l(() => [
      a(c, { onClick: e.onCancel }, {
        default: l(() => [
          B("关闭")
        ]),
        _: 1
      }, 8, ["onClick"]),
      e.aiTestMode ? (M(), Z("div", _e, [
        a(c, { onClick: e.onGenButtons }, {
          default: l(() => [
            B("生成测试数据")
          ]),
          _: 1
        }, 8, ["onClick"])
      ])) : S("", !0)
    ]),
    default: l(() => [
      a(k, {
        onRegister: e.registerTable,
        rowSelection: e.rowSelection
      }, {
        tableTitle: l(() => [
          a(c, {
            onClick: e.onAdd,
            type: "primary",
            preIcon: "ant-design:plus"
          }, {
            default: l(() => [
              B("新增")
            ]),
            _: 1
          }, 8, ["onClick"]),
          e.selectedRowKeys.length > 0 ? (M(), P(y, { key: 0 }, {
            overlay: l(() => [
              a(u, null, {
                default: l(() => [
                  a(i, {
                    key: "1",
                    onClick: e.onBatchDelete
                  }, {
                    default: l(() => [
                      a(s, { type: "delete" }),
                      B(" 删除 ")
                    ]),
                    _: 1
                  }, 8, ["onClick"])
                ]),
                _: 1
              })
            ]),
            default: l(() => [
              a(c, { style: { "margin-left": "8px" } }, {
                default: l(() => [
                  B(" 批量操作 "),
                  a(s, { type: "down" })
                ]),
                _: 1
              })
            ]),
            _: 1
          })) : S("", !0)
        ]),
        action: l(({ record: p }) => [
          a(w, {
            actions: e.getTableAction(p),
            dropDownActions: e.getDropDownAction(p)
          }, null, 8, ["actions", "dropDownActions"])
        ]),
        _: 1
      }, 8, ["onRegister", "rowSelection"]),
      a(m, ee(oe(e.formModalProps)), {
        default: l(() => [
          a(d, {
            spinning: e.formModalProps.confirmLoading
          }, {
            default: l(() => [
              a(g, { onRegister: e.registerForm }, null, 8, ["onRegister"])
            ]),
            _: 1
          }, 8, ["spinning"])
        ]),
        _: 1
      }, 16)
    ]),
    _: 1
  }, 8, ["onRegister", "onCancel"]);
}
const Pe = /* @__PURE__ */ de(ge, [["render", Be]]);
export {
  Pe as default
};
