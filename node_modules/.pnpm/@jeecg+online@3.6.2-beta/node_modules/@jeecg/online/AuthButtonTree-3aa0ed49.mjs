var y = (e, l, a) => new Promise((f, i) => {
  var m = (t) => {
    try {
      u(a.next(t));
    } catch (s) {
      i(s);
    }
  }, n = (t) => {
    try {
      u(a.throw(t));
    } catch (s) {
      i(s);
    }
  }, u = (t) => t.done ? f(t.value) : Promise.resolve(t.value).then(m, n);
  u((a = a.apply(e, l)).next());
});
import { defineComponent as w, ref as d, computed as A, watch as N, resolveComponent as g, openBlock as v, createElementBlock as E, createBlock as I, Fragment as M, createElementVNode as P, createVNode as k, withCtx as B, createTextVNode as C } from "vue";
import { useMessage as S } from "/@/hooks/web/useMessage";
import { c as R } from "./auth.data-8be5c9e3.mjs";
import { m as V, l as $, n as z } from "./auth.api-d3a6c4b3.mjs";
import { _ as L } from "./index-0e3ab3af.mjs";
import "/@/utils/http/axios";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "vue-router";
const q = w({
  name: "AuthButtonTree",
  props: {
    cgformId: { type: String, required: !0 }
  },
  setup(e) {
    const { createMessage: l } = S(), a = d(""), f = d(2), i = d(!0), m = d([]), n = d([]), u = d([]), t = d(""), s = A(() => !a.value);
    N(() => e.cgformId, h, { immediate: !0 });
    function h() {
      return y(this, null, function* () {
        if (!e.cgformId)
          return;
        let o = yield V(e.cgformId, f.value);
        o.forEach((c) => {
          for (const p of R)
            if (c.code == p.code) {
              c.title = p.title;
              break;
            }
        });
        let r = [];
        for (let c of o) {
          let p = T(c);
          r.push({ key: c.id, title: p });
        }
        u.value = r;
      });
    }
    function D() {
      h(), _(a.value, t.value);
    }
    function _(o, r) {
      return y(this, null, function* () {
        a.value = o, t.value = r, n.value = [], yield h();
        let c = yield $({
          roleId: o,
          cgformId: e.cgformId,
          type: f.value,
          authMode: r
        });
        n.value = c.map((p) => p.authId);
      });
    }
    function K() {
      a.value = "", h();
    }
    function x() {
      return y(this, null, function* () {
        yield z(a.value, e.cgformId, {
          authId: JSON.stringify(n.value),
          authMode: t.value
        }), l.success("保存成功");
      });
    }
    function T(o) {
      let r = o.title + "-";
      return o.page == 3 ? r += "列表可见" : o.page == 5 && (r += "表单可见"), r;
    }
    function b(o) {
      m.value = o, i.value = !1;
    }
    function F() {
      a.value = "", n.value = [];
    }
    return {
      loadChecked: _,
      clear: F,
      expandedKeys: m,
      autoExpandParent: i,
      checkedKeys: n,
      treeData: u,
      disabled: s,
      onSave: x,
      onExpand: b,
      onRefresh: D,
      clearChecked: K
    };
  }
});
const J = { class: "onl-auth-tree-btns" };
function O(e, l, a, f, i, m) {
  const n = g("a-empty"), u = g("a-button"), t = g("a-tree");
  return v(), E("div", null, [
    e.disabled ? (v(), I(n, {
      key: 0,
      description: "请先选中左侧角色/部门/用户"
    })) : e.treeData.length === 0 ? (v(), I(n, {
      key: 1,
      description: "无权限信息"
    })) : (v(), E(M, { key: 2 }, [
      P("div", J, [
        k(u, {
          onClick: e.onRefresh,
          size: "small",
          type: "primary",
          preIcon: "ant-design:redo",
          ghost: ""
        }, {
          default: B(() => [
            C("刷新")
          ]),
          _: 1
        }, 8, ["onClick"]),
        k(u, {
          onClick: e.onSave,
          size: "small",
          type: "primary",
          preIcon: "ant-design:save",
          ghost: ""
        }, {
          default: B(() => [
            C("保存")
          ]),
          _: 1
        }, 8, ["onClick"])
      ]),
      k(t, {
        checkable: "",
        checkedKeys: e.checkedKeys,
        "onUpdate:checkedKeys": l[0] || (l[0] = (s) => e.checkedKeys = s),
        expandedKeys: e.expandedKeys,
        autoExpandParent: e.autoExpandParent,
        treeData: e.treeData,
        onExpand: e.onExpand
      }, null, 8, ["checkedKeys", "expandedKeys", "autoExpandParent", "treeData", "onExpand"])
    ], 64))
  ]);
}
const ee = /* @__PURE__ */ L(q, [["render", O], ["__scopeId", "data-v-d165a23e"]]);
export {
  ee as default
};
