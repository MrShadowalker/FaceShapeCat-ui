var K = Object.defineProperty, w = Object.defineProperties;
var E = Object.getOwnPropertyDescriptors;
var M = Object.getOwnPropertySymbols;
var U = Object.prototype.hasOwnProperty, F = Object.prototype.propertyIsEnumerable;
var k = (e, t, a) => t in e ? K(e, t, { enumerable: !0, configurable: !0, writable: !0, value: a }) : e[t] = a, B = (e, t) => {
  for (var a in t || (t = {}))
    U.call(t, a) && k(e, a, t[a]);
  if (M)
    for (var a of M(t))
      F.call(t, a) && k(e, a, t[a]);
  return e;
}, D = (e, t) => w(e, E(t));
var b = (e, t, a) => new Promise((p, r) => {
  var n = (f) => {
    try {
      u(a.next(f));
    } catch (m) {
      r(m);
    }
  }, i = (f) => {
    try {
      u(a.throw(f));
    } catch (m) {
      r(m);
    }
  }, u = (f) => f.done ? p(f.value) : Promise.resolve(f.value).then(n, i);
  u((a = a.apply(e, t)).next());
});
import N from "./LeftRole-8b8dfe21.mjs";
import $ from "./LeftDepart-fa85523d.mjs";
import O from "./LeftUser-dc24ef2f.mjs";
import V from "./AuthFieldTree-69864163.mjs";
import P from "./AuthButtonTree-3aa0ed49.mjs";
import j from "./AuthDataTree-94e026e3.mjs";
import { defineComponent as q, ref as s, computed as z, nextTick as I, resolveComponent as c, openBlock as L, createBlock as G, withCtx as l, createVNode as o, createElementBlock as H, Fragment as J, createCommentVNode as Q } from "vue";
import { BasicModal as W, useModalInner as X } from "/@/components/Modal";
import { _ as Y } from "./index-0e3ab3af.mjs";
import "/@/utils/http/axios";
import "/@/components/Table";
import "/@/hooks/system/useListPage";
import "/@/api/common/api";
import "/@/hooks/web/useMessage";
import "./auth.api-d3a6c4b3.mjs";
import "@ant-design/icons-vue";
import "./auth.data-8be5c9e3.mjs";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "vue-router";
const Z = q({
  name: "AuthSetterModal",
  components: {
    BasicModal: W,
    LeftRole: N,
    LeftDepart: $,
    LeftUser: O,
    AuthFieldTree: V,
    AuthButtonTree: P,
    AuthDataTree: j
  },
  props: {
    // 1单表 2主表 3附表
    tableType: { type: Number, default: 1 }
  },
  setup(e) {
    const t = s(""), a = s(!1), p = s("field"), r = s("role"), n = {
      fieldRef: s(),
      buttonRef: s(),
      dataRef: s(),
      roleRef: s(),
      userRef: s(),
      departRef: s()
    }, i = s(""), u = z(() => e.tableType == 1 || e.tableType == 2), [f, { closeModal: m }] = X((d) => {
      p.value = "field", t.value = d.cgformId, h();
    });
    function v(d = p.value) {
      var C;
      return (C = n[d + "Ref"]) == null ? void 0 : C.value;
    }
    function h() {
      return b(this, null, function* () {
        yield I(), y(), v().clear();
      });
    }
    function S(d) {
      i.value = d, _(p.value), R();
    }
    function A(d) {
      i.value = d, _(p.value), R();
    }
    function T(d) {
      i.value = d, _(p.value), R();
    }
    function R() {
      r.value == "role" ? (n.departRef.value.clearSelected(), n.userRef.value.clearSelected()) : r.value == "depart" ? (n.roleRef.value.clearSelected(), n.userRef.value.clearSelected()) : r.value == "user" && (n.departRef.value.clearSelected(), n.roleRef.value.clearSelected());
    }
    function y() {
      r.value == "role" ? n.roleRef.value.clearSelected() : r.value == "depart" ? n.departRef.value.clearSelected() : r.value == "user" && n.userRef.value.clearSelected(), v().clearChecked(), i.value = "";
    }
    function _(d) {
      return b(this, null, function* () {
        yield I(), i.value && v(d).loadChecked(i.value, r.value);
      });
    }
    function g() {
      y();
    }
    return D(B({}, n), {
      cgformId: t,
      loading: a,
      activeKey: p,
      hasDataAuth: u,
      authMode: r,
      onAuthModeChange: g,
      onAuthTypeChange: _,
      closeModal: m,
      onSelectRole: S,
      onSelectDepart: A,
      onSelectUser: T,
      registerModal: f
    });
  }
});
function x(e, t, a, p, r, n) {
  const i = c("LeftRole"), u = c("a-tab-pane"), f = c("LeftDepart"), m = c("LeftUser"), v = c("a-tabs"), h = c("a-col"), S = c("AuthFieldTree"), A = c("AuthButtonTree"), T = c("AuthDataTree"), R = c("a-row"), y = c("a-spin"), _ = c("BasicModal");
  return L(), G(_, {
    title: "Online权限授权",
    width: 900,
    maskClosable: !1,
    defaultFullscreen: "",
    okButtonProps: { style: { display: "none" } },
    cancelText: "关闭",
    onCancel: e.closeModal,
    onRegister: e.registerModal
  }, {
    default: l(() => [
      o(y, {
        wrapperClassName: "authsetting-container",
        spinning: e.loading
      }, {
        default: l(() => [
          o(R, null, {
            default: l(() => [
              o(h, { span: 12 }, {
                default: l(() => [
                  o(v, {
                    activeKey: e.authMode,
                    "onUpdate:activeKey": t[0] || (t[0] = (g) => e.authMode = g),
                    onChange: e.onAuthModeChange
                  }, {
                    default: l(() => [
                      o(u, {
                        tab: "角色授权",
                        key: "role",
                        forceRender: ""
                      }, {
                        default: l(() => [
                          o(i, {
                            ref: "roleRef",
                            onSelect: e.onSelectRole
                          }, null, 8, ["onSelect"])
                        ]),
                        _: 1
                      }),
                      o(u, {
                        tab: "部门授权",
                        key: "depart",
                        forceRender: ""
                      }, {
                        default: l(() => [
                          o(f, {
                            ref: "departRef",
                            onSelect: e.onSelectDepart
                          }, null, 8, ["onSelect"])
                        ]),
                        _: 1
                      }),
                      o(u, {
                        tab: "人员授权",
                        key: "user",
                        forceRender: ""
                      }, {
                        default: l(() => [
                          o(m, {
                            ref: "userRef",
                            onSelect: e.onSelectUser
                          }, null, 8, ["onSelect"])
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  }, 8, ["activeKey", "onChange"])
                ]),
                _: 1
              }),
              o(h, { span: 1 }),
              o(h, { span: 11 }, {
                default: l(() => [
                  o(v, {
                    activeKey: e.activeKey,
                    "onUpdate:activeKey": t[1] || (t[1] = (g) => e.activeKey = g),
                    onChange: e.onAuthTypeChange
                  }, {
                    default: l(() => [
                      o(u, {
                        tab: "字段权限",
                        key: "field",
                        forceRender: ""
                      }, {
                        default: l(() => [
                          o(S, {
                            class: "authFieldTree",
                            ref: "fieldRef",
                            cgformId: e.cgformId
                          }, null, 8, ["cgformId"])
                        ]),
                        _: 1
                      }),
                      e.hasDataAuth ? (L(), H(J, { key: 0 }, [
                        o(u, {
                          tab: "按钮权限",
                          key: "button",
                          forceRender: ""
                        }, {
                          default: l(() => [
                            o(A, {
                              class: "authButtonTree",
                              ref: "buttonRef",
                              cgformId: e.cgformId
                            }, null, 8, ["cgformId"])
                          ]),
                          _: 1
                        }),
                        o(u, {
                          tab: "数据权限",
                          key: "data",
                          forceRender: ""
                        }, {
                          default: l(() => [
                            o(T, {
                              class: "authDataTree",
                              ref: "dataRef",
                              cgformId: e.cgformId
                            }, null, 8, ["cgformId"])
                          ]),
                          _: 1
                        })
                      ], 64)) : Q("", !0)
                    ]),
                    _: 1
                  }, 8, ["activeKey", "onChange"])
                ]),
                _: 1
              })
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["spinning"])
    ]),
    _: 1
  }, 8, ["onCancel", "onRegister"]);
}
const ye = /* @__PURE__ */ Y(Z, [["render", x], ["__scopeId", "data-v-aee70da5"]]);
export {
  ye as default
};
