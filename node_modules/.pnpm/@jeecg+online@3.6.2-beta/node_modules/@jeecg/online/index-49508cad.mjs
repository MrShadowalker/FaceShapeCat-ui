var L = (U, f, s) => new Promise((h, p) => {
  var k = (i) => {
    try {
      n(s.next(i));
    } catch (u) {
      p(u);
    }
  }, g = (i) => {
    try {
      n(s.throw(i));
    } catch (u) {
      p(u);
    }
  }, n = (i) => i.done ? h(i.value) : Promise.resolve(i.value).then(k, g);
  n((s = s.apply(U, f)).next());
});
import { defineComponent as E, resolveComponent as m, openBlock as S, createElementBlock as M, createVNode as r, unref as c, mergeProps as V, withCtx as a, createTextVNode as C, createBlock as q, createCommentVNode as F } from "vue";
import { BasicTable as K, TableAction as Q } from "/@/components/Table";
import { useListPage as H } from "/@/hooks/system/useListPage";
import { l as j, c as z, s as G, _ as J, b as W, g as X, d as Y } from "./CgreportModal.vue_vue_type_script_setup_true_lang-c89d9222.mjs";
import { useModal as Z } from "/@/components/Modal";
import R from "clipboard";
import { useRouter as ee } from "vue-router";
import { buildUUID as te } from "/@/utils/uuid";
import "/@/components/Form/index";
import "/@/hooks/system/useJvxeMethods.ts";
import "/@/components/jeecg/JVxeTable/types";
import "/@/views/system/user/user.api";
import "/@/utils/http/axios";
import "/@/hooks/web/useMessage";
import "/@/store/modules/permission";
const be = /* @__PURE__ */ E({
  __name: "index",
  setup(U, { expose: f }) {
    let s = ee();
    const [h, { openModal: p }] = Z(), {
      prefixCls: k,
      tableContext: g,
      createMessage: n,
      createConfirm: i
    } = H({
      designScope: "online-cgreport-list",
      pagination: !0,
      tableProps: {
        title: "Online报表",
        api: j,
        rowKey: "id",
        columns: z,
        formConfig: {
          autoSubmitOnEnter: !0,
          showAdvancedButton: !0,
          schemas: G
        }
      }
    }), [u, { reload: b }, { rowSelection: T, selectedRowKeys: w }] = g;
    function x() {
      p(!0, {
        isUpdate: !1,
        showFooter: !0
      });
    }
    function $(t) {
      p(!0, {
        record: t,
        isUpdate: !0,
        showFooter: !0
      });
    }
    function P(t) {
      return L(this, null, function* () {
        yield Y({ id: t.id }, b);
      });
    }
    function A() {
      return L(this, null, function* () {
        yield W({ ids: w.value }, () => {
          b(), w.value = [];
        });
      });
    }
    function D() {
      b();
    }
    function B(t) {
      return [
        {
          label: "编辑",
          onClick: $.bind(null, t)
        }
      ];
    }
    function v(t) {
      return [
        {
          label: "功能测试",
          class: ["low-app-hide"],
          onClick: () => I(t.id)
        },
        {
          label: "配置地址",
          class: ["low-app-hide"],
          onClick: () => O(t)
        },
        {
          label: "删除",
          popConfirm: {
            title: "是否确认删除",
            confirm: P.bind(null, t)
          }
        }
      ];
    }
    function I(t) {
      s.push({ path: "/online/cgreport/" + t });
    }
    function O(t) {
      let y = t.id, l = `/online/cgreport/${y}`, d = `INSERT INTO sys_permission(id, parent_id, name, url, component, component_name, redirect, menu_type, perms, perms_type, sort_no, always_show, icon, is_route, is_leaf, keep_alive, hidden, hide_tab, description, status, del_flag, rule_flag, create_by, create_time, update_by, update_time, internal_or_external) 
                         VALUES ('${te()}', NULL, '${t.name}', '${l}', '1', NULL, NULL, 0, NULL, '1', 0.00, 0, NULL, 0, 1, 0, 0, 0, NULL, '1', 0, 0, 'admin', null, NULL, NULL, 0)`;
      X(y).then((o) => {
        let e = "";
        if (o && o.length > 0)
          for (let _ of o)
            e += _.paramName + "=${" + _.paramName + "}&";
        e.length > 0 && (e = e.substring(0, e.length - 1), l += "?" + e);
      }).catch(() => {
        n.warning("获取参数失败!");
      }).finally(() => {
        i({
          iconType: "info",
          width: 500,
          title: `菜单链接【${t.name}】`,
          content: l,
          closable: !0,
          maskClosable: !0,
          cancelText: "复制SQL",
          okText: "复制URL",
          cancelButtonProps: {
            class: "copy-this-sql",
            "data-clipboard-text": d
          },
          okButtonProps: {
            class: "copy-this-text",
            "data-clipboard-text": l
          },
          onOk() {
            return new Promise((o) => {
              const e = new R(".copy-this-text");
              e.on("success", () => {
                e.destroy(), n.success("复制URL成功"), o();
              }), e.on("error", () => {
                n.error("该浏览器不支持自动复制"), e.destroy(), o();
              });
            });
          },
          onCancel() {
            return new Promise((o) => {
              const e = new R(".copy-this-sql");
              e.on("success", () => {
                e.destroy(), n.success("复制插入菜单SQL成功"), o();
              }), e.on("error", () => {
                n.error("该浏览器不支持自动复制"), e.destroy(), o();
              });
            });
          }
        });
      });
    }
    return f({
      handleAdd: x
    }), (t, y) => {
      const l = m("a-button"), d = m("Icon"), o = m("a-menu-item"), e = m("a-menu"), _ = m("a-dropdown");
      return S(), M("div", null, [
        r(c(K), V({
          onRegister: c(u),
          rowSelection: c(T)
        }, t.$attrs), {
          tableTitle: a(() => [
            r(l, {
              preIcon: "ant-design:plus-outlined",
              type: "primary",
              onClick: x,
              style: { "margin-right": "5px" }
            }, {
              default: a(() => [
                C("录入")
              ]),
              _: 1
            }),
            c(w).length > 0 ? (S(), q(_, { key: 0 }, {
              overlay: a(() => [
                r(e, null, {
                  default: a(() => [
                    r(o, {
                      key: "1",
                      onClick: A
                    }, {
                      default: a(() => [
                        r(d, { icon: "ant-design:delete-outlined" }),
                        C(" 删除 ")
                      ]),
                      _: 1
                    })
                  ]),
                  _: 1
                })
              ]),
              default: a(() => [
                r(l, null, {
                  default: a(() => [
                    C("批量操作 "),
                    r(d, { icon: "mdi:chevron-down" })
                  ]),
                  _: 1
                })
              ]),
              _: 1
            })) : F("", !0)
          ]),
          action: a(({ record: N }) => [
            r(c(Q), {
              actions: B(N),
              dropDownActions: v(N)
            }, null, 8, ["actions", "dropDownActions"])
          ]),
          _: 1
        }, 16, ["onRegister", "rowSelection"]),
        r(J, {
          onRegister: c(h),
          onSuccess: D
        }, null, 8, ["onRegister"])
      ]);
    };
  }
});
export {
  be as default
};
