var ce = Object.defineProperty, ue = Object.defineProperties;
var de = Object.getOwnPropertyDescriptors;
var A = Object.getOwnPropertySymbols;
var pe = Object.prototype.hasOwnProperty, me = Object.prototype.propertyIsEnumerable;
var J = (t, o, l) => o in t ? ce(t, o, { enumerable: !0, configurable: !0, writable: !0, value: l }) : t[o] = l, B = (t, o) => {
  for (var l in o || (o = {}))
    pe.call(o, l) && J(t, l, o[l]);
  if (A)
    for (var l of A(o))
      me.call(o, l) && J(t, l, o[l]);
  return t;
}, U = (t, o) => ue(t, de(o));
var q = (t, o, l) => new Promise((_, m) => {
  var g = (u) => {
    try {
      c(l.next(u));
    } catch (C) {
      m(C);
    }
  }, S = (u) => {
    try {
      c(l.throw(u));
    } catch (C) {
      m(C);
    }
  }, c = (u) => u.done ? _(u.value) : Promise.resolve(u.value).then(g, S);
  c((l = l.apply(t, o)).next());
});
import { defineComponent as fe, ref as P, reactive as z, unref as h, computed as ge, resolveComponent as v, openBlock as F, createBlock as M, mergeProps as he, withCtx as b, createVNode as y, createElementVNode as k, createTextVNode as V } from "vue";
import { useModalInner as be, BasicModal as ye } from "/@/components/Modal";
import { useForm as xe, BasicForm as _e } from "/@/components/Form/index";
import { useJvxeMethod as Se } from "/@/hooks/system/useJvxeMethods.ts";
import { JVxeTypes as i } from "/@/components/jeecg/JVxeTable/types";
import { duplicateCheck as Ce } from "/@/views/system/user/user.api";
import { defHttp as x } from "/@/utils/http/axios";
import { useMessage as K } from "/@/hooks/web/useMessage";
import { usePermissionStore as ve } from "/@/store/modules/permission";
const { createConfirm: ke } = K(), we = "/online/cgreport/param/listByHeadId", Ie = "/online/cgreport/item/listByHeadId", Ye = (t) => x.get({ url: "/online/cgreport/head/list", params: t }), et = (t, o) => x.delete({ url: "/online/cgreport/head/delete", params: t }, { joinParamsToUrl: !0 }).then(() => {
  o();
}), tt = (t, o) => {
  ke({
    title: "确认删除",
    content: "是否删除选中数据",
    okText: "确认",
    cancelText: "取消",
    iconType: "warning",
    onOk: () => x.delete({ url: "/online/cgreport/head/deleteBatch", data: t }, { joinParamsToUrl: !0 }).then(() => {
      o();
    })
  });
}, Pe = (t, o) => o ? x.put({ url: "/online/cgreport/head/editAll", params: t }) : x.post({ url: "/online/cgreport/head/add", params: t }), ot = (t) => x.get({ url: "/online/cgreport/api/getParamsInfo/" + t }), Ve = () => x.get({
  url: "/sys/dataSource/options"
  /* getDataSourceList */
}), Le = (t) => x.get({
  url: "/online/cgreport/head/parseSql?" + t
}), Te = ve(), lt = [
  {
    title: "报表名字",
    align: "center",
    dataIndex: "name",
    width: 120
  },
  {
    title: "报表编码",
    align: "center",
    dataIndex: "code",
    width: 120
  },
  {
    title: "报表SQL",
    align: "center",
    dataIndex: "cgrSql",
    width: 360
  },
  {
    title: "数据源",
    align: "center",
    dataIndex: "dbSource",
    width: 120
  },
  {
    title: "创建时间",
    align: "center",
    dataIndex: "createTime",
    width: 120
  }
], rt = [
  {
    label: "报表名称",
    field: "name",
    component: "JInput"
  },
  {
    label: "报表编码",
    field: "code",
    component: "JInput"
  }
], $e = /^[a-z|A-Z][a-z|A-Z|\d|_|-]{0,}$/, qe = [
  {
    label: "",
    field: "id",
    component: "Input",
    show: !1
  },
  {
    label: "报表编码",
    field: "code",
    component: "Input",
    colProps: {
      sm: 24,
      xs: 24,
      md: 12,
      lg: 8,
      xl: 8,
      xxl: 8
    },
    dynamicRules: ({ values: t, model: o }) => [
      {
        required: !0,
        validator: (l, _) => new Promise((m, g) => {
          if (!_)
            return g("请输入报表编码！");
          if (!$e.test(_))
            return g("编码必须以字母开头，可包含数字、下划线、横杠！");
          let S = {
            tableName: "onl_cgreport_head",
            fieldName: "code",
            fieldVal: _,
            dataId: o.id
          };
          Ce(S).then((c) => {
            c.success ? m() : g("报表编码已存在!");
          }).catch((c) => {
            g(c.message || "校验失败");
          });
        })
      }
    ]
  },
  {
    label: "报表名字",
    field: "name",
    component: "Input",
    colProps: {
      sm: 24,
      xs: 24,
      md: 12,
      lg: 8,
      xl: 8,
      xxl: 8
    },
    dynamicRules: () => [{ required: !0, message: "请输入报表名字!" }]
  },
  {
    label: "动态数据源",
    field: "dbSource",
    colProps: {
      sm: 24,
      xs: 24,
      md: 12,
      lg: 8,
      xl: 8,
      xxl: 8
    },
    component: "ApiSelect",
    rules: [{ required: Te.sysSafeMode, message: "请选择数据源！" }],
    componentProps: {
      api: Ve
    }
  },
  /*    {
        label: ' ',
        field: 'line1',
        component: 'Input',
        slot: 'line1',
        colProps: {
            span: 24
        },
        itemProps:{
            labelCol: { xs: 1, sm: 1 },
            wrapperCol: { xs: 23, sm: 23 },
            colon: false
        },
    },*/
  {
    label: "报表SQL",
    field: "cgrSql",
    component: "JCodeEditor",
    rules: [{ required: !0, message: "请填写报表SQL" }],
    itemProps: {
      labelCol: { xs: 24, sm: 2 },
      wrapperCol: { xs: 24, sm: 22 }
    },
    componentProps: {
      height: "200px",
      fullScreen: !0
    },
    colProps: {
      span: 20
    }
  },
  {
    label: " ",
    field: "analyseButton",
    component: "Input",
    slot: "analyseButton",
    colProps: {
      span: 4
    },
    itemProps: {
      labelCol: { xs: 1, sm: 1 },
      wrapperCol: { xs: 23, sm: 23 },
      colon: !1
    }
  }
], Ne = [
  {
    title: "参数字段",
    key: "paramName",
    type: i.input,
    width: "200px",
    placeholder: "请输入${title}",
    defaultValue: "",
    validateRules: [{ required: !0, message: "${title}不能为空" }]
  },
  {
    title: "参数文本",
    key: "paramTxt",
    type: i.input,
    width: "200px",
    placeholder: "请输入${title}",
    defaultValue: "",
    validateRules: [{ required: !0, message: "${title}不能为空" }]
  },
  {
    title: "参数默认值",
    key: "paramValue",
    type: i.input,
    width: "200px",
    placeholder: "请输入${title}",
    defaultValue: ""
  }
], Re = [
  {
    title: "字段名字",
    key: "fieldName",
    type: i.input,
    minWidth: "150px",
    placeholder: "请输入${title}",
    defaultValue: "",
    validateRules: [{ required: !0, message: "${title}不能为空" }]
  },
  {
    title: "字段文本",
    key: "fieldTxt",
    type: i.input,
    minWidth: "150px",
    placeholder: "请输入${title}",
    defaultValue: "",
    validateRules: [{ required: !0, message: "${title}不能为空" }]
  },
  {
    title: "字段类型",
    key: "fieldType",
    minWidth: "150px",
    placeholder: "请输入${title}",
    defaultValue: "",
    validateRules: [{ required: !0, message: "${title}不能为空" }],
    type: i.select,
    options: [
      { title: "数值类型", value: "Integer" },
      { title: "字符类型", value: "String" },
      { title: "日期类型", value: "Date" },
      { title: "时间类型", value: "Datetime" },
      { title: "长整型", value: "Long" }
    ]
  },
  {
    title: "是否显示",
    key: "isShow",
    minWidth: "80px",
    align: "center",
    type: i.checkbox,
    customValue: [1, 0],
    defaultChecked: !0
  },
  {
    title: "字段href",
    key: "fieldHref",
    type: i.input,
    minWidth: "150px",
    placeholder: "请输入${title}",
    defaultValue: ""
  },
  {
    title: "查询模式",
    key: "searchMode",
    type: i.select,
    minWidth: "150px",
    placeholder: "请选择${title}",
    options: [
      { title: "单条件查询", value: "single" },
      { title: "范围查询", value: "group" }
    ]
  },
  {
    title: "取值表达式",
    key: "replaceVal",
    type: i.input,
    minWidth: "150px",
    placeholder: "请输入${title}",
    defaultValue: ""
  },
  {
    title: "字典code",
    key: "dictCode",
    type: i.input,
    minWidth: "150px",
    placeholder: "请输入${title}",
    defaultValue: ""
  },
  {
    title: "分组标题",
    key: "groupTitle",
    type: i.input,
    minWidth: "150px",
    placeholder: "请输入${title}",
    defaultValue: ""
  },
  {
    title: "是否查询",
    key: "isSearch",
    type: i.checkbox,
    customValue: ["1", "0"],
    minWidth: "80px",
    align: "center",
    defaultChecked: !1
  },
  {
    title: "是否合计",
    align: "center",
    key: "isTotal",
    type: i.checkbox,
    customValue: ["1", "0"],
    minWidth: "80px",
    defaultChecked: !1
  }
], De = { style: { flex: "1", "text-align": "left" } }, Be = /* @__PURE__ */ k("br", null, null, -1), Fe = /* @__PURE__ */ k("br", null, null, -1), Me = /* @__PURE__ */ k("br", null, null, -1), We = /* @__PURE__ */ k("br", null, null, -1), Oe = /* @__PURE__ */ k("br", null, null, -1), Ae = /* @__PURE__ */ k("span", { style: { color: "red" } }, "注：参数只支持动态报表，popup暂不支持", -1), at = /* @__PURE__ */ fe({
  __name: "CgreportModal",
  emits: ["register", "success"],
  setup(t, { emit: o }) {
    const { createMessage: l } = K(), _ = o, m = P(!0), g = P(!0), S = P(["onlCgreportItem", "onlCgreportParam"]), c = P("onlCgreportItem"), u = P(), C = P(), Q = { onlCgreportItem: C, onlCgreportParam: u }, w = z({
      loading: !1,
      dataSource: [],
      columns: Ne
    }), I = z({
      loading: !1,
      dataSource: [],
      columns: Re
    }), [H, { setProps: j, resetFields: E, setFieldsValue: Z, validate: Je, validateFields: G }] = xe({
      // labelWidth: 150,
      schemas: qe,
      showActionButtonGroup: !1
    }), [X, { setModalProps: L, closeModal: Y }] = be((e) => q(this, null, function* () {
      var r, a;
      yield re(), L({ confirmLoading: !1, showCancelBtn: e == null ? void 0 : e.showFooter, showOkBtn: e == null ? void 0 : e.showFooter }), m.value = !!(e != null && e.isUpdate), h(m) && (yield Z(B({}, e.record)), W(we, { headId: (r = e == null ? void 0 : e.record) == null ? void 0 : r.id }, w), W(Ie, { headId: (a = e == null ? void 0 : e.record) == null ? void 0 : a.id }, I)), j({ disabled: !(e != null && e.showFooter) });
    })), [ee, te, W, oe] = Se(
      ne,
      ae,
      Q,
      c,
      S
    ), le = ge(() => h(m) ? "编辑" : "新增");
    function re() {
      return q(this, null, function* () {
        yield E(), c.value = "onlCgreportItem", w.dataSource = [], I.dataSource = [];
      });
    }
    function ae(e) {
      let r = Object.assign({}, e.formValue);
      return U(B({}, r), {
        // 展开
        onlCgreportParamList: e.tablesValue[1].tableData,
        onlCgreportItemList: e.tablesValue[0].tableData
      });
    }
    function ne(e) {
      return q(this, null, function* () {
        try {
          L({ confirmLoading: !0 });
          let r = [], a = [], s = {};
          Object.keys(e).map((n) => {
            n == "onlCgreportItemList" ? a = e[n] : n == "onlCgreportParamList" ? r = e[n] : s[n] = e[n];
          }), yield Pe({ head: s, params: r, items: a }, m.value), Y(), _("success");
        } finally {
          L({ confirmLoading: !1 });
        }
      });
    }
    function ie() {
      L({ confirmLoading: !0 }), G(["cgrSql", "dbSource"]).then((e) => {
        let { cgrSql: r, dbSource: a } = e, s = "sql=" + encodeURIComponent(r);
        a && (s += "&dbKey=" + a), Le(s).then((d) => {
          if (d) {
            l.success("解析成功");
            let { fields: n, params: p } = d, f = n.filter(($) => $.fieldName != "__row_number__"), N = C.value.getTableData(), T = O(N, f || [], "fieldName");
            T = T.sort(($, D) => $.orderNum - D.orderNum), I.dataSource = T;
            let se = u.value.getTableData(), R = O(se, p || [], "paramName");
            R = R.sort(($, D) => $.orderNum - D.orderNum), w.dataSource = R;
          }
        });
      }).catch(() => {
      }).finally(() => {
        L({ confirmLoading: !1 });
      });
    }
    function O(e, r, a) {
      if (e.length > 0) {
        let s = [], d = [], n = 1;
        for (let p of r)
          for (let f of e)
            if (f[a] == p[a]) {
              s.push(f), d.push(p[a]), f.orderNum > n && (n = f.orderNum);
              break;
            }
        for (let p of r)
          d.indexOf(p[a]) < 0 && (p.orderNum = ++n, s.push(p));
        return s;
      } else {
        let s = 0;
        for (let d of r)
          d.orderNum || (d.orderNum = ++s);
        return r;
      }
    }
    return (e, r) => {
      const a = v("a-icon"), s = v("a-popover"), d = v("a-button"), n = v("a-divider"), p = v("JVxeTable"), f = v("a-tab-pane"), N = v("a-tabs");
      return F(), M(h(ye), he(e.$attrs, {
        onRegister: h(X),
        title: le.value,
        width: 1200,
        maskClosable: !1,
        defaultFullscreen: !0,
        confirmLoading: g.value,
        onOk: h(te)
      }), {
        default: b(() => [
          y(h(_e), {
            onRegister: h(H),
            ref_key: "formRef",
            ref: oe
          }, {
            analyseButton: b(() => [
              k("div", De, [
                y(s, {
                  title: "使用指南",
                  trigger: "hover",
                  style: { margin: "0 10px 0 6px" }
                }, {
                  content: b(() => [
                    V(" 您可以键入“”作为一个参数，这里abc是参数的名称。例如："),
                    Be,
                    V(" select * from table where id = ${abc}。"),
                    Fe,
                    V(" select * from table where id like concat('%',${abc},'%')。(mysql模糊查询)"),
                    Me,
                    V(" select * from table where id like '%'||${abc}||'%'。(oracle模糊查询)"),
                    We,
                    V(" select * from table where id like '%'+${abc}+'%'。(sqlserver模糊查询)"),
                    Oe,
                    Ae
                  ]),
                  default: b(() => [
                    y(a, { type: "question-circle" })
                  ]),
                  _: 1
                }),
                y(d, {
                  style: { "margin-left": "10px" },
                  type: "primary",
                  onClick: ie
                }, {
                  default: b(() => [
                    V("SQL解析")
                  ]),
                  _: 1
                })
              ])
            ]),
            _: 1
          }, 8, ["onRegister"]),
          y(n, {
            style: { margin: "1px 0" },
            class: "cust-divider"
          }),
          y(N, {
            activeKey: c.value,
            "onUpdate:activeKey": r[0] || (r[0] = (T) => c.value = T),
            animated: "",
            onChange: h(ee)
          }, {
            default: b(() => [
              (F(), M(f, {
                tab: "动态报表配置明细",
                key: S.value[0],
                forceRender: !0
              }, {
                default: b(() => [
                  y(p, {
                    "keep-source": "",
                    dragSort: "",
                    resizable: "",
                    ref_key: "onlCgreportItem",
                    ref: C,
                    loading: I.loading,
                    columns: I.columns,
                    dataSource: I.dataSource,
                    height: 390,
                    rowNumber: !0,
                    rowSelection: !0,
                    toolbar: !0
                  }, null, 8, ["loading", "columns", "dataSource"])
                ]),
                _: 1
              })),
              (F(), M(f, {
                tab: "报表参数",
                key: S.value[1],
                forceRender: !0
              }, {
                default: b(() => [
                  y(p, {
                    "keep-source": "",
                    resizable: "",
                    dragSort: "",
                    ref_key: "onlCgreportParam",
                    ref: u,
                    loading: w.loading,
                    columns: w.columns,
                    dataSource: w.dataSource,
                    height: 390,
                    rowNumber: !0,
                    rowSelection: !0,
                    toolbar: !0
                  }, null, 8, ["loading", "columns", "dataSource"])
                ]),
                _: 1
              }))
            ]),
            _: 1
          }, 8, ["activeKey", "onChange"])
        ]),
        _: 1
      }, 16, ["onRegister", "title", "confirmLoading", "onOk"]);
    };
  }
});
export {
  at as _,
  tt as b,
  lt as c,
  et as d,
  ot as g,
  Ye as l,
  rt as s
};
