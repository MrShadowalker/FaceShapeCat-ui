var u = (e, r, o) => new Promise((p, s) => {
  var l = (t) => {
    try {
      n(o.next(t));
    } catch (a) {
      s(a);
    }
  }, i = (t) => {
    try {
      n(o.throw(t));
    } catch (a) {
      s(a);
    }
  }, n = (t) => t.done ? p(t.value) : Promise.resolve(t.value).then(l, i);
  n((o = o.apply(e, r)).next());
});
import S from "./OnlineForm-1fa2d893.mjs";
import { defineComponent as k, ref as m, watch as T, nextTick as w, resolveComponent as f, openBlock as h, createElementBlock as y, createVNode as _, withCtx as g, createTextVNode as N, createCommentVNode as C } from "vue";
import { defHttp as P } from "/@/utils/http/axios";
import { g as b } from "./useExtendComponent-325fe3f1.mjs";
import { _ as R } from "./index-0e3ab3af.mjs";
import "/@/hooks/web/useMessage";
import "/@/components/Form/index";
import "lodash-es";
import "/@/utils";
import "/@/components/Loading";
import "/@/components/jeecg/JVxeTable/types";
import "/@/utils/auth";
import "@ant-design/icons-vue";
import "/@/hooks/core/useContext";
import "/@/utils/mitt";
import "/@/components/Modal";
import "./useCustomHook-acb00837.mjs";
import "/@/utils/cache";
import "/@/utils/common/compUtils";
import "/@/store/modules/user";
import "./constant-754f1a9d.mjs";
import "/@/components/Form/src/componentMap";
import "/@/utils/propTypes";
import "/@/components/Form/src/jeecg/components/JUpload";
import "/@/views/system/user/user.api";
import "/@/utils/desform/customExpression";
import "/@/store/modules/permission";
import "/@/utils/dict/JDictSelectUtil";
import "/@/components/Table";
import "/@/hooks/system/useListPage";
import "vue-router";
import "/@/components/Form/src/utils/Area";
import "/@/components/Preview/index";
import "./LinkTableListPiece-8499a318.mjs";
import "./OnlineSelectCascade-4265c95d.mjs";
import "./JModalTip-33c7dc44.mjs";
import "/@/hooks/web/useAppInject";
import "ant-design-vue";
import "@vueuse/core";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
const L = k({
  name: "ProcessOnlineForm",
  inheritAttrs: !1,
  components: {
    OnlineForm: S
  },
  props: {
    dataId: {
      type: String,
      default: ""
    },
    tableName: {
      type: String,
      default: ""
    },
    taskId: {
      type: String,
      default: ""
    },
    disabled: {
      type: Boolean,
      default: !1
    }
  },
  setup(e) {
    const r = m(), o = m(""), p = m(1), s = m(!1), l = m(""), i = m(!1);
    T(
      () => e.tableName,
      (c) => {
        c && n();
      },
      { immediate: !0 }
    );
    function n() {
      return u(this, null, function* () {
        i.value = !0;
        const c = `/online/cgform/api/getFormItemBytbname/${e.tableName}`, I = { taskId: e.taskId };
        try {
          let d = yield P.get({ url: c, params: I });
          o.value = d.head.id, p.value = Number(d.head.formTemplate || 1), s.value = d.head.isTree === "Y", l.value = d.head.treeParentIdField || "", yield w(() => u(this, null, function* () {
            (yield b(r)).createRootProperties(d);
          }));
        } catch (d) {
        }
      });
    }
    function t() {
      return u(this, null, function* () {
        let c = yield b(r);
        i.value = !1, c.show(!0, {
          id: e.dataId
        });
      });
    }
    const a = m(!1);
    function F() {
      return u(this, null, function* () {
        a.value = !0, r.value.handleSubmit();
      });
    }
    function v() {
      a.value = !1;
    }
    return {
      onlineFormCompRef: r,
      formId: o,
      formTemplate: p,
      isTreeForm: s,
      pidFieldName: l,
      renderSuccess: t,
      handleSuccess: v,
      handleSubmit: F,
      buttonLoading: a,
      spinLoading: i
    };
  }
}), $ = { class: "cust-onl-form" }, B = {
  key: 0,
  style: { width: "100%", "text-align": "center", "margin-top": "5px" }
};
function O(e, r, o, p, s, l) {
  const i = f("a-button"), n = f("online-form"), t = f("a-spin");
  return h(), y("div", $, [
    _(t, { spinning: e.spinLoading }, {
      default: g(() => [
        _(n, {
          ref: "onlineFormCompRef",
          id: e.formId,
          disabled: e.disabled,
          "form-template": e.formTemplate,
          isTree: e.isTreeForm,
          pidField: e.pidFieldName,
          onRendered: e.renderSuccess,
          onSuccess: e.handleSuccess
        }, {
          bottom: g(() => [
            !e.disabled && !e.spinLoading ? (h(), y("div", B, [
              _(i, {
                preIcon: "ant-design:check",
                style: { width: "126px" },
                type: "primary",
                onClick: e.handleSubmit,
                loading: e.buttonLoading
              }, {
                default: g(() => [
                  N(" 提 交 ")
                ]),
                _: 1
              }, 8, ["onClick", "loading"])
            ])) : C("", !0)
          ]),
          _: 1
        }, 8, ["id", "disabled", "form-template", "isTree", "pidField", "onRendered", "onSuccess"])
      ]),
      _: 1
    }, 8, ["spinning"])
  ]);
}
const Se = /* @__PURE__ */ R(L, [["render", O], ["__scopeId", "data-v-530d8f91"]]);
export {
  Se as default
};
