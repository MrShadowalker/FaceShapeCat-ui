var B = (e, T, m) => new Promise((i, k) => {
  var y = (s) => {
    try {
      r(m.next(s));
    } catch (h) {
      k(h);
    }
  }, c = (s) => {
    try {
      r(m.throw(s));
    } catch (h) {
      k(h);
    }
  }, r = (s) => s.done ? i(s.value) : Promise.resolve(s.value).then(y, c);
  r((m = m.apply(e, T)).next());
});
import { BasicTable as Je, TableAction as He } from "/@/components/Table";
import { useMessage as Ke } from "/@/hooks/web/useMessage";
import Pe from "./OnlineAutoModal-510991eb.mjs";
import qe from "./OnlineDetailModal-9675390d.mjs";
import Ne from "./OnlineCustomModal-518ad33c.mjs";
import { ref as K, watch as Ve, resolveComponent as d, openBlock as l, createElementBlock as S, createVNode as f, createBlock as p, normalizeClass as ze, withCtx as a, createTextVNode as C, createCommentVNode as g, Fragment as P, renderList as je, toDisplayString as E, withDirectives as Ue, vShow as We, createElementVNode as _, mergeProps as Ge, toHandlers as Xe, resolveDynamicComponent as Ye, normalizeProps as Ze, guardReactiveProps as xe } from "vue";
import eo from "/@/components/Form/src/jeecg/components/JImportModal.vue";
import { u as oo, a as no } from "./useListButton-cdbab702.mjs";
import { u as to, a as io, g as lo } from "./useExtendComponent-325fe3f1.mjs";
import { defHttp as ao } from "/@/utils/http/axios";
import ro from "./OnlineQueryForm-1bfc8320.mjs";
import so from "./SuperQuery-5d1ca957.mjs";
import { a as q } from "./constant-754f1a9d.mjs";
import { _ as uo } from "./index-0e3ab3af.mjs";
import "/@/components/Modal";
import "./OnlineForm-1fa2d893.mjs";
import "/@/components/Form/index";
import "lodash-es";
import "/@/utils";
import "/@/components/Loading";
import "/@/components/jeecg/JVxeTable/types";
import "/@/utils/auth";
import "@ant-design/icons-vue";
import "/@/hooks/core/useContext";
import "/@/utils/mitt";
import "./useCustomHook-acb00837.mjs";
import "/@/utils/cache";
import "/@/utils/common/compUtils";
import "/@/store/modules/user";
import "/@/components/jeecg/comment/CommentPanel.vue";
import "./OnlineFormDetail-0e7294ca.mjs";
import "./DetailForm-424638eb.mjs";
import "/@/utils/propTypes";
import "/@/utils/dict";
import "/@/utils/dict/JDictSelectUtil";
import "/@/utils/dict/index";
import "/@/api/common/api";
import "/@/components/Form/src/utils/Area";
import "/@/components/Preview/index";
import "/@/components/Markdown";
import "./OnlineSubFormDetail-f0d2c016.mjs";
import "vue-router";
import "/@/router";
import "/@/hooks/core/onMountedOrActivated";
import "/@/store/modules/multipleTab";
import "./cgformState-d9f8ec42.mjs";
import "pinia";
import "/@/store";
import "ant-design-vue";
import "/@/hooks/system/useMethods";
import "/@/components/Form/src/componentMap";
import "/@/components/Form/src/jeecg/components/JUpload";
import "/@/views/system/user/user.api";
import "/@/utils/desform/customExpression";
import "/@/store/modules/permission";
import "/@/hooks/system/useListPage";
import "./LinkTableListPiece-8499a318.mjs";
import "./OnlineSelectCascade-4265c95d.mjs";
import "./JModalTip-33c7dc44.mjs";
import "/@/hooks/web/useAppInject";
import "@vueuse/core";
import "./SuperQueryValComponent.vue_vue_type_script_lang-e9196096.mjs";
import "/@/utils/is";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
const po = {
  name: "DefaultOnlineList",
  components: {
    BasicTable: Je,
    TableAction: He,
    OnlineAutoModal: Pe,
    JImportModal: eo,
    OnlineQueryForm: ro,
    OnlineSuperQuery: so,
    OnlineCustomModal: Ne,
    OnlineDetailModal: qe
  },
  setup() {
    const { createMessage: e } = Ke(), T = K(), {
      ID: m,
      onlineTableContext: i,
      onlineQueryFormOuter: k,
      loading: y,
      reload: c,
      dataSource: r,
      pagination: s,
      handleSpecialConfig: h,
      getColumnList: D,
      handleChangeInTable: v,
      loadData: A,
      superQueryButtonRef: R,
      superQueryStatus: L,
      handleSuperQuery: O,
      registerCustomModal: o,
      getTreeDataByResult: w,
      expandedRowKeys: u,
      handleExpandedRowsChange: N,
      tableReloading: V,
      onlineExtConfigJson: Q,
      handleFormConfig: z
    } = oo();
    if (!m.value)
      throw e.warning("地址错误, 配置ID不存在!"), new Error("地址错误, 配置ID不存在!");
    i.isTree(!0);
    let { initCgEnhanceJs: j } = to(i);
    const {
      buttonSwitch: U,
      cgLinkButtonList: W,
      cgTopButtonList: G,
      importUrl: X,
      registerModal: Y,
      handleAdd: $,
      handleEdit: Z,
      handleBatchDelete: x,
      registerImportModal: ee,
      onImportExcel: oe,
      onExportExcel: ne,
      cgButtonJsHandler: te,
      cgButtonActionHandler: ie,
      cgButtonLinkHandler: le,
      handleSubmitFlow: ae,
      getDropDownActions: re,
      getActions: se,
      initButtonList: ue,
      initButtonSwitch: de,
      registerDetailModal: pe
    } = no(i, Q), {
      columns: me,
      actionColumn: ce,
      selectedKeys: ge,
      rowSelection: he,
      enableScrollBar: fe,
      tableScroll: Ce,
      downloadRowFile: ye,
      getImgView: we,
      getPcaText: be,
      getFormatDate: Se,
      handleColumnResult: Te,
      hrefComponent: ke,
      viewOnlineCellImage: Re
    } = io(i, Q);
    Ve(
      m,
      () => {
        Fe();
      },
      { immediate: !0 }
    );
    function Fe() {
      return B(this, null, function* () {
        y.value = !0;
        let n = yield D(q);
        Ie(n), yield A(), y.value = !1, i.execButtonEnhance("setup");
      });
    }
    function Ie(n) {
      let t = j(n.enhanceJs);
      i.EnhanceJS = t, ue(n.cgButtonList), de(n.hideColumns), Te(n), h(n), i.hasChildrenField = n.hasChildrenField, i.pidField = n.pidField;
    }
    function Be(n, t) {
      i.queryParam = n, t === !0 ? c({ mode: "search" }) : J();
    }
    function Ee(n) {
      return B(this, null, function* () {
        yield lo(R), R.value.init(n);
      });
    }
    function De(n, t) {
      let b = u.value;
      if (n) {
        if (ve(t.id), t.children.length > 0 && t.children[0].isLoading === !0) {
          let F = i.hasChildrenField;
          const { sortField: _e, sortType: Qe } = i;
          let M = Object.assign({}, { column: _e, order: Qe });
          M[i.pidField] = t.id, M[F] = t[F];
          let $e = `${i.onlineUrl.getTreeData}${i.ID}`;
          ao.get({ url: $e, params: M }, { isTransformResponse: !1 }).then((I) => {
            I.success ? Number(I.result.total) > 0 ? t.children = w(I.result.records) : (t.children = "", t.hasChildrenField = "0") : e.warning(I.message);
          }).catch(() => {
            e.warning("加载子节点失败!");
          });
        }
      } else {
        let F = b.indexOf(t.id);
        F >= 0 && (u.value = b.splice(F, 1));
      }
    }
    function ve(n) {
      let t = u.value;
      t && t.indexOf(n) < 0 && t.push(n), u.value = t;
    }
    function J() {
      return B(this, null, function* () {
        i.isTree() === !0 && (u.value = [], T.value.collapseAll()), c();
      });
    }
    function Ae(n) {
      if (H.value === !0) {
        let t = n[i.pidField];
        if (t) {
          let b = u.value;
          b.indexOf(t) < 0 && b.push(t), u.value = b;
        }
      }
      c();
    }
    const Le = (n) => ({
      label: "添加下级",
      onClick: Oe.bind(null, n)
    }), H = K(!1);
    function Oe(n) {
      H.value = !0;
      let t = {
        [i.pidField]: n.id
      };
      $(t);
    }
    function Me(n) {
      let t = re(n, { themeTemplate: q });
      return t.unshift(Le(n)), t;
    }
    return {
      ID: m,
      // 查询区域
      onlineQueryFormOuter: k,
      queryWithCondition: Be,
      onQueryFormLoaded: Ee,
      reload: c,
      //高级查询
      superQueryButtonRef: R,
      superQueryStatus: L,
      handleSuperQuery: O,
      // table区域
      loading: y,
      columns: me,
      actionColumn: ce,
      dataSource: r,
      pagination: s,
      rowSelection: he,
      selectedKeys: ge,
      tableScroll: Ce,
      enableScrollBar: fe,
      handleChangeInTable: v,
      //按钮
      buttonSwitch: U,
      handleAdd: $,
      handleEdit: Z,
      onImportExcel: oe,
      onExportExcel: ne,
      cgTopButtonList: G,
      cgLinkButtonList: W,
      cgButtonJsHandler: te,
      cgButtonActionHandler: ie,
      cgButtonLinkHandler: le,
      handleBatchDelete: x,
      // table-slot
      downloadRowFile: ye,
      getImgView: we,
      getPcaText: be,
      getFormatDate: Se,
      // 操作列
      getActions: se,
      getTreeDropDownActions: Me,
      // 弹窗
      registerModal: Y,
      registerCustomModal: o,
      registerImportModal: ee,
      importUrl: X,
      handleFormConfig: z,
      //其他
      tableReloading: V,
      handleSubmitFlow: ae,
      hrefComponent: ke,
      viewOnlineCellImage: Re,
      //树特定的配置
      onlineTreeTableRef: T,
      handlerFormSuccess: Ae,
      searchReset: J,
      handleExpand: De,
      expandedRowKeys: u,
      handleExpandedRowsChange: N,
      registerDetailModal: pe
    };
  }
  // 1引入了loadsh   console.log(that.simpleDateFormat(new Date().getTime(),'yyyy-MM-dd'));
  // 2. value的问题
  // 3. 变量位置改变后需要 重写api
  // 1添加按钮的时候 预留出样式对象 然后js增强中设置样式对象
  // 2直接设置css字符串 然后通过js document 往head里面增加css片段 全局生效
  // TODO 清空高级查询
  // TODO 积木报表打印地址
  // const reportPrintUrl = ref('')
};
const mo = { class: "p-2" }, co = {
  key: 0,
  style: { "font-size": "12px", "font-style": "italic" }
}, go = {
  key: 0,
  style: { "font-size": "12px", "font-style": "italic" }
}, ho = ["src", "onClick"], fo = ["innerHTML"], Co = ["title"];
function yo(e, T, m, i, k, y) {
  const c = d("online-query-form"), r = d("a-button"), s = d("online-super-query"), h = d("TableAction"), D = d("BasicTable"), v = d("OnlineAutoModal"), A = d("JImportModal"), R = d("a-modal"), L = d("online-custom-modal"), O = d("online-detail-modal");
  return l(), S("div", mo, [
    f(c, {
      ref: "onlineQueryFormOuter",
      id: e.ID,
      onSearch: e.queryWithCondition,
      onLoaded: e.onQueryFormLoaded
    }, null, 8, ["id", "onSearch", "onLoaded"]),
    e.tableReloading ? g("", !0) : (l(), p(D, {
      key: 0,
      ref: "onlineTreeTableRef",
      isTreeTable: !0,
      expandedRowKeys: e.expandedRowKeys,
      onExpandedRowsChange: e.handleExpandedRowsChange,
      onExpand: e.handleExpand,
      rowKey: "jeecg_row_key",
      canResize: !0,
      bordered: !0,
      showIndexColumn: !1,
      loading: e.loading,
      columns: e.columns,
      dataSource: e.dataSource,
      pagination: e.pagination,
      rowSelection: e.rowSelection,
      actionColumn: e.actionColumn,
      showTableSetting: !0,
      clickToRowSelect: !1,
      scroll: e.tableScroll,
      onTableRedo: e.reload,
      class: ze({ "j-table-force-nowrap": e.enableScrollBar }),
      onChange: e.handleChangeInTable
    }, {
      tableTitle: a(() => [
        e.buttonSwitch.add ? (l(), p(r, {
          key: 0,
          preIcon: "ant-design:plus-outlined",
          type: "primary",
          onClick: e.handleAdd
        }, {
          default: a(() => [
            C("新增")
          ]),
          _: 1
        }, 8, ["onClick"])) : g("", !0),
        e.buttonSwitch.import ? (l(), p(r, {
          key: 1,
          preIcon: "ant-design:import-outlined",
          type: "primary",
          onClick: e.onImportExcel
        }, {
          default: a(() => [
            C("导入")
          ]),
          _: 1
        }, 8, ["onClick"])) : g("", !0),
        e.buttonSwitch.export ? (l(), p(r, {
          key: 2,
          preIcon: "ant-design:export-outlined",
          type: "primary",
          onClick: e.onExportExcel
        }, {
          default: a(() => [
            C(" 导出")
          ]),
          _: 1
        }, 8, ["onClick"])) : g("", !0),
        e.cgTopButtonList && e.cgTopButtonList.length > 0 ? (l(!0), S(P, { key: 3 }, je(e.cgTopButtonList, (o, w) => (l(), S(P, null, [
          o.optType == "js" ? (l(), p(r, {
            key: "cgbtn" + w,
            onClick: (u) => e.cgButtonJsHandler(o.buttonCode),
            type: "primary",
            preIcon: o.buttonIcon ? "ant-design:" + o.buttonIcon : ""
          }, {
            default: a(() => [
              C(E(o.buttonName), 1)
            ]),
            _: 2
          }, 1032, ["onClick", "preIcon"])) : o.optType == "action" ? (l(), p(r, {
            key: "cgbtn" + w,
            onClick: (u) => e.cgButtonActionHandler(o.buttonCode),
            type: "primary",
            preIcon: o.buttonIcon ? "ant-design:" + o.buttonIcon : ""
          }, {
            default: a(() => [
              C(E(o.buttonName), 1)
            ]),
            _: 2
          }, 1032, ["onClick", "preIcon"])) : g("", !0)
        ], 64))), 256)) : g("", !0),
        e.buttonSwitch.batch_delete ? Ue((l(), p(r, {
          key: 4,
          preIcon: "ant-design:delete-outlined",
          onClick: e.handleBatchDelete
        }, {
          default: a(() => [
            C(" 批量删除")
          ]),
          _: 1
        }, 8, ["onClick"])), [
          [We, e.selectedKeys.length > 0]
        ]) : g("", !0),
        e.buttonSwitch.super_query ? (l(), p(s, {
          key: 5,
          ref: "superQueryButtonRef",
          online: "",
          status: e.superQueryStatus,
          onSearch: e.handleSuperQuery
        }, null, 8, ["status", "onSearch"])) : g("", !0)
      ]),
      fileSlot: a(({ text: o }) => [
        o ? (l(), p(r, {
          key: 1,
          ghost: !0,
          type: "primary",
          preIcon: "ant-design:download",
          size: "small",
          onClick: (w) => e.downloadRowFile(o)
        }, {
          default: a(() => [
            C(" 下载 ")
          ]),
          _: 2
        }, 1032, ["onClick"])) : (l(), S("span", co, "无文件"))
      ]),
      imgSlot: a(({ text: o }) => [
        o ? (l(), S("img", {
          key: 1,
          src: e.getImgView(o),
          alt: "图片不存在",
          class: "online-cell-image",
          onClick: (w) => e.viewOnlineCellImage(o)
        }, null, 8, ho)) : (l(), S("span", go, "无图片"))
      ]),
      htmlSlot: a(({ text: o }) => [
        _("div", { innerHTML: o }, null, 8, fo)
      ]),
      pcaSlot: a(({ text: o }) => [
        _("div", {
          title: e.getPcaText(o)
        }, E(e.getPcaText(o)), 9, Co)
      ]),
      dateSlot: a(({ text: o }) => [
        _("span", null, E(e.getFormatDate(o)), 1)
      ]),
      action: a(({ record: o }) => [
        f(h, {
          actions: e.getActions(o),
          dropDownActions: e.getTreeDropDownActions(o)
        }, null, 8, ["actions", "dropDownActions"])
      ]),
      _: 1
    }, 8, ["expandedRowKeys", "onExpandedRowsChange", "onExpand", "loading", "columns", "dataSource", "pagination", "rowSelection", "actionColumn", "scroll", "onTableRedo", "class", "onChange"])),
    f(v, {
      id: e.ID,
      onRegister: e.registerModal,
      onSuccess: e.handlerFormSuccess,
      onFormConfig: e.handleFormConfig
    }, null, 8, ["id", "onRegister", "onSuccess", "onFormConfig"]),
    f(A, {
      onRegister: e.registerImportModal,
      url: e.importUrl(),
      onOk: e.reload,
      online: ""
    }, null, 8, ["onRegister", "url", "onOk"]),
    f(R, Ge(e.hrefComponent.model, Xe(e.hrefComponent.on)), {
      default: a(() => [
        (l(), p(Ye(e.hrefComponent.is), Ze(xe(e.hrefComponent.params)), null, 16))
      ]),
      _: 1
    }, 16),
    f(L, {
      onRegister: e.registerCustomModal,
      onSuccess: e.reload
    }, null, 8, ["onRegister", "onSuccess"]),
    f(O, {
      id: e.ID,
      onRegister: e.registerDetailModal
    }, null, 8, ["id", "onRegister"])
  ]);
}
const Ln = /* @__PURE__ */ uo(po, [["render", yo]]);
export {
  Ln as default
};
