var Ue = Object.defineProperty, Ve = Object.defineProperties;
var He = Object.getOwnPropertyDescriptors;
var ae = Object.getOwnPropertySymbols;
var Ge = Object.prototype.hasOwnProperty, Ye = Object.prototype.propertyIsEnumerable;
var te = (a, n, d) => n in a ? Ue(a, n, { enumerable: !0, configurable: !0, writable: !0, value: d }) : a[n] = d, E = (a, n) => {
  for (var d in n || (n = {}))
    Ge.call(n, d) && te(a, d, n[d]);
  if (ae)
    for (var d of ae(n))
      Ye.call(n, d) && te(a, d, n[d]);
  return a;
}, le = (a, n) => Ve(a, He(n));
var F = (a, n, d) => new Promise((B, h) => {
  var m = (p) => {
    try {
      C(d.next(p));
    } catch (T) {
      h(T);
    }
  }, D = (p) => {
    try {
      C(d.throw(p));
    } catch (T) {
      h(T);
    }
  }, C = (p) => p.done ? B(p.value) : Promise.resolve(p.value).then(m, D);
  C((d = d.apply(a, n)).next());
});
import { defineComponent as ze, ref as y, computed as ne, provide as oe, reactive as We, nextTick as G, toRaw as Xe, resolveComponent as b, openBlock as A, createBlock as Y, mergeProps as Ze, withCtx as f, createVNode as s, createTextVNode as R, createElementBlock as ie, Fragment as ea, renderList as aa, toDisplayString as ta, createCommentVNode as se, createElementVNode as re } from "vue";
import { Icon as la } from "/@/components/Icon";
import { BasicModal as na, useModalInner as oa, useModal as ia } from "/@/components/Modal";
import { BasicForm as sa, useForm as ra } from "/@/components/Form/index";
import { useMessage as ua } from "/@/hooks/web/useMessage";
import { u as da } from "./useSchemas-0433a403.mjs";
import ca from "./DBAttributeTable-370de07b.mjs";
import fa from "./PageAttributeTable-965dc58e.mjs";
import ba from "./CheckDictTable-134cbb83.mjs";
import ma from "./ForeignKeyTable-6a843c4b.mjs";
import pa from "./IndexTable-f8af9d44.mjs";
import Ta from "./QueryTable-eb9a5b21.mjs";
import ga from "./ExtendConfigModal-1dde390a.mjs";
import { u as ya, E as va, a as ha, V as O } from "./cgform.data-cbdd88c3.mjs";
import { defHttp as v } from "/@/utils/http/axios";
import { simpleDebounce as Ca } from "/@/utils/common/compUtils";
import { u as Fa } from "./useOnlineTest-e4bd8be3.mjs";
import { buildUUID as Da } from "/@/utils/uuid";
import { sleep as P } from "/@/utils";
import { g as ka } from "./useExtendComponent-325fe3f1.mjs";
import { _ as Ra } from "./index-0e3ab3af.mjs";
const et = (a) => v.get({ url: "/online/cgform/head/list", params: a }), at = (a) => ue(a, 0), tt = (a) => v.delete(
  { url: "/online/cgform/head/removeRecord", params: { id: a } },
  { joinParamsToUrl: !0 }
), lt = (a) => ue(a, 1), nt = (a) => v.delete(
  { url: "/online/cgform/head/delete", params: { id: a } },
  { joinParamsToUrl: !0 }
);
function ue(a, n) {
  return v.delete(
    {
      url: "/online/cgform/head/deleteBatch",
      params: {
        ids: a.join(","),
        flag: n
      }
    },
    { joinParamsToUrl: !0 }
  );
}
const ot = (a, n) => v.post({ url: `/online/cgform/api/doDbSynch/${a}/${n}`, timeout: 12e3, timeoutErrorMessage: "同步数据库超时，已自动刷新" }), it = (a) => v.post({ url: `/online/cgform/head/copyOnline?code=${a}` }), st = (a, n, d) => v.get({ url: `/online/cgform/head/copyOnlineTable/${a}`, params: E({ tableName: n }, d) }), L = {
  // 查询表字段 e3e3NcxzbUiGa53YYVXxWc8ADo5ISgQGx/gaZwERF91oAryDlivjqBv3wqRArgChupi+Y/Gg/swwGEyL0PuVFg==
  doQueryField: (a, n) => v.get({ url: "/online/cgform/field/listByHeadId", params: E({ headId: a }, n) }),
  // 查询表index配置
  doQueryIndexes: (a, n) => v.get({ url: "/online/cgform/index/listByHeadId", params: E({ headId: a }, n) }),
  // 新增或修改
  doSaveOrUpdate: (a, n) => n ? v.put({ url: "/online/cgform/api/editAll", params: a }) : v.post({ url: "/online/cgform/api/addAll", params: a }),
  //只是修改表配置不改字段
  editHead: (a) => v.put({ url: "/online/cgform/head/edit", params: a })
}, wa = ze({
  name: "CgformModal",
  components: {
    BasicModal: na,
    BasicForm: sa,
    DBAttributeTable: ca,
    PageAttributeTable: fa,
    CheckDictTable: ba,
    ForeignKeyTable: ma,
    IndexTable: pa,
    QueryTable: Ta,
    ExtendConfigModal: ga,
    Icon: la
  },
  emits: ["success", "register"],
  props: {
    actionButton: {
      type: Boolean,
      default: !0,
      required: !1
    }
  },
  setup(a, { emit: n }) {
    const { createMessage: d } = ua(), B = y(), h = y(!1);
    let m = {};
    const D = ne(() => h.value ? "编辑" : "新增"), C = y(!0), p = y(!1), T = y("dbTable"), _ = y(!0), c = {
      dbTable: y(),
      pageTable: y(),
      checkTable: y(),
      fkTable: y(),
      idxTable: y(),
      queryTable: y()
    }, $ = ne(() => {
      var e, t;
      return (t = (e = B.value) == null ? void 0 : e.fullScreenRef) != null ? t : !1;
    });
    oe("tables", c), oe("fullScreenRef", $);
    const N = { value: {} }, { formSchemas: Q } = da(a, N, {
      onTableTypeChange: Fe,
      onIsTreeChange: De,
      ifShowOfSubTableStr: () => W
    }), [x, w] = ra({
      schemas: Q,
      showActionButtonGroup: !1,
      labelAlign: "right"
    }), { resetFields: J, setFieldsValue: I, validate: K } = w, [q, { closeModal: U }] = oa((e) => {
      var t;
      h.value = (t = e == null ? void 0 : e.isUpdate) != null ? t : !1, h.value ? X(e == null ? void 0 : e.record) : Te();
    }), M = y("");
    let r = We({});
    const V = Ca(() => ke(), 150);
    let z = [], W = !1, j = !1, k = [];
    const { aiTestMode: de, aiTestTable: ce, aiTableList: fe, initVirtualData: be, tableJsonGetHelper: me, refreshCacheTableName: pe } = Fa();
    function Te() {
      X({});
    }
    function X(e) {
      return F(this, null, function* () {
        var t;
        if (C.value = !1, T.value = "dbTable", yield J(), m = Object.assign({}, e), he(m), me(m), ve(m), I(m), M.value = m.tableName, P(1, () => _.value = !1), h.value)
          (t = c.dbTable.value) == null || t.setDataSource([]), yield ge(m.id), yield ye(m.id), ka(c.pageTable).then(() => {
            c.pageTable.value.changePageType(m.tableType == 3);
          });
        else {
          let { initialData: l, tempIds: o } = ya();
          yield Z(l, !0), z = o;
        }
      });
    }
    function ge(e) {
      return F(this, null, function* () {
        p.value = !0;
        try {
          let t = yield L.doQueryField(e);
          p.value = !1, yield Z(t);
        } finally {
          p.value = !1;
        }
      });
    }
    function ye(e) {
      return F(this, null, function* () {
        let t = yield L.doQueryIndexes(e);
        c.idxTable.value.setDataSource(t);
      });
    }
    function ve(e) {
      let t = {};
      if (e.extConfigJson)
        try {
          t = JSON.parse(e.extConfigJson);
        } catch (l) {
        }
      r = Object.assign({}, va, t, {
        isDesForm: e.isDesForm || "N",
        desFormCode: e.desFormCode || ""
      });
    }
    function he(e) {
      j = e.isTree == "Y", W = e.tableType === 2;
    }
    function Z(e, t) {
      return F(this, null, function* () {
        const { dbTable: l, pageTable: o, checkTable: u, fkTable: i, queryTable: g } = c;
        l.value || (yield G(), yield P(1)), l.value.setDataSource(e, t), setTimeout(() => {
          o.value.setDataSource(e, t), u.value.setDataSource(e, t), i.value.setDataSource(e, t), g.value.setDataSource(e, t);
        }, 10);
      });
    }
    function Ce(e) {
      if (["pageTable", "checkTable", "fkTable", "idxTable", "queryTable"].indexOf(e) !== -1) {
        const t = c.dbTable, l = c[e];
        t.value.tableRef.resetScrollTop(), l.value.syncTable(t);
      }
    }
    function Fe(e) {
      e === 1 && I({ themeTemplate: "normal" }), c.pageTable.value.changePageType(e == 3);
    }
    function De(e) {
      e === "Y" ? Ae() : Oe();
    }
    function H() {
      V();
    }
    function ke() {
      return F(this, null, function* () {
        let { dbTable: e, pageTable: t, checkTable: l, fkTable: o, queryTable: u } = c;
        yield t.value.syncTable(e), yield l.value.syncTable(e), yield o.value.syncTable(e), yield u.value.syncTable(e);
      });
    }
    function Re() {
      H();
    }
    function we() {
      H();
    }
    function Be(e) {
      let { oldIndex: t, newIndex: l } = e;
      Ie(t, l);
    }
    function _e(e) {
      return F(this, null, function* () {
        let { insertIndex: t, row: l } = e, { pageTable: o, checkTable: u, fkTable: i, queryTable: g } = c;
        o.value.tableRef.insertRows(l, t), u.value.tableRef.insertRows(l, t), i.value.tableRef.insertRows(l, t), g.value.tableRef.insertRows(l, t);
      });
    }
    function Ie(e, t) {
      let { pageTable: l, checkTable: o, fkTable: u, queryTable: i } = c;
      l.value.tableRef.rowResort(e, t), o.value.tableRef.rowResort(e, t), u.value.tableRef.rowResort(e, t), i.value.tableRef.rowResort(e, t);
    }
    function Se(e) {
      c.pageTable.value.syncFieldShowType(e.row);
    }
    function Ee(e) {
      c.pageTable.value.enableQuery(e);
    }
    function Ae() {
      if (!j) {
        let { dbTable: e, pageTable: t, checkTable: l } = c, o = ha();
        o = o.filter((u) => !e.value.tableRef.getTableData().map((g) => g.dbFieldName).includes(u.dbFieldName)), k = [], o.forEach((u) => {
          let i = Da() + "__tempId";
          k.push(i), u.id = i;
        }), e.value.tableRef.addRows(o, { setActive: !1 }), t.value.tableRef.addRows(o, { setActive: !1 }), l.value.tableRef.addRows(o, { setActive: !1 }), G(() => H()), j = !0;
      }
      G(() => {
        w.setFieldsValue({
          treeIdField: "has_child",
          treeParentIdField: "pid"
        });
      });
    }
    function Oe() {
      if (k && k.length > 0) {
        let { dbTable: e } = c;
        e.value.tableDeleteLines(k), k = [], j = !1;
      }
    }
    function Ne() {
      let e = {};
      return new Promise((t, l) => {
        K().then(
          (o) => t({ values: o }),
          () => l(O)
        );
      }).then((t) => (Object.assign(e, t), Me())).then((t) => {
        Object.assign(e, t);
        let l = je(e);
        return Pe(l);
      }).catch((t) => (t === O || (t == null ? void 0 : t.code) === O ? d.warning("校验未通过") : t != null && t.msg && d.warning(t.msg), Promise.reject(null)));
    }
    function Me() {
      return new Promise((e, t) => F(this, null, function* () {
        let l = Object.keys(c), o = {};
        for (let u = 0; u < l.length; u++) {
          let i = l[u], g = c[i];
          try {
            o[i] = yield g.value.validateData(i);
          } catch (S) {
            S.code === O && (T.value = S.activeKey), t(S);
            return;
          }
        }
        e(o);
      }));
    }
    function je(e) {
      let t = {
        head: {},
        fields: [],
        indexs: [],
        deleteFieldIds: [],
        deleteIndexIds: []
      };
      return t.head = Object.assign(m, e.values), t.head.isDesForm = r.isDesForm, t.head.desFormCode = r.desFormCode, delete r.isDesForm, delete r.desFormCode, t.head.extConfigJson = JSON.stringify(r), e.dbTable.tableData.forEach((l, o) => {
        let u = l.id, i = Object.assign({}, l), g = e.pageTable.tableData[o];
        i = Object.assign(g, i);
        let S = e.checkTable.tableData[o];
        i = Object.assign(S, i);
        let Ke = e.fkTable.tableData[o];
        i = Object.assign(Ke, i);
        let qe = e.queryTable.tableData[o];
        i = Object.assign(qe, i), u == null || u === "" ? delete i.id : i.id = u, [].concat(z, k).includes(i.id) && delete i.id, t.fields.push(i);
      }), t.deleteFieldIds = e.dbTable.deleteIds, t.indexs = e.idxTable.tableData, t.deleteIndexIds = e.idxTable.deleteIds, t;
    }
    function Pe(e) {
      return new Promise((t, l) => {
        let o = e.fields, u = !0;
        if (o && o.length > 0) {
          let i = 0;
          for (let g = 0; g < o.length; g++)
            if ((o[g].mainField || o[g].mainTable) && (i += 1), i > 1) {
              u = !1;
              break;
            }
        }
        u ? t(e) : l({
          code: -1,
          msg: "外键只允许配置一个!",
          error: O
        });
      });
    }
    function Le() {
      C.value = !0, Ne().then(
        (e) => F(this, null, function* () {
          var t;
          if (e.fields && e.fields.length > 0)
            for (let l of e.fields)
              l.dbFieldName = l.dbFieldName.toLowerCase().trim();
          (t = e.head) != null && t.tableName && (e.head.tableName = e.head.tableName.toLowerCase().trim()), yield L.doSaveOrUpdate(e, h.value), pe(M.value, e.head.tableName), n("success"), P(1, () => ee());
        }),
        (e) => {
        }
      ).finally(() => {
        C.value = !1;
      });
    }
    const [$e, Qe] = ia();
    function xe(e) {
      return F(this, null, function* () {
        if (N.value = e, e.joinQuery == 0 && w.validateFields(["themeTemplate"]), r = e, h.value == !0) {
          let t = Xe(r);
          const l = {
            id: m.id,
            extConfigJson: JSON.stringify(t)
          };
          yield L.editHead(l), n("success");
        }
      });
    }
    function Je() {
      Qe.openModal(!0, {
        extConfigJson: r
      });
    }
    function ee() {
      _.value = !0, P(1, () => U());
    }
    return le(E({}, c), {
      modalRef: B,
      title: D,
      confirmLoading: C,
      tableLoading: p,
      activeKey: T,
      onCancel: ee,
      extConfigJson: r,
      formAction: w,
      hideTabs: _,
      onSubmit: Le,
      onTabsChange: Ce,
      onTableAdded: Re,
      onTableRemoved: we,
      onTableDragged: Be,
      onTableInserted: _e,
      onTableSyncDbType: Se,
      onTableQuery: Ee,
      onOpenExtConfig: Je,
      onExtConfigOk: xe,
      registerForm: x,
      registerModal: q,
      registerExtendConfigModal: $e,
      // hook OnlineTest
      aiTestMode: de,
      aiTestTable: ce,
      aiTableList: fe,
      initVirtualData: be
    });
  }
}), Ba = { style: { flex: "1", "text-align": "right" } }, _a = {
  key: 0,
  style: { display: "inline-block", "text-align": "left", position: "absolute", left: "0" }
};
function Ia(a, n, d, B, h, m) {
  const D = b("a-button"), C = b("BasicForm"), p = b("DBAttributeTable"), T = b("a-tab-pane"), _ = b("PageAttributeTable"), c = b("CheckDictTable"), $ = b("ForeignKeyTable"), N = b("IndexTable"), Q = b("Icon"), x = b("a-tooltip"), w = b("QueryTable"), J = b("a-tabs"), I = b("a-spin"), K = b("a-select-option"), q = b("a-select"), U = b("ExtendConfigModal"), M = b("BasicModal");
  return A(), Y(M, Ze({
    ref: "modalRef",
    title: a.title,
    width: 1200,
    maskClosable: !1,
    defaultFullscreen: !0,
    confirmLoading: a.confirmLoading
  }, a.$attrs, {
    onCancel: a.onCancel,
    onRegister: a.registerModal
  }), {
    footer: f(() => [
      s(D, { onClick: a.onCancel }, {
        default: f(() => [
          R("关闭")
        ]),
        _: 1
      }, 8, ["onClick"]),
      s(D, {
        type: "primary",
        loading: a.confirmLoading,
        preIcon: "ant-design:save",
        onClick: a.onSubmit
      }, {
        default: f(() => [
          R("保存")
        ]),
        _: 1
      }, 8, ["loading", "onClick"]),
      a.aiTestMode ? (A(), ie("div", _a, [
        s(q, {
          value: a.aiTestTable,
          "onUpdate:value": n[1] || (n[1] = (r) => a.aiTestTable = r),
          placeholder: "请选择测试的表类型",
          getPopupContainer: (r) => r == null ? void 0 : r.parentElement,
          style: { width: "250px", margin: "0 10px 0 20px" }
        }, {
          default: f(() => [
            (A(!0), ie(ea, null, aa(a.aiTableList, (r, V) => (A(), Y(K, {
              key: V,
              value: r.name
            }, {
              default: f(() => [
                R(ta(r.title + "（" + r.name + "）"), 1)
              ]),
              _: 2
            }, 1032, ["value"]))), 128))
          ]),
          _: 1
        }, 8, ["value", "getPopupContainer"]),
        s(D, {
          type: "primary",
          ghost: "",
          onClick: a.initVirtualData
        }, {
          default: f(() => [
            R("生成数据>>")
          ]),
          _: 1
        }, 8, ["onClick"])
      ])) : se("", !0)
    ]),
    default: f(() => [
      s(I, {
        wrapperClassName: "p-2",
        spinning: a.confirmLoading
      }, {
        default: f(() => [
          s(C, { onRegister: a.registerForm }, {
            extConfigButton: f(() => [
              re("div", Ba, [
                s(D, {
                  preIcon: "ant-design:setting",
                  onClick: a.onOpenExtConfig
                }, {
                  default: f(() => [
                    R("扩展配置")
                  ]),
                  _: 1
                }, 8, ["onClick"])
              ])
            ]),
            _: 1
          }, 8, ["onRegister"]),
          s(I, {
            spinning: a.tableLoading || a.hideTabs
          }, {
            default: f(() => [
              a.hideTabs ? se("", !0) : (A(), Y(J, {
                key: 0,
                activeKey: a.activeKey,
                "onUpdate:activeKey": n[0] || (n[0] = (r) => a.activeKey = r),
                animated: "",
                onChange: a.onTabsChange
              }, {
                default: f(() => [
                  s(T, {
                    tab: "数据库属性",
                    key: "dbTable",
                    forceRender: ""
                  }, {
                    default: f(() => [
                      s(p, {
                        ref: "dbTable",
                        actionButton: a.actionButton,
                        onAdded: a.onTableAdded,
                        onRemoved: a.onTableRemoved,
                        onDragged: a.onTableDragged,
                        onInserted: a.onTableInserted,
                        onSyncDbType: a.onTableSyncDbType
                      }, null, 8, ["actionButton", "onAdded", "onRemoved", "onDragged", "onInserted", "onSyncDbType"])
                    ]),
                    _: 1
                  }),
                  s(T, {
                    tab: "页面属性",
                    key: "pageTable",
                    forceRender: ""
                  }, {
                    default: f(() => [
                      s(_, { ref: "pageTable" }, null, 512)
                    ]),
                    _: 1
                  }),
                  s(T, {
                    tab: "校验字段",
                    key: "checkTable",
                    forceRender: ""
                  }, {
                    default: f(() => [
                      s(c, { ref: "checkTable" }, null, 512)
                    ]),
                    _: 1
                  }),
                  s(T, {
                    tab: "外键",
                    key: "fkTable",
                    forceRender: ""
                  }, {
                    default: f(() => [
                      s($, {
                        ref: "fkTable",
                        actionButton: a.actionButton
                      }, null, 8, ["actionButton"])
                    ]),
                    _: 1
                  }),
                  s(T, {
                    tab: "索引",
                    key: "idxTable",
                    forceRender: ""
                  }, {
                    default: f(() => [
                      s(N, {
                        ref: "idxTable",
                        actionButton: a.actionButton
                      }, null, 8, ["actionButton"])
                    ]),
                    _: 1
                  }),
                  s(T, {
                    key: "queryTable",
                    forceRender: ""
                  }, {
                    tab: f(() => [
                      re("span", null, [
                        R(" 个性查询配置 "),
                        s(x, null, {
                          title: f(() => [
                            R("允许自定义，查询表单字段控件类型！")
                          ]),
                          default: f(() => [
                            s(Q, { icon: "bx:help-circle" })
                          ]),
                          _: 1
                        })
                      ])
                    ]),
                    default: f(() => [
                      s(w, {
                        ref: "queryTable",
                        onQuery: a.onTableQuery
                      }, null, 8, ["onQuery"])
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["activeKey", "onChange"]))
            ]),
            _: 1
          }, 8, ["spinning"])
        ]),
        _: 1
      }, 8, ["spinning"]),
      s(U, {
        onRegister: a.registerExtendConfigModal,
        parentForm: a.formAction,
        onOk: a.onExtConfigOk
      }, null, 8, ["onRegister", "parentForm", "onOk"])
    ]),
    _: 1
  }, 16, ["title", "confirmLoading", "onCancel", "onRegister"]);
}
const Sa = /* @__PURE__ */ Ra(wa, [["render", Ia]]), rt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Sa
}, Symbol.toStringTag, { value: "Module" }));
export {
  Sa as C,
  nt as a,
  tt as b,
  at as c,
  it as d,
  lt as e,
  ot as f,
  st as g,
  rt as h,
  et as l
};
