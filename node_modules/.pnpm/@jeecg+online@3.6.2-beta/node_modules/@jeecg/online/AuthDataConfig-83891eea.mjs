var P = Object.defineProperty, $ = Object.defineProperties;
var j = Object.getOwnPropertyDescriptors;
var T = Object.getOwnPropertySymbols;
var V = Object.prototype.hasOwnProperty, q = Object.prototype.propertyIsEnumerable;
var B = (e, o, a) => o in e ? P(e, o, { enumerable: !0, configurable: !0, writable: !0, value: a }) : e[o] = a, y = (e, o) => {
  for (var a in o || (o = {}))
    V.call(o, a) && B(e, a, o[a]);
  if (T)
    for (var a of T(o))
      q.call(o, a) && B(e, a, o[a]);
  return e;
}, M = (e, o) => $(e, j(o));
var C = (e, o, a) => new Promise((c, m) => {
  var d = (n) => {
    try {
      i(a.next(n));
    } catch (s) {
      m(s);
    }
  }, f = (n) => {
    try {
      i(a.throw(n));
    } catch (s) {
      m(s);
    }
  }, i = (n) => n.done ? c(n.value) : Promise.resolve(n.value).then(d, f);
  i((a = a.apply(e, o)).next());
});
import { defineComponent as z, ref as N, watch as k, reactive as x, nextTick as G, resolveComponent as r, openBlock as K, createElementBlock as Q, createVNode as l, withCtx as u, createTextVNode as H, normalizeProps as J, guardReactiveProps as W } from "vue";
import { BasicTable as X, TableAction as Y, useTable as Z } from "/@/components/Table";
import { BasicModal as tt, useModal as et } from "/@/components/Modal";
import { BasicForm as ot, useForm as at } from "/@/components/Form";
import { g as nt, h as it, i as st, j as rt } from "./auth.api-d3a6c4b3.mjs";
import { d as lt, u as ct, U as F } from "./auth.data-8be5c9e3.mjs";
import { _ as ut } from "./index-0e3ab3af.mjs";
import "/@/utils/http/axios";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "/@/hooks/web/useMessage";
import "vue-router";
const mt = z({
  name: "AuthDataConfig",
  components: { BasicTable: X, TableAction: Y, BasicModal: tt, BasicForm: ot },
  props: {
    cgformId: { type: String, required: !0 },
    authFields: { type: Array, required: !0 }
  },
  setup(e) {
    const o = N(!1), [a, { reload: c, setLoading: m }] = Z({
      api: (t) => nt(e.cgformId, t),
      rowKey: "id",
      bordered: !0,
      columns: lt,
      showIndexColumn: !1,
      // 操作列
      actionColumn: {
        width: 120,
        title: "操作",
        fixed: !1,
        dataIndex: "action",
        slots: { customRender: "action" }
      }
    });
    k(o, (t) => m(t));
    const [d, { openModal: f, closeModal: i }] = et(), n = x({
      title: "",
      width: 800,
      confirmLoading: !1,
      onOk: U,
      onCancel: i,
      onRegister: d
    });
    let s = !1, p = {};
    const { formSchemas: b } = ct(e, {
      onRuleOperatorChange: L
    }), [w, { validate: g, resetFields: _, setFieldsValue: D }] = at({
      schemas: b,
      showActionButtonGroup: !1,
      labelAlign: "right"
    });
    k(
      () => e.cgformId,
      () => {
        c().catch(() => null);
      },
      { immediate: !0 }
    );
    function A(t) {
      return C(this, null, function* () {
        var h;
        s = (h = t.isUpdate) != null ? h : !1, n.title = t.title, f(), yield G(), yield _(), p = Object.assign({}, t.record), yield D(p);
      });
    }
    function S() {
      A({ title: "新增" });
    }
    function v(t) {
      A({ title: "编辑", record: t, isUpdate: !0 });
    }
    function R(t) {
      o.value = !0, rt(t).then(c).finally(() => o.value = !1);
    }
    function U() {
      return C(this, null, function* () {
        try {
          n.confirmLoading = !0;
          let t = yield g();
          t = Object.assign({}, p, t), t.ruleOperator == F && (t.ruleColumn = ""), t.cgformId = e.cgformId, yield it(t, s), c(), i();
        } finally {
          n.confirmLoading = !1;
        }
      });
    }
    function I(t) {
      o.value = !0;
      let h = Math.abs(t.status - 1);
      st(M(y({}, t), { status: h })).then(() => {
        t.status = h;
      }).finally(() => {
        o.value = !1;
      });
    }
    function L(t) {
      t == F && D({
        ruleColumn: ""
      });
    }
    function O(t) {
      return [
        {
          label: "编辑",
          onClick: () => v(t)
        }
      ];
    }
    function E(t) {
      return [
        {
          label: "删除",
          popConfirm: {
            title: "确定删除吗？",
            placement: "left",
            confirm: () => R(t.id)
          }
        }
      ];
    }
    return {
      loading: o,
      formModalProps: n,
      onAdd: S,
      onUpdateStatus: I,
      getTableAction: O,
      getDropDownAction: E,
      registerTable: a,
      registerModal: d,
      registerForm: w
    };
  }
});
function dt(e, o, a, c, m, d) {
  const f = r("a-button"), i = r("a-switch"), n = r("TableAction"), s = r("BasicTable"), p = r("BasicForm"), b = r("a-spin"), w = r("BasicModal");
  return K(), Q("div", null, [
    l(s, {
      onRegister: e.registerTable,
      loading: e.loading
    }, {
      tableTitle: u(() => [
        l(f, {
          onClick: e.onAdd,
          type: "primary",
          preIcon: "ant-design:plus"
        }, {
          default: u(() => [
            H("新增")
          ]),
          _: 1
        }, 8, ["onClick"])
      ]),
      switch: u(({ text: g, record: _ }) => [
        l(i, {
          size: "small",
          checked: _.status === 1,
          onClick: () => e.onUpdateStatus(_)
        }, null, 8, ["checked", "onClick"])
      ]),
      action: u(({ record: g }) => [
        l(n, {
          actions: e.getTableAction(g),
          dropDownActions: e.getDropDownAction(g)
        }, null, 8, ["actions", "dropDownActions"])
      ]),
      _: 1
    }, 8, ["onRegister", "loading"]),
    l(w, J(W(e.formModalProps)), {
      default: u(() => [
        l(b, {
          spinning: e.formModalProps.confirmLoading
        }, {
          default: u(() => [
            l(p, { onRegister: e.registerForm }, null, 8, ["onRegister"])
          ]),
          _: 1
        }, 8, ["spinning"])
      ]),
      _: 1
    }, 16)
  ]);
}
const yt = /* @__PURE__ */ ut(mt, [["render", dt]]);
export {
  yt as default
};
