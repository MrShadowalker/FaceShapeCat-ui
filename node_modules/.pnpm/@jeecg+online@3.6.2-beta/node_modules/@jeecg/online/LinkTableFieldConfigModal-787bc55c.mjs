var R = Object.defineProperty;
var F = Object.getOwnPropertySymbols;
var q = Object.prototype.hasOwnProperty, I = Object.prototype.propertyIsEnumerable;
var w = (o, a, t) => a in o ? R(o, a, { enumerable: !0, configurable: !0, writable: !0, value: t }) : o[a] = t, T = (o, a) => {
  for (var t in a || (a = {}))
    q.call(a, t) && w(o, t, a[t]);
  if (F)
    for (var t of F(a))
      I.call(a, t) && w(o, t, a[t]);
  return o;
};
var p = (o, a, t) => new Promise((i, s) => {
  var r = (n) => {
    try {
      d(t.next(n));
    } catch (f) {
      s(f);
    }
  }, c = (n) => {
    try {
      d(t.throw(n));
    } catch (f) {
      s(f);
    }
  }, d = (n) => n.done ? i(n.value) : Promise.resolve(n.value).then(r, c);
  d((t = t.apply(o, a)).next());
});
import { BasicModal as P, useModalInner as H } from "/@/components/Modal";
import { ref as b, resolveComponent as h, openBlock as J, createBlock as K, mergeProps as N, withCtx as k, createVNode as x } from "vue";
import { BasicForm as $, useForm as j } from "/@/components/Form/index";
import { defHttp as G } from "/@/utils/http/axios";
import { omit as z } from "lodash-es";
import { useMessage as D } from "/@/hooks/web/useMessage";
import { _ as E } from "./index-0e3ab3af.mjs";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "vue-router";
const Q = {
  name: "LinkTableFieldConfigModal",
  emits: ["success", "register"],
  components: {
    BasicModal: P,
    BasicForm: $
  },
  setup(o, { emit: a }) {
    const t = b(!1), i = b([]), s = b([]);
    let r = {}, c = {};
    const { createMessage: d } = D(), [n, { closeModal: f }] = H((e) => p(this, null, function* () {
      c = T({}, e.record), r = e.tableAndFieldsMap, yield y(), yield _({ dictTable: e.record.dictTable }), setTimeout(() => p(this, null, function* () {
        let l = z(e.record, "dictTable");
        yield _(l), yield B();
      }), 200);
    }));
    function y() {
      return p(this, null, function* () {
        let e = Object.keys(r);
        if (!e || e.length == 0)
          i.value = [];
        else {
          let l = [];
          for (let m of e)
            l.push({
              text: r[m].title,
              value: m
            });
          i.value = l;
        }
      });
    }
    function C(e) {
      return p(this, null, function* () {
        if (e) {
          const { table: l, fields: m } = r[e];
          if (!l) {
            d.warning("请先完善字段[" + e + "]关联记录的配置");
            return;
          }
          const V = "/online/cgform/field/listByHeadCode", g = yield G.get({ url: V, params: { headCode: l } });
          if (g && g.length > 0) {
            let L = g.map((u) => ({
              text: u.dbFieldTxt,
              value: u.dbFieldName
            })), A = m.split(",");
            s.value = L.filter((u) => A.indexOf(u.value) > 0);
          } else
            s.value = [];
        }
      });
    }
    const M = [
      {
        label: "rowKey",
        field: "rowKey",
        component: "Input",
        show: !1
      },
      {
        label: "字段描述",
        field: "dbFieldTxt",
        component: "Input",
        required: !0
      },
      {
        label: "关联记录",
        field: "dictTable",
        component: "JSearchSelect",
        required: !0,
        componentProps: ({ formActionType: e }) => ({
          async: !1,
          popContainer: ".link-table-field-config-modal",
          dictOptions: i.value,
          immediateChange: !0,
          onChange: (m) => p(this, null, function* () {
            c.dictText && (yield e.setFieldsValue({
              dictText: ""
            }), yield e.clearValidate()), C(m);
          })
        })
      },
      {
        label: "显示字段",
        field: "dictText",
        component: "JSearchSelect",
        required: !0,
        componentProps: {
          async: !1,
          popContainer: ".link-table-field-config-modal",
          dictOptions: s,
          onChange: (e) => {
            c.dictText = e;
          }
        }
      }
    ], [O, { validate: v, setFieldsValue: _, clearValidate: B }] = j({
      schemas: M,
      showActionButtonGroup: !1,
      labelAlign: "right"
    });
    function S() {
      return p(this, null, function* () {
        const e = yield v();
        a("success", e), f();
      });
    }
    return {
      registerModal: n,
      spinningLoading: t,
      registerForm: O,
      handleSubmit: S
    };
  }
};
function U(o, a, t, i, s, r) {
  const c = h("BasicForm"), d = h("a-spin"), n = h("BasicModal");
  return J(), K(n, N({ wrapClassName: "link-table-field-config-modal" }, o.$attrs, {
    title: "他表字段配置",
    onRegister: i.registerModal,
    keyboard: "",
    canFullscreen: !1,
    cancelText: "关闭",
    onOk: i.handleSubmit
  }), {
    default: k(() => [
      x(d, { spinning: i.spinningLoading }, {
        default: k(() => [
          x(c, { onRegister: i.registerForm }, null, 8, ["onRegister"])
        ]),
        _: 1
      }, 8, ["spinning"])
    ]),
    _: 1
  }, 16, ["onRegister", "onOk"]);
}
const le = /* @__PURE__ */ E(Q, [["render", U]]);
export {
  le as default
};
