var W = Object.defineProperty, G = Object.defineProperties;
var U = Object.getOwnPropertyDescriptors;
var R = Object.getOwnPropertySymbols;
var X = Object.prototype.hasOwnProperty, Y = Object.prototype.propertyIsEnumerable;
var E = (t, s, n) => s in t ? W(t, s, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[s] = n, N = (t, s) => {
  for (var n in s || (s = {}))
    X.call(s, n) && E(t, n, s[n]);
  if (R)
    for (var n of R(s))
      Y.call(s, n) && E(t, n, s[n]);
  return t;
}, $ = (t, s) => G(t, U(s));
import { defineComponent as Z, ref as ee, resolveComponent as y, openBlock as H, createElementBlock as te, Fragment as le, createVNode as w, mergeProps as ie, withCtx as K, createBlock as ae, createTextVNode as oe, createCommentVNode as de } from "vue";
import { JVxeTypes as r } from "/@/components/jeecg/JVxeTable/types";
import { u as ne } from "./useTableSync-774c3774.mjs";
import se from "./LinkTableConfigModal-d4fbdef2.mjs";
import ue from "./LinkTableFieldConfigModal-787bc55c.mjs";
import re from "./FieldExtendJsonModal-a70a9ccd.mjs";
import { useModal as V } from "/@/components/Modal";
import { _ as fe } from "./index-0e3ab3af.mjs";
import "./cgform.data-cbdd88c3.mjs";
import "/@/utils/dict";
import "/@/utils/dict/JDictSelectUtil";
import "/@/utils/uuid";
import "lodash-es";
import "/@/components/Form/index";
import "/@/utils/http/axios";
import "/@/hooks/web/useMessage";
import "./constant-754f1a9d.mjs";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "vue-router";
const P = [
  { title: "文本框", value: "text" },
  { title: "密码", value: "password" },
  { title: "下拉框", value: "list" },
  { title: "单选框", value: "radio" },
  { title: "多选框", value: "checkbox" },
  { title: "开关", value: "switch" },
  { title: "日期(年月日)", value: "date" },
  { title: "日期(年月日时分秒)", value: "datetime" },
  { title: "时间(HH:mm:ss)", value: "time" },
  { title: "文件", value: "file" },
  { title: "图片", value: "image" },
  { title: "多行文本", value: "textarea" },
  { title: "富文本", value: "umeditor" },
  { title: "MarkDown", value: "markdown" },
  { title: "用户选择", value: "sel_user" },
  { title: "部门选择", value: "sel_depart" },
  { title: "关联记录", value: "link_table" },
  { title: "他表字段", value: "link_table_field" },
  { title: "省市区组件", value: "pca" },
  { title: "Popup弹框", value: "popup" },
  { title: "下拉多选框", value: "list_multi" },
  { title: "下拉搜索框", value: "sel_search" },
  { title: "分类字典树", value: "cat_tree" },
  { title: "自定义树控件", value: "sel_tree" },
  { title: "联动组件", value: "link_down" }
], ce = [
  { title: "文本框", value: "text" },
  { title: "单选框", value: "radio" },
  { title: "开关", value: "switch" },
  { title: "日期(yyyy-MM-dd)", value: "date" },
  { title: "日期（yyyy-MM-dd HH:mm:ss）", value: "datetime" },
  { title: "时间（HH:mm:ss）", value: "time" },
  { title: "文件", value: "file" },
  { title: "图片", value: "image" },
  { title: "下拉框", value: "list" },
  { title: "下拉多选框", value: "list_multi" },
  { title: "下拉搜索框", value: "sel_search" },
  { title: "popup弹出框", value: "popup" },
  { title: "部门选择", value: "sel_depart" },
  { title: "用户选择", value: "sel_user" },
  { title: "省市区组件", value: "pca" },
  { title: "多行文本", value: "textarea" }
], me = Z({
  name: "PageAttributeTable",
  components: {
    LinkTableConfigModal: se,
    LinkTableFieldConfigModal: ue,
    FieldExtendJsonModal: re
  },
  setup() {
    const t = ee([
      { title: "字段名称", key: "dbFieldName", width: 100 },
      { title: "字段备注", key: "dbFieldTxt", width: 150 },
      {
        title: "表单显示",
        key: "isShowForm",
        width: 80,
        type: r.checkbox,
        align: "center",
        customValue: ["1", "0"],
        defaultChecked: !0
      },
      {
        title: "列表显示",
        key: "isShowList",
        width: 80,
        type: r.checkbox,
        align: "center",
        customValue: ["1", "0"],
        defaultChecked: !0
      },
      {
        title: "是否排序",
        key: "sortFlag",
        width: 80,
        type: r.checkbox,
        align: "center",
        customValue: ["1", "0"],
        defaultChecked: !1
      },
      {
        title: "是否只读",
        key: "isReadOnly",
        width: 80,
        type: r.checkbox,
        align: "center",
        customValue: ["1", "0"],
        defaultChecked: !1
      },
      {
        title: "控件类型",
        key: "fieldShowType",
        width: 170,
        type: r.select,
        options: P,
        defaultValue: "text",
        placeholder: "请选择${title}",
        validateRules: [{ required: !0, message: "请选择${title}" }, { handler: C }]
      },
      {
        title: "控件长度",
        key: "fieldLength",
        width: 120,
        titleHelp: { message: "此长度只对子表列字段宽度有效！" },
        type: r.inputNumber,
        defaultValue: 200,
        placeholder: "请输入${title}",
        validateRules: [{ required: !0, message: "${title}不能为空" }]
      },
      {
        title: "是否查询",
        key: "isQuery",
        width: 80,
        type: r.checkbox,
        align: "center",
        customValue: ["1", "0"],
        defaultChecked: !1
      },
      {
        title: "查询类型",
        key: "queryMode",
        width: 110,
        type: r.select,
        options: [
          { title: "普通查询", value: "single" },
          { title: "范围查询", value: "group" }
        ],
        defaultValue: "single",
        placeholder: "请选择${title}",
        validateRules: [{ required: !0, message: "请选择${title}" }]
      },
      {
        title: "控件默认值",
        key: "fieldDefaultValue",
        width: 120,
        type: r.input,
        defaultValue: ""
      },
      {
        title: "定义转换器",
        key: "converter",
        width: 150,
        type: r.input,
        defaultValue: ""
      },
      {
        title: "扩展参数",
        key: "fieldExtendJson",
        width: 120,
        type: r.input,
        defaultValue: ""
      },
      {
        title: "更多配置",
        minWidth: 100,
        key: "fieldConfig",
        type: r.slot,
        slotName: "fieldConfig"
      }
    ]), s = ne(t), { tableRef: n, tables: p } = s;
    function C({ cellValue: e, row: l }, a) {
      let { dbTable: u } = p, i = u.value.tableRef.getTableData({ rowIds: [l.id] })[0].dbType;
      e === "time" && i !== "string" ? a(!1, "当控件类型为时间时,数据库属性里的字段类型必须是String！") : e === "date" && i !== "Date" && i !== "Datetime" ? a(!1, "当控件类型为日期时，数据库属性里的字段类型必须是Date或Datetime！") : e === "datetime" && i !== "Datetime" ? a(!1, "当控件类型为datetime时，数据库属性里的字段类型必须是Datetime！") : a(!0);
    }
    function D(e) {
      let l = "date";
      e.dbType === "Datetime" && (l = "datetime"), n.value.setValues([
        {
          rowKey: e.id,
          values: { fieldShowType: l }
        }
      ]);
    }
    function k(e) {
      for (let l of t.value)
        if (l.key == "fieldShowType") {
          l.options = e ? ce : P;
          break;
        }
    }
    function F(e) {
      n.value.setValues([
        {
          rowKey: e,
          values: { isQuery: "1" }
        }
      ]);
    }
    const [_, { openModal: x }] = V(), [S, { openModal: v }] = V(), [M, { openModal: O }] = V();
    function A(e) {
      return e.row.dbFieldName != "id";
    }
    function L(e) {
      e.row.fieldShowType.indexOf("link_table") >= 0 ? J(e) : Q(e);
    }
    function J(e) {
      let { row: l } = e, { checkTable: a } = p;
      if (a) {
        let u = a.value.tableRef.getTableData({ rowIds: [l.id] })[0];
        if (e.row.fieldShowType == "link_table") {
          let i = I(l, u);
          x(!0, {
            record: i,
            fieldName: l.dbFieldName
          });
        } else if (e.row.fieldShowType == "link_table_field") {
          let i = B(l, u);
          v(!0, i);
        }
      }
    }
    function B(e, l) {
      let u = n.value.getTableData().filter((g) => g.fieldShowType == "link_table"), i = {};
      if (u && u.length > 0) {
        let g = p.checkTable.value.tableRef.getTableData();
        for (let T of u) {
          let h = g.filter((m) => m.dbFieldName == T.dbFieldName);
          if (h && h.length > 0) {
            let m = h[0];
            i[m.dbFieldName] = {
              title: T.dbFieldTxt,
              table: m.dictTable,
              fields: m.dictText
            };
          }
        }
      }
      const { dictTable: c, dictText: f } = l, { id: o, dbFieldTxt: d } = e;
      return {
        record: {
          rowKey: o,
          dbFieldTxt: d,
          dictText: f,
          dictTable: c
        },
        tableAndFieldsMap: i
      };
    }
    function I(e, l) {
      const { id: a, dbFieldTxt: u, fieldExtendJson: i } = e, { dictTable: c, dictText: f } = l;
      let o = {
        rowKey: a,
        dbFieldTxt: u,
        dictTable: c
      };
      if (f) {
        let d = f.split(",");
        o.titleField = d[0], d.length > 1 && (o.otherFields = f.substring(f.indexOf(",") + 1));
      } else
        o.titleField = "", o.otherFields = "";
      if (i)
        try {
          let d = JSON.parse(i);
          d.multiSelect ? o.multiSelect = d.multiSelect : o.multiSelect = !1, d.showType ? o.showType = d.showType : o.showType = "card", d.imageField ? o.imageField = d.imageField : o.imageField = "";
        } catch (d) {
        }
      return o;
    }
    function q(e) {
      const { multiSelect: l, showType: a, imageField: u, fieldName: i } = e;
      let c = { showType: a, multiSelect: l, imageField: u }, f = [{ rowKey: e.rowKey, values: { fieldExtendJson: JSON.stringify(c), dbFieldTxt: e.dbFieldTxt } }];
      n.value.setValues(f);
      let { checkTable: o, dbTable: d } = p;
      if (d) {
        let b = [{ rowKey: e.rowKey, values: { dbFieldTxt: e.dbFieldTxt } }];
        d.value.tableRef.setValues(b);
      }
      if (o) {
        let b = e.titleField;
        e.otherFields && (b += "," + e.otherFields);
        const { dictTable: g, dictField: T } = e;
        let h = {
          dictTable: g,
          dictField: T,
          dictText: b,
          dbFieldName: i
        }, m = [{ rowKey: e.rowKey, values: h }];
        o.value.tableRef.setValues(m);
      }
    }
    function j(e) {
      const { dbFieldTxt: l, dictTable: a, dictText: u, rowKey: i } = e;
      let c = [{ rowKey: i, values: { dbFieldTxt: l } }];
      n.value.setValues(c);
      let { checkTable: f, dbTable: o } = p;
      if (o) {
        let d = [{ rowKey: i, values: { dbFieldTxt: l, dbIsPersist: "0" } }];
        o.value.tableRef.setValues(d);
      }
      if (f) {
        let d = [{ rowKey: i, values: { dictTable: a, dictText: u } }];
        f.value.tableRef.setValues(d);
      }
    }
    function Q(e) {
      let l = e.row.fieldExtendJson || "", a = e.rowId, u = e.row.fieldShowType || "", i = e.row.sortFlag || "0";
      O(!0, {
        jsonStr: l,
        fieldShowType: u,
        sortFlag: i,
        id: a
      });
    }
    function z(e, l) {
      let a;
      e && Object.keys(e).length > 0 ? a = [{ rowKey: l, values: { fieldExtendJson: JSON.stringify(e) } }] : a = [{ rowKey: l, values: { fieldExtendJson: "" } }], n.value.setValues(a);
    }
    return $(N({}, s), {
      columns: t,
      enableQuery: F,
      syncFieldShowType: D,
      changePageType: k,
      showConfigButton: A,
      showFieldConfig: J,
      registerExtJsonModal: M,
      handleExtJson: z,
      openConfig: L,
      registerModal: _,
      handleConfigData: q,
      registerFieldModal: S,
      handleFieldConfigData: j
    });
  }
});
function pe(t, s, n, p, C, D) {
  const k = y("a-button"), F = y("JVxeTable"), _ = y("link-table-config-modal"), x = y("link-table-field-config-modal"), S = y("FieldExtendJsonModal");
  return H(), te(le, null, [
    w(F, ie({
      ref: "tableRef",
      "row-class-name": "online-config-page",
      rowNumber: "",
      keyboardEdit: "",
      maxHeight: t.tableHeight.noToolbar,
      loading: t.loading,
      columns: t.columns,
      dataSource: t.dataSource,
      disabledRows: { dbFieldName: ["id", "has_child"] }
    }, t.tableProps), {
      fieldConfig: K((v) => [
        t.showConfigButton(v) ? (H(), ae(k, {
          key: 0,
          type: "primary",
          size: "small",
          ghost: "",
          onClick: (M) => t.openConfig(v)
        }, {
          default: K(() => [
            oe("高级配置")
          ]),
          _: 2
        }, 1032, ["onClick"])) : de("", !0)
      ]),
      _: 1
    }, 16, ["maxHeight", "loading", "columns", "dataSource"]),
    w(_, {
      onRegister: t.registerModal,
      onSuccess: t.handleConfigData
    }, null, 8, ["onRegister", "onSuccess"]),
    w(x, {
      onRegister: t.registerFieldModal,
      onSuccess: t.handleFieldConfigData
    }, null, 8, ["onRegister", "onSuccess"]),
    w(S, {
      onRegister: t.registerExtJsonModal,
      onSuccess: t.handleExtJson
    }, null, 8, ["onRegister", "onSuccess"])
  ], 64);
}
const $e = /* @__PURE__ */ fe(me, [["render", pe], ["__scopeId", "data-v-08ae6456"]]);
export {
  $e as default
};
