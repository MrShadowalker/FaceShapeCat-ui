var w = (e, l, c) => new Promise((y, g) => {
  var a = (t) => {
    try {
      u(c.next(t));
    } catch (n) {
      g(n);
    }
  }, r = (t) => {
    try {
      u(c.throw(t));
    } catch (n) {
      g(n);
    }
  }, u = (t) => t.done ? y(t.value) : Promise.resolve(t.value).then(a, r);
  u((c = c.apply(e, l)).next());
});
import { defineComponent as I, ref as m, reactive as H, resolveComponent as v, openBlock as E, createBlock as T, withCtx as i, createVNode as f, createTextVNode as J, createCommentVNode as k } from "vue";
import { BasicModal as q, useModalInner as G, useModal as z } from "/@/components/Modal";
import { JCodeEditor as L } from "/@/components/Form";
import { u as Q } from "./useOnlineTest-e4bd8be3.mjs";
import { E as X, u as Y } from "./EnhanceJsHistory-352b46b1.mjs";
import { g as Z, s as x } from "./enhance.api-138e6826.mjs";
import { useMessage as ee } from "/@/hooks/web/useMessage";
import { _ as oe } from "./index-0e3ab3af.mjs";
import "/@/utils/dateUtil";
import "/@/store";
import "pinia";
import "/@/utils/cache";
import "/@/utils/http/axios";
import "/@/utils/is";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "vue-router";
const R = {
  list: [
    //------  列表api -------
    // 属性
    ".acceptHrefParams",
    ".currentPage",
    ".currentTableName",
    ".currentTableName",
    ".description",
    ".hasChildrenField",
    ".ID",
    ".pageSize",
    ".queryParam",
    ".selectedRowKeys",
    ".selectedRows",
    ".sortField",
    ".sortType",
    ".total",
    // 方法
    ".loadData()",
    ".clearSelectedRow()",
    ".getLoadDataParams()",
    ".isTree()",
    // 事件(前置)
    "beforeEdit(row){ }",
    "beforeDelete(row){ }",
    "console.log()"
  ],
  form: [
    //------ 表单api -------
    // 属性
    ".loading",
    ".isUpdate",
    ".onlineFormRef",
    ".refMap",
    ".subActiveKey",
    ".sh",
    ".submitFlowFlag",
    ".subFormHeight",
    ".subTableHeight",
    ".tableName",
    ".$nextTick",
    // 方法
    ".addSubRows(tableName, rows)",
    ".changeOptions(field, options)",
    ".clearSubRows(tableName)",
    ".clearThenAddRows(tableName, rows)",
    ".getFieldsValue()",
    ".getSubTableInstance(tableName)",
    ".setFieldsValue(row)",
    ".triggleChangeValues(values,id,target)",
    ".triggleChangeValue(field, value)",
    ".onlineFormValueChange(field, value, otherValus)",
    // 提交前置事件
    "beforeSubmit(row){ }",
    // 表单加载事件
    "loaded(){ }",
    // 单表#表单值改变事件
    "onlChange(){ }",
    // 子表#表单值改变事件
    "子表名_onlChange(){ }",
    // js增强实现下拉联动
    ".changeOptions()",
    // JS增强 触发弹窗
    // JS增强 http请求
    "getAction(url, param)",
    "postAction(url, param)",
    "putAction(url, param)",
    "deleteAction(url, param)",
    "console.log()"
  ],
  common: [
    "this",
    ".openCustomModal(title,width,row,formComponent,requestUrl,hide,show)"
  ]
}, ae = I({
  name: "EnhanceJs",
  components: { BasicModal: q, JCodeEditor: L, EnhanceJsHistory: X },
  emits: ["register"],
  setup() {
    const { createMessage: e } = ee(), l = Y(), c = m(), y = m(), g = H({ form: {}, list: {} }), a = m("list"), r = m(""), u = m(!1), t = m(!1), n = m(""), d = H({ form: "", list: "" }), p = { form: !1, list: !1 }, b = m(!1), h = [...R.list, ...R.common], B = [...R.form, ...R.common], [D, { closeModal: N }] = G((o) => w(this, null, function* () {
      U(o.row);
    })), [_, K] = z(), { aiTestMode: A, genEnhanceJsData: M } = Q();
    function U(o) {
      r.value = o.id, t.value = !1, n.value = o.tableName;
      let s = l.getEnhanceJs(r.value);
      (s == null ? void 0 : s.length) > 0 ? (a.value = s[s.length - 1].type, u.value = !0) : u.value = !1, p.form = !1, p.list = !1, a.value ? S(a.value) : S("form"), b.value = !0, setTimeout(() => b.value = !1, 150);
    }
    function $() {
      return w(this, null, function* () {
        yield Promise.all([V("form"), V("list")]), N(), e.success("保存成功");
      });
    }
    function V(o) {
      return w(this, null, function* () {
        let s = g[o], C = {
          cgJs: d[o],
          cgJsType: o
        };
        if (!p[o] || s.cgJs === C.cgJs)
          return;
        let F = !!s.id;
        F && (C = Object.assign({}, s, C)), yield x(r.value, C, F), l.addEnhanceJs({
          code: r.value,
          str: C.cgJs,
          type: C.cgJsType,
          date: (/* @__PURE__ */ new Date()).getTime()
        });
      });
    }
    function O() {
      N();
    }
    function S(o) {
      return w(this, null, function* () {
        a.value = o;
        try {
          if (!p[o]) {
            let s = yield Z(r.value, o);
            Object.assign(g[o], { id: null }, s), d[o] = g[o].cgJs, p[o] = !0;
          }
        } catch (s) {
        }
        setTimeout(() => {
          o == "list" ? y.value.refresh() : c.value.refresh();
        }, 150);
      });
    }
    function P() {
      K.openModal(!0, {
        code: r.value,
        type: a.value
      });
    }
    function j(o) {
      d[a.value] != o && (t.value = !0, d[a.value] = o);
    }
    function W() {
      a.value === "form" ? M(n.value, a.value, c.value) : M(n.value, a.value, y.value);
    }
    return {
      formEditorRef: c,
      listEditorRef: y,
      reloading: b,
      enhanceValues: d,
      enhanceType: a,
      showHistory: u,
      aiTestMode: A,
      tableName: n,
      genEnhanceJsData: M,
      onGenTestData: W,
      onChangeType: S,
      onCodeChange: j,
      onShowHistory: P,
      onSubmit: $,
      onCancel: O,
      registerModal: D,
      registerEnhanceJsHistory: _,
      listKeyWords: h,
      formKeyWords: B
    };
  }
});
function ne(e, l, c, y, g, a) {
  const r = v("JCodeEditor"), u = v("a-tab-pane"), t = v("a-tabs"), n = v("a-button"), d = v("a-space"), p = v("EnhanceJsHistory"), b = v("BasicModal");
  return E(), T(b, {
    onRegister: e.registerModal,
    title: "JS增强",
    width: 800,
    bodyStyle: { height: "360px" }
  }, {
    footer: i(() => [
      f(d, null, {
        default: i(() => [
          f(n, { onClick: e.onCancel }, {
            default: i(() => [
              J("关闭")
            ]),
            _: 1
          }, 8, ["onClick"]),
          f(n, {
            type: "primary",
            onClick: e.onSubmit
          }, {
            default: i(() => [
              J("确定")
            ]),
            _: 1
          }, 8, ["onClick"])
        ]),
        _: 1
      }),
      f(d, { style: { float: "left" } }, {
        default: i(() => [
          e.showHistory ? (E(), T(n, {
            key: 0,
            onClick: e.onShowHistory
          }, {
            default: i(() => [
              J("查看历史版本")
            ]),
            _: 1
          }, 8, ["onClick"])) : k("", !0),
          e.aiTestMode ? (E(), T(n, {
            key: 1,
            onClick: e.onGenTestData
          }, {
            default: i(() => [
              J("生成测试数据")
            ]),
            _: 1
          }, 8, ["onClick"])) : k("", !0)
        ]),
        _: 1
      })
    ]),
    default: i(() => [
      f(t, {
        activeKey: e.enhanceType,
        "onUpdate:activeKey": l[2] || (l[2] = (h) => e.enhanceType = h),
        onChange: e.onChangeType
      }, {
        default: i(() => [
          f(u, {
            tab: "form",
            key: "form",
            forceRender: ""
          }, {
            default: i(() => [
              !e.reloading && e.enhanceType === "form" ? (E(), T(r, {
                key: 0,
                ref: "formEditorRef",
                value: e.enhanceValues.form,
                "onUpdate:value": l[0] || (l[0] = (h) => e.enhanceValues.form = h),
                language: "javascript",
                fullScreen: !0,
                lineNumbers: !1,
                height: "240px",
                "language-change": !1,
                onChange: e.onCodeChange,
                keywords: e.formKeyWords
              }, null, 8, ["value", "onChange", "keywords"])) : k("", !0)
            ]),
            _: 1
          }),
          f(u, {
            tab: "list",
            key: "list",
            forceRender: ""
          }, {
            default: i(() => [
              !e.reloading && e.enhanceType === "list" ? (E(), T(r, {
                key: 0,
                ref: "listEditorRef",
                value: e.enhanceValues.list,
                "onUpdate:value": l[1] || (l[1] = (h) => e.enhanceValues.list = h),
                language: "javascript",
                fullScreen: !0,
                lineNumbers: !1,
                height: "240px",
                "language-change": !1,
                onChange: e.onCodeChange,
                keywords: e.listKeyWords
              }, null, 8, ["value", "onChange", "keywords"])) : k("", !0)
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["activeKey", "onChange"]),
      f(p, { onRegister: e.registerEnhanceJsHistory }, null, 8, ["onRegister"])
    ]),
    _: 1
  }, 8, ["onRegister"]);
}
const we = /* @__PURE__ */ oe(ae, [["render", ne]]);
export {
  we as default
};
