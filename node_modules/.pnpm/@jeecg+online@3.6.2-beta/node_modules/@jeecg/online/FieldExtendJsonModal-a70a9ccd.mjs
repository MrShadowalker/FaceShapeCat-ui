var C = Object.defineProperty, P = Object.defineProperties;
var k = Object.getOwnPropertyDescriptors;
var v = Object.getOwnPropertySymbols;
var I = Object.prototype.hasOwnProperty, G = Object.prototype.propertyIsEnumerable;
var w = (o, t, l) => t in o ? C(o, t, { enumerable: !0, configurable: !0, writable: !0, value: l }) : o[t] = l, h = (o, t) => {
  for (var l in t || (t = {}))
    I.call(t, l) && w(o, l, t[l]);
  if (v)
    for (var l of v(t))
      G.call(t, l) && w(o, l, t[l]);
  return o;
}, _ = (o, t) => P(o, k(t));
var g = (o, t, l) => new Promise((m, n) => {
  var a = (i) => {
    try {
      s(l.next(i));
    } catch (d) {
      n(d);
    }
  }, p = (i) => {
    try {
      s(l.throw(i));
    } catch (d) {
      n(d);
    }
  }, s = (i) => i.done ? m(i.value) : Promise.resolve(i.value).then(a, p);
  s((l = l.apply(o, t)).next());
});
import { defineComponent as N, ref as f, reactive as V, toRaw as j, toRefs as K, resolveComponent as b, openBlock as $, createBlock as O, mergeProps as T, withCtx as F, createVNode as L } from "vue";
import { BasicModal as A, useModalInner as J } from "/@/components/Modal";
import { BasicForm as D, useForm as H } from "/@/components/Form/index";
import { pick as W } from "lodash-es";
import { L as S } from "./constant-754f1a9d.mjs";
import { _ as q } from "./index-0e3ab3af.mjs";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "/@/hooks/web/useMessage";
import "vue-router";
const z = N({
  name: "FieldExtendJsonModal",
  components: {
    BasicModal: A,
    BasicForm: D
  },
  emits: ["success", "register"],
  setup(o, { emit: t }) {
    const l = f(!1);
    function m() {
      n.uploadnum = 0, n.showLength = "", n.popupMulti = !0, n.multiSelect = !0, n.store = "", n.text = "", n.orderRule = "", n.validateError = "", n.labelLength = S;
    }
    const n = V({
      uploadnum: 0,
      showLength: "",
      popupMulti: !0,
      store: "",
      text: "",
      multiSelect: !0,
      orderRule: "",
      validateError: "",
      labelLength: S
    }), a = f(""), p = f(""), s = f("0"), i = [
      {
        label: "rowKey",
        field: "rowKey",
        component: "Input",
        show: !1
      },
      {
        label: "文件上传数量",
        field: "uploadnum",
        component: "InputNumber",
        componentProps: {
          style: {
            width: "100%"
          }
        },
        ifShow: () => a.value === "file" || a.value === "image"
      },
      {
        label: "是否多选",
        field: "popupMulti",
        component: "RadioGroup",
        defaultValue: !0,
        componentProps: {
          options: [
            { label: "否", value: !1 },
            { label: "是", value: !0 }
          ]
        },
        ifShow: () => a.value === "popup"
      },
      {
        label: "是否多选",
        field: "multiSelect",
        component: "RadioGroup",
        defaultValue: !0,
        componentProps: {
          options: [
            { label: "否", value: !1 },
            { label: "是", value: !0 }
          ]
        },
        ifShow: () => a.value === "sel_user" || a.value === "sel_depart"
      },
      {
        label: "存储字段",
        field: "store",
        component: "Input",
        ifShow: () => a.value === "sel_user" || a.value === "sel_depart"
      },
      {
        label: "展示字段",
        field: "text",
        component: "Input",
        ifShow: () => a.value === "sel_user" || a.value === "sel_depart"
      },
      {
        label: "默认排序",
        field: "orderRule",
        component: "RadioGroup",
        defaultValue: "",
        componentProps: {
          options: [
            { label: "降序", value: "desc" },
            { label: "升序", value: "asc" },
            { label: "不默认排序", value: "" }
          ]
        },
        ifShow: () => s.value === "1"
      },
      {
        label: "校验提示",
        field: "validateError",
        component: "Input",
        componentProps: {
          placeholder: "请输入校验提示文本"
        }
      },
      {
        label: "label长度",
        field: "labelLength",
        component: "InputNumber",
        componentProps: {
          placeholder: "请输入label长度"
        }
      },
      {
        label: "是否固定",
        field: "isFixed",
        component: "RadioGroup",
        defaultValue: 0,
        componentProps: {
          options: [
            { label: "是", value: 1 },
            { label: "否", value: 0 }
          ]
        }
      }
    ], [d, { validate: R, setFieldsValue: x, resetFields: y }] = H({
      schemas: i,
      showActionButtonGroup: !1,
      labelAlign: "right",
      labelWidth: 100
    }), [M, { closeModal: E }] = J((e) => g(this, null, function* () {
      if (m(), e.jsonStr) {
        let r = JSON.parse(e.jsonStr);
        Object.keys(r).map((c) => {
          n[c] = r[c];
        });
      }
      a.value = e.fieldShowType, p.value = e.id, s.value = e.sortFlag;
      let u = j(n);
      yield y(), yield x(_(h({}, u), {
        rowKey: e.id
      }));
    }));
    function B() {
      return g(this, null, function* () {
        let e = yield R(), u = a.value, r = {};
        u === "file" || u === "image" ? e.uploadnum && e.uploadnum > 0 && (r.uploadnum = e.uploadnum) : u === "textarea" || u === "text" ? e.showLength && e.showLength > 0 && (r.showLength = e.showLength) : u === "sel_user" || u === "sel_depart" ? r = W(e, "store", "text", "multiSelect") : u === "popup" && (r.popupMulti = e.popupMulti), s.value === "1" && e.orderRule && (r.orderRule = e.orderRule), e.validateError && (r.validateError = e.validateError), e.labelLength && (r.labelLength = e.labelLength), e.isFixed && (r.isFixed = e.isFixed);
        for (let c in r)
          r[c] === "" && delete r[c];
        t("success", r, e.rowKey), E();
      });
    }
    return h({
      spinningLoading: l,
      registerModal: M,
      registerForm: d,
      fieldShowType: a,
      rowKey: p,
      handleSubmit: B
    }, K(n));
  }
});
function Q(o, t, l, m, n, a) {
  const p = b("BasicForm"), s = b("a-spin"), i = b("BasicModal");
  return $(), O(i, T({ wrapClassName: "field-extend-config-modal" }, o.$attrs, {
    title: "扩展参数配置",
    onRegister: o.registerModal,
    keyboard: "",
    canFullscreen: !1,
    cancelText: "关闭",
    onOk: o.handleSubmit
  }), {
    default: F(() => [
      L(s, { spinning: o.spinningLoading }, {
        default: F(() => [
          L(p, { onRegister: o.registerForm }, null, 8, ["onRegister"])
        ]),
        _: 1
      }, 8, ["spinning"])
    ]),
    _: 1
  }, 16, ["onRegister", "onOk"]);
}
const re = /* @__PURE__ */ q(z, [["render", Q]]);
export {
  re as default
};
