import { useDebounceFn as v } from "@vueuse/core";
import { defHttp as S } from "/@/utils/http/axios";
import { useMessage as w } from "/@/hooks/web/useMessage";
import { ref as d, watch as f, resolveComponent as p, openBlock as c, createBlock as m, withCtx as h, createElementBlock as y, Fragment as C, renderList as x, createTextVNode as k, toDisplayString as O } from "vue";
import { _ as B } from "./index-0e3ab3af.mjs";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "vue-router";
const { createMessage: I } = w(), q = {
  name: "JOnlineSearchSelect",
  props: {
    placeholder: {
      type: String,
      default: "",
      required: !1
    },
    value: {
      type: String,
      required: !1
    },
    // online CgReport item id
    fieldId: {
      type: String,
      required: !0
    }
  },
  emits: ["update:value"],
  setup(r, { emit: i }) {
    let n = d(""), t = d([]);
    f(
      () => r.value,
      (e) => {
        e ? n.value = e : n.value = void 0;
      },
      { immediate: !0 }
    ), f(
      () => r.fieldId,
      () => {
        a();
      },
      { immediate: !0 }
    );
    const u = v(o, 800);
    function o(e = "") {
      let g = {
        keyword: e
      }, _ = "/online/cgreport/api/getReportDictList?fieldId=" + r.fieldId;
      S.get({ url: _, params: g }, { isTransformResponse: !1 }).then((l) => {
        l.success ? l.result && l.result.length > 0 ? t.value = l.result : t.value = [] : I.warning(l.message);
      });
    }
    function s(e) {
      i("update:value", e), (!e || e == "") && a();
    }
    function a() {
      t.value = [], o();
    }
    return {
      selectOptions: t,
      handleSearch: u,
      handleChange: s,
      selected: n
    };
  }
};
function D(r, i, n, t, u, o) {
  const s = p("a-select-option"), a = p("a-select");
  return c(), m(a, {
    value: t.selected,
    placeholder: n.placeholder,
    "show-search": "",
    "default-active-first-option": !1,
    "show-arrow": !0,
    "filter-option": !1,
    "not-found-content": null,
    onSearch: t.handleSearch,
    onChange: t.handleChange,
    allowClear: ""
  }, {
    default: h(() => [
      (c(!0), y(C, null, x(t.selectOptions, (e) => (c(), m(s, {
        key: e.value
      }, {
        default: h(() => [
          k(O(e.text), 1)
        ]),
        _: 2
      }, 1024))), 128))
    ]),
    _: 1
  }, 8, ["value", "placeholder", "onSearch", "onChange"]);
}
const E = /* @__PURE__ */ B(q, [["render", D]]);
export {
  E as default
};
