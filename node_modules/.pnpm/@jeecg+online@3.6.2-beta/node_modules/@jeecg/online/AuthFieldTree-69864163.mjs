var g = (e, m, u) => new Promise((C, h) => {
  var s = (a) => {
    try {
      o(u.next(a));
    } catch (i) {
      h(i);
    }
  }, l = (a) => {
    try {
      o(u.throw(a));
    } catch (i) {
      h(i);
    }
  }, o = (a) => a.done ? C(a.value) : Promise.resolve(a.value).then(s, l);
  o((u = u.apply(e, m)).next());
});
import { defineComponent as P, ref as p, computed as R, watch as V, unref as $, resolveComponent as f, openBlock as E, createElementBlock as A, createBlock as b, Fragment as q, createElementVNode as H, createVNode as d, withCtx as v, createTextVNode as k } from "vue";
import { useMessage as J } from "/@/hooks/web/useMessage";
import { k as L, l as j, s as G } from "./auth.api-d3a6c4b3.mjs";
import { DownCircleOutlined as Q, HomeOutlined as W, UpCircleOutlined as X, UndoOutlined as Y, CheckOutlined as Z } from "@ant-design/icons-vue";
import { _ as ee } from "./index-0e3ab3af.mjs";
import "/@/utils/http/axios";
import "/@/components/jeecg/OnLine/JPopupOnlReport.vue";
import "vue-router";
const ne = P({
  name: "AuthFieldTree",
  components: {
    DownCircleOutlined: Q,
    HomeOutlined: W,
    UpCircleOutlined: X,
    UndoOutlined: Y,
    CheckOutlined: Z
  },
  props: {
    cgformId: { type: String, required: !0 }
  },
  setup(e) {
    const { createMessage: m } = J(), u = p(""), C = p(1), h = p(!0), s = p([]), l = p([]), o = p([]), a = p([]), i = p(""), O = R(() => !u.value);
    V(() => e.cgformId, y, { immediate: !0 });
    function y() {
      return g(this, null, function* () {
        if (!e.cgformId)
          return;
        let n = yield L(e.cgformId, C.value), t = [], c = [];
        n.forEach((r) => {
          c.includes(r.code) || (c.push(r.code), t.push({ key: r.code, title: r.title }));
        });
        for (let r of t) {
          let I = [];
          for (let F of n)
            if (r.key === F.code) {
              let M = D(F);
              I.push({ key: F.id, title: M });
            }
          r.children = I;
        }
        a.value = t, s.value = [...c], o.value = c;
      });
    }
    function D(n) {
      let t = "";
      return n.page == 3 ? t += "列表" : n.page == 5 && (t += "表单"), n.control == 3 ? t += "可编辑" : n.control == 5 && (t += "可见"), t;
    }
    function _(n, t) {
      return g(this, null, function* () {
        u.value = n, i.value = t, l.value = [], yield y();
        let c = yield j({
          roleId: n,
          cgformId: e.cgformId,
          type: C.value,
          authMode: t
        });
        l.value = c.map((r) => r.authId);
      });
    }
    function K() {
      u.value = "", y();
    }
    function w() {
      y(), _(u.value, i.value);
    }
    function T() {
      return g(this, null, function* () {
        let n = l.value.filter((t) => o.value.indexOf(t) < 0);
        yield G(u.value, e.cgformId, {
          authId: JSON.stringify(n),
          authMode: i.value
        }), m.success("保存成功");
      });
    }
    function S() {
      s.value = [...o.value];
    }
    function x() {
      s.value = [];
    }
    function U(n) {
      s.value = n, h.value = !1;
    }
    function z() {
      u.value = "", l.value = [];
    }
    function B() {
      l.value = [];
    }
    function N() {
      const n = function(t) {
        for (let c of t)
          l.value.push(c.key), c.children && c.children.length > 0 && n.call(null, c.children);
      };
      l.value = [], n.call(null, $(a));
    }
    return {
      loadChecked: _,
      clear: z,
      expandedKeys: s,
      autoExpandParent: h,
      checkedKeys: l,
      treeData: a,
      disabled: O,
      onSave: T,
      onExpand: U,
      clearChecked: K,
      onCloseAll: x,
      onExpandAll: S,
      onRefresh: w,
      onClearSelected: B,
      onSelectAll: N
    };
  }
});
const te = { class: "onl-auth-tree-btns" };
function oe(e, m, u, C, h, s) {
  const l = f("a-empty"), o = f("a-button"), a = f("DownCircleOutlined"), i = f("UpCircleOutlined"), O = f("CheckOutlined"), y = f("UndoOutlined"), D = f("a-tree");
  return E(), A("div", null, [
    e.disabled ? (E(), b(l, {
      key: 0,
      description: "请先选中左侧角色/部门/用户"
    })) : e.treeData.length === 0 ? (E(), b(l, {
      key: 1,
      description: "无权限信息"
    })) : (E(), A(q, { key: 2 }, [
      H("div", te, [
        d(o, {
          onClick: e.onRefresh,
          size: "small",
          type: "primary",
          preIcon: "ant-design:redo",
          ghost: ""
        }, {
          default: v(() => [
            k("刷新")
          ]),
          _: 1
        }, 8, ["onClick"]),
        d(o, {
          onClick: e.onExpandAll,
          size: "small",
          type: "primary",
          ghost: ""
        }, {
          default: v(() => [
            d(a),
            k("展开")
          ]),
          _: 1
        }, 8, ["onClick"]),
        d(o, {
          onClick: e.onCloseAll,
          size: "small",
          type: "primary",
          ghost: ""
        }, {
          default: v(() => [
            d(i),
            k("折叠")
          ]),
          _: 1
        }, 8, ["onClick"]),
        d(o, {
          onClick: e.onSave,
          size: "small",
          type: "primary",
          preIcon: "ant-design:save",
          ghost: ""
        }, {
          default: v(() => [
            k("保存")
          ]),
          _: 1
        }, 8, ["onClick"]),
        d(o, {
          onClick: e.onSelectAll,
          size: "small",
          type: "primary",
          ghost: ""
        }, {
          default: v(() => [
            d(O),
            k("全选")
          ]),
          _: 1
        }, 8, ["onClick"]),
        d(o, {
          onClick: e.onClearSelected,
          size: "small",
          type: "primary",
          ghost: ""
        }, {
          default: v(() => [
            d(y),
            k("重置")
          ]),
          _: 1
        }, 8, ["onClick"])
      ]),
      d(D, {
        checkable: "",
        checkedKeys: e.checkedKeys,
        "onUpdate:checkedKeys": m[0] || (m[0] = (_) => e.checkedKeys = _),
        expandedKeys: e.expandedKeys,
        autoExpandParent: e.autoExpandParent,
        treeData: e.treeData,
        onExpand: e.onExpand
      }, null, 8, ["checkedKeys", "expandedKeys", "autoExpandParent", "treeData", "onExpand"])
    ], 64))
  ]);
}
const fe = /* @__PURE__ */ ee(ne, [["render", oe], ["__scopeId", "data-v-e6dabb1d"]]);
export {
  fe as default
};
