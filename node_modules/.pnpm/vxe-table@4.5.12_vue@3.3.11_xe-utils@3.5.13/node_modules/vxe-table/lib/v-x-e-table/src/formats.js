"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formats = void 0;
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _log = require("../../tools/log");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var VXEFormatsStore = /** @class */function () {
  function VXEFormatsStore() {
    this.store = {};
  }
  VXEFormatsStore.prototype.mixin = function (options) {
    var _this = this;
    _xeUtils.default.each(options, function (item, key) {
      _this.add(key, item);
    });
    return this;
  };
  VXEFormatsStore.prototype.has = function (name) {
    return !!this.get(name);
  };
  VXEFormatsStore.prototype.get = function (name) {
    return this.store[name];
  };
  VXEFormatsStore.prototype.add = function (name, render) {
    var conf = this.store[name];
    // 兼容
    if (_xeUtils.default.isFunction(render)) {
      if (process.env.NODE_ENV === 'development') {
        (0, _log.warnLog)('vxe.error.delProp', ['formats -> callback', 'cellFormatMethod']);
      }
      render = {
        cellFormatMethod: render
      };
    }
    // 检测是否覆盖
    if (process.env.NODE_ENV === 'development') {
      var confKeys_1 = _xeUtils.default.keys(conf);
      _xeUtils.default.each(render, function (item, key) {
        if (confKeys_1.includes(key)) {
          (0, _log.warnLog)('vxe.error.coverProp', [name, key]);
        }
      });
    }
    this.store[name] = conf ? _xeUtils.default.merge(conf, render) : render;
    return this;
  };
  VXEFormatsStore.prototype.delete = function (name) {
    delete this.store[name];
  };
  VXEFormatsStore.prototype.forEach = function (callback) {
    _xeUtils.default.objectEach(this.store, callback);
  };
  return VXEFormatsStore;
}();
var formats = new VXEFormatsStore();
exports.formats = formats;
if (process.env.NODE_ENV === 'development') {
  Object.assign(formats, {
    _name: 'Formats'
  });
}